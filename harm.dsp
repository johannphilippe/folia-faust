

declare name            "Folia Harmonizer";
declare version         "1.0";
declare author          "Johann Philippe";
declare license         "MIT";
declare copyright       "(c) Johann Philippe 2023-2024";

import("stdfaust.lib");

/*
MAXSR is used for delay buffer size calculation
*/
MAXSR = 48000;

/*
    This is a basic phasor window which could very likely be replaced by a non windowed phasor
*/
harm_win_len = 512;
harm_win_waveform = waveform{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006988525390625
, 0.014007568359375, 0.021026611328125, 0.028045654296875, 0.0350341796875, 0.04205322265625, 0.049041748046875
, 0.056060791015625, 0.06304931640625, 0.070037841796875, 0.077056884765625, 0.08404541015625, 0.091033935546875
, 0.097991943359375, 0.10498046875, 0.1119384765625, 0.118927001953125, 0.125885009765625, 0.1328125
, 0.1397705078125, 0.146697998046875, 0.153656005859375, 0.16058349609375, 0.16748046875, 0.174407958984375
, 0.181304931640625, 0.188201904296875, 0.195068359375, 0.201934814453125, 0.20880126953125, 0.215667724609375
, 0.222503662109375, 0.229339599609375, 0.23614501953125, 0.242950439453125, 0.249755859375, 0.25653076171875
, 0.2633056640625, 0.27008056640625, 0.276824951171875, 0.283538818359375, 0.290252685546875, 0.296966552734375
, 0.30364990234375, 0.310333251953125, 0.316986083984375, 0.323638916015625, 0.33026123046875, 0.33685302734375
, 0.34344482421875, 0.35003662109375, 0.356597900390625, 0.363128662109375, 0.369659423828125, 0.37615966796875
, 0.382659912109375, 0.389129638671875, 0.39556884765625, 0.402008056640625, 0.408416748046875, 0.414794921875
, 0.421173095703125, 0.427520751953125, 0.433868408203125, 0.440155029296875, 0.446441650390625, 0.45269775390625
, 0.458953857421875, 0.465179443359375, 0.47137451171875, 0.4775390625, 0.48370361328125, 0.48980712890625
, 0.49591064453125, 0.501983642578125, 0.508056640625, 0.514068603515625, 0.52008056640625, 0.52606201171875
, 0.532012939453125, 0.537933349609375, 0.5438232421875, 0.5496826171875, 0.5555419921875, 0.56134033203125
, 0.567138671875, 0.572906494140625, 0.578643798828125, 0.5843505859375, 0.59002685546875, 0.595672607421875
, 0.601287841796875, 0.60687255859375, 0.6124267578125, 0.617950439453125, 0.623443603515625, 0.628936767578125
, 0.634368896484375, 0.6397705078125, 0.6451416015625, 0.650482177734375, 0.655792236328125, 0.66107177734375
, 0.66632080078125, 0.6715087890625, 0.67669677734375, 0.681854248046875, 0.68695068359375, 0.692047119140625
, 0.69708251953125, 0.70208740234375, 0.707061767578125, 0.712005615234375, 0.7169189453125, 0.7218017578125
, 0.72662353515625, 0.731414794921875, 0.736175537109375, 0.74090576171875, 0.74560546875, 0.750244140625
, 0.7548828125, 0.75946044921875, 0.764007568359375, 0.76849365234375, 0.772979736328125, 0.77740478515625
, 0.78179931640625, 0.7861328125, 0.79046630859375, 0.79473876953125, 0.798980712890625, 0.80316162109375
, 0.80731201171875, 0.811431884765625, 0.815521240234375, 0.819549560546875, 0.82354736328125, 0.8275146484375
, 0.8314208984375, 0.835296630859375, 0.839141845703125, 0.842926025390625, 0.8466796875, 0.85040283203125
, 0.85406494140625, 0.857696533203125, 0.86126708984375, 0.86480712890625, 0.868316650390625, 0.87176513671875
, 0.87518310546875, 0.8785400390625, 0.881866455078125, 0.885162353515625, 0.888397216796875, 0.8916015625
, 0.894744873046875, 0.897857666015625, 0.90093994140625, 0.903961181640625, 0.90692138671875, 0.90985107421875
, 0.912750244140625, 0.91558837890625, 0.918365478515625, 0.921142578125, 0.923828125, 0.926483154296875
, 0.929107666015625, 0.931671142578125, 0.9342041015625, 0.936676025390625, 0.939117431640625, 0.941497802734375
, 0.94384765625, 0.946136474609375, 0.9483642578125, 0.950592041015625, 0.952728271484375, 0.954833984375
, 0.9569091796875, 0.958892822265625, 0.96087646484375, 0.962799072265625, 0.96466064453125, 0.96649169921875
, 0.96826171875, 0.970001220703125, 0.9716796875, 0.973297119140625, 0.974884033203125, 0.976409912109375
, 0.9779052734375, 0.979339599609375, 0.980743408203125, 0.982086181640625, 0.983367919921875, 0.984619140625
, 0.98583984375, 0.986968994140625, 0.988067626953125, 0.9891357421875, 0.990142822265625, 0.9910888671875
, 0.99200439453125, 0.99285888671875, 0.99365234375, 0.994415283203125, 0.995147705078125, 0.99578857421875
, 0.996429443359375, 0.996978759765625, 0.99749755859375, 0.997955322265625, 0.998382568359375, 0.998748779296875
, 0.99908447265625, 0.99932861328125, 0.99957275390625, 0.999725341796875, 0.999847412109375, 0.99993896484375
, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875
, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875
, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875
, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875
, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.999969482421875
, 0.999969482421875, 0.999969482421875, 0.999969482421875, 0.99993896484375, 0.999847412109375, 0.999725341796875
, 0.99957275390625, 0.99932861328125, 0.99908447265625, 0.998748779296875, 0.998382568359375, 0.997955322265625
, 0.99749755859375, 0.996978759765625, 0.996429443359375, 0.99578857421875, 0.995147705078125, 0.994415283203125
, 0.99365234375, 0.99285888671875, 0.99200439453125, 0.9910888671875, 0.990142822265625, 0.9891357421875
, 0.988067626953125, 0.986968994140625, 0.98583984375, 0.984619140625, 0.983367919921875, 0.982086181640625
, 0.980743408203125, 0.979339599609375, 0.9779052734375, 0.976409912109375, 0.974884033203125, 0.973297119140625
, 0.9716796875, 0.970001220703125, 0.96826171875, 0.96649169921875, 0.96466064453125, 0.962799072265625
, 0.96087646484375, 0.958892822265625, 0.9569091796875, 0.954833984375, 0.952728271484375, 0.950592041015625
, 0.9483642578125, 0.946136474609375, 0.94384765625, 0.941497802734375, 0.939117431640625, 0.936676025390625
, 0.9342041015625, 0.931671142578125, 0.929107666015625, 0.926483154296875, 0.923828125, 0.921142578125
, 0.918365478515625, 0.91558837890625, 0.912750244140625, 0.90985107421875, 0.90692138671875, 0.903961181640625
, 0.90093994140625, 0.897857666015625, 0.894744873046875, 0.8916015625, 0.888397216796875, 0.885162353515625
, 0.881866455078125, 0.8785400390625, 0.87518310546875, 0.87176513671875, 0.868316650390625, 0.86480712890625
, 0.86126708984375, 0.857696533203125, 0.85406494140625, 0.85040283203125, 0.8466796875, 0.842926025390625
, 0.839141845703125, 0.835296630859375, 0.8314208984375, 0.8275146484375, 0.82354736328125, 0.819549560546875
, 0.815521240234375, 0.811431884765625, 0.80731201171875, 0.80316162109375, 0.798980712890625, 0.79473876953125
, 0.79046630859375, 0.7861328125, 0.78179931640625, 0.77740478515625, 0.772979736328125, 0.76849365234375
, 0.764007568359375, 0.75946044921875, 0.7548828125, 0.750244140625, 0.74560546875, 0.74090576171875
, 0.736175537109375, 0.731414794921875, 0.72662353515625, 0.7218017578125, 0.7169189453125, 0.712005615234375
, 0.707061767578125, 0.70208740234375, 0.69708251953125, 0.692047119140625, 0.68695068359375, 0.681854248046875
, 0.67669677734375, 0.6715087890625, 0.66632080078125, 0.66107177734375, 0.655792236328125, 0.650482177734375
, 0.6451416015625, 0.6397705078125, 0.634368896484375, 0.628936767578125, 0.623443603515625, 0.617950439453125
, 0.6124267578125, 0.60687255859375, 0.601287841796875, 0.595672607421875, 0.59002685546875, 0.5843505859375
, 0.578643798828125, 0.572906494140625, 0.567138671875, 0.56134033203125, 0.5555419921875, 0.5496826171875
, 0.5438232421875, 0.537933349609375, 0.532012939453125, 0.52606201171875, 0.52008056640625, 0.514068603515625
, 0.508056640625, 0.501983642578125, 0.49591064453125, 0.48980712890625, 0.48370361328125, 0.4775390625
, 0.47137451171875, 0.465179443359375, 0.458953857421875, 0.45269775390625, 0.446441650390625, 0.440155029296875
, 0.433868408203125, 0.427520751953125, 0.421173095703125, 0.414794921875, 0.408416748046875, 0.402008056640625
, 0.39556884765625, 0.389129638671875, 0.382659912109375, 0.37615966796875, 0.369659423828125, 0.363128662109375
, 0.356597900390625, 0.35003662109375, 0.34344482421875, 0.33685302734375, 0.33026123046875, 0.323638916015625
, 0.316986083984375, 0.310333251953125, 0.30364990234375, 0.296966552734375, 0.290252685546875, 0.283538818359375
, 0.276824951171875, 0.27008056640625, 0.2633056640625, 0.25653076171875, 0.249755859375, 0.242950439453125
, 0.23614501953125, 0.229339599609375, 0.222503662109375, 0.215667724609375, 0.20880126953125, 0.201934814453125
, 0.195068359375, 0.188201904296875, 0.181304931640625, 0.174407958984375, 0.16748046875, 0.16058349609375
, 0.153656005859375, 0.146697998046875, 0.1397705078125, 0.1328125, 0.125885009765625, 0.118927001953125
, 0.1119384765625, 0.10498046875, 0.097991943359375, 0.091033935546875, 0.08404541015625, 0.077056884765625
, 0.070037841796875, 0.06304931640625, 0.056060791015625, 0.049041748046875, 0.04205322265625, 0.0350341796875
, 0.028045654296875, 0.021026611328125, 0.014007568359375, 0.006988525390625, 0.0, 0.0
, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
, 0.0, 0.0};

// Custom sample and hold function
sah(trig, condition, sig) = sig : ba.sAndH(cond) 
with {
    cond = (trig' < condition) & (trig >= condition);
};

// Floating delay with milliseconds arguments
del_ms(max_ms, time_ms, sig) = sig : de.fdelay(max_smps, time_smps)
with {
    max_smps = (max_ms / 1000) * MAXSR;
    time_smps = (time_ms / 1000) * ma.SR;
};


TABLE_SIZE = 16384;
// positive sine 
osc_phase(phase) = TABLE_SIZE, os.sinwaveform(TABLE_SIZE), int(phase / 2 * TABLE_SIZE) : rdtable;   
harm_win(phase) = harm_win_waveform, int(phase * harm_win_len) : rdtable;

// A few windowing utilities
hanning(length) = 0.5 * (1 - cos(2 * ma.PI * ba.time / (length - 1)));
hamming_scaling_constant = 0.08;
hamming_scaling_factor = 1.0 / (1.0 - hamming_scaling_constant);
hamming(length) = 0.54 - (0.46 * cos(2 * ma.PI * ba.time) / (length - 1));
blackman(length) = 0.42 - (0.5 * cos(2 * ma.PI * ba.time / (length -1))) 
    + (0.08 * cos(4 * ma.PI * ba.time / (length - 1)));


/* 
xdelay is a submodule from original patch,
it is a delay whose time is moving depending on some sampled and hold values 
*/
xdelay(maxtime_ms, delaytime_ms, winsize_ms, sig) =  sig 
                                            <: del_ms(maxtime_ms, sah1), del_ms(maxtime_ms, sah2) 
                                            : *(env_osc), *(inv_env_osc) 
                                            :> _
with {
    winsize_hz = 1 / (winsize_ms / 1000);
    env_osc = (os.osc(winsize_hz) + 1) *0.5;
    inv_env_osc = 1 - env_osc;
    sah1 = delaytime_ms : sah(env_osc, 0.0001);
    sah2 = delaytime_ms : sah(inv_env_osc, 0.0001);
};

/*
harmv2 is the main "subpatch" of the harmonizer for this piece 
it is based on moving delays based on two phasors in phase opposition
*/
harmv2(transp_cents, winsize_ms, delaytime_ms, sig) = del1 + del2
with {
    winclip = winsize_ms : aa.clip(1, 100000000);
    winline = winclip : si.smoo;
    win_factor = -3.795/(winclip); 
    transp_factor = transp_cents 
            : aa.clip(-4800, 4800) 
            : +(6000) 
            : *(0.01) 
            : ba.midikey2hz 
            : -(261.625977);
     transp = transp_factor
            : *(win_factor) //*(-0.0436) 
            : aa.clip(-400, 400)
            : ba.line( (5 / 1000) * ma.SR);
        
    phasor1 = os.hsp_phasor(1, transp, 0, 0);
    phasor2 = os.hsp_phasor(1, transp, os.impulse, 0.5);
    phmult1 = phasor1 * winline;
    phmult2 = phasor2 * winline;

    win_fq = 5;
    xdelayed = sig : xdelay(2100, delaytime_ms, 200 );

    win(length, phasor) = harm_win(phasor) ; 

    phdel1 = (phmult1 / 1000) : ba.sec2samp;
    phdel2 = (phmult2 / 1000) : ba.sec2samp;

    del1 = xdelayed : de.fdelay(ma.SR, phdel1) : *(win(TABLE_SIZE, phasor1));
    del2 = xdelayed : de.fdelay(ma.SR, phdel2) : *( win(TABLE_SIZE, phasor2)); 
};

/*
harm is the name of the harmonizer for this piece 
*/
harm(transp1, winsize1, delay1, transp2, winsize2, delay2, fb, bass) = filtered
with {
    dcblocker = fi.tf21(1, -1, 0., -0.9997, 0.);
    feedback = fb : si.smoo;
    stereo_harm = _,_ : harmv2(transp1, winsize1, delay1) , harmv2(transp2, winsize2, delay2);
    fbline = (_ : dcoffset) * feedback;
    harmonize = (_, _ :> *(feedback) : dcblocker : +(bass) : aa.clip(-1, 1) <: stereo_harm) ~(si.bus(2)); 
    filter = fi.lowpass(2, 3000);
    filtered = harmonize : filter, filter; 
};

// Constants and variable inputs are defined here 
fb = 0.44;
outscaler1 = 1;
outscaler2 = 1;
harmoutscaler = 1;
spatmix = 0;
fq = hslider("fq", 100, 50, 2000, 1) : si.smoo;
amp = hslider("amp", 0.4, 0, 1, 0.001) : si.smoo;

ingain = hslider("ingain", 0, -70, 12, 0.001) : si.smoo : ba.db2linear;
outgain = hslider("outgain", 0, -70, 12, 0.001) : si.smoo : ba.db2linear;

process = _ * ingain
    : harm(40, 75, 1, -35, 75, 35, fb) 
    : *(0.1), *(0.1)
    : *(outgain), *(outgain);

