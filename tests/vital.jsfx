/*
 * Generated by 'faust -lang jsfx -inpl -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0'
 */
desc: Effect mydsp
desc: aanl.lib/name "Faust Antialiased Nonlinearities"
desc: aanl.lib/version "1.3.0"
desc: analyzers.lib/name "Faust Analyzer Library"
desc: analyzers.lib/version "1.2.0"
desc: basics.lib/name "Faust Basic Element Library"
desc: basics.lib/sAndH:author "Romain Michon"
desc: basics.lib/tabulateNd "Copyright (C) 2023 Bart Brouns <bart@magnetophon.nl>"
desc: basics.lib/version "1.17.1"
desc: compile_options "-lang jsfx -inpl -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0"
desc: delays.lib/fdelayltv:author "Julius O. Smith III"
desc: delays.lib/name "Faust Delay Library"
desc: delays.lib/version "1.1.0"
desc: filename "vital_rev.dsp"
desc: filters.lib/allpass_comb:author "Julius O. Smith III"
desc: filters.lib/allpass_comb:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/allpass_comb:license "MIT-style STK-4.3 license"
desc: filters.lib/filterbank:author "Julius O. Smith III"
desc: filters.lib/filterbank:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/filterbank:license "MIT-style STK-4.3 license"
desc: filters.lib/highpass:author "Julius O. Smith III"
desc: filters.lib/highpass:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/highshelf:author "Julius O. Smith III"
desc: filters.lib/highshelf:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/highshelf:license "MIT-style STK-4.3 license"
desc: filters.lib/lowpass0_highpass1 "MIT-style STK-4.3 license"
desc: contributor "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/lowpass0_highpass1:author "Julius O. Smith III"
desc: filters.lib/lowpass:author "Julius O. Smith III"
desc: filters.lib/lowpass:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/lowpass:license "MIT-style STK-4.3 license"
desc: filters.lib/lowshelf:author "Julius O. Smith III"
desc: filters.lib/lowshelf:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/lowshelf:license "MIT-style STK-4.3 license"
desc: filters.lib/name "Faust Filters Library"
desc: filters.lib/tf1:author "Julius O. Smith III"
desc: filters.lib/tf1:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/tf1:license "MIT-style STK-4.3 license"
desc: filters.lib/tf1s:author "Julius O. Smith III"
desc: filters.lib/tf1s:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/tf1s:license "MIT-style STK-4.3 license"
desc: filters.lib/version "1.3.0"
desc: interpolators.lib/interpolate_linear:author "Stéphane Letz"
desc: interpolators.lib/interpolate_linear:licence "MIT"
desc: interpolators.lib/name "Faust Interpolator Library"
desc: interpolators.lib/remap:author "David Braun"
desc: interpolators.lib/version "1.3.1"
desc: maths.lib/author "GRAME"
desc: maths.lib/copyright "GRAME"
desc: maths.lib/license "LGPL with exception"
desc: maths.lib/name "Faust Math Library"
desc: maths.lib/version "2.8.0"
desc: misceffects.lib/dryWetMixerConstantPower:author "David Braun, revised by Stéphane Letz"
desc: misceffects.lib/name "Misc Effects Library"
desc: misceffects.lib/version "2.5.0"
desc: name "vital_rev"
desc: platform.lib/name "Generic Platform Library"
desc: platform.lib/version "1.3.0"
desc: reverbs.lib/name "Faust Reverb Library"
desc: reverbs.lib/version "1.3.0"
desc: reverbs.lib/vital_rev:author "David Braun"
desc: reverbs.lib/vital_rev:license "GPL-3.0"
desc: routes.lib/name "Faust Signal Routing Library"
desc: routes.lib/version "1.2.0"
desc: signals.lib/name "Faust Signal Routing Library"
desc: signals.lib/version "1.5.0"
desc: spats.lib/name "Faust Spatialization Library"
desc: spats.lib/version "1.1.0"


slider1:fHslider6=0<0,1,0.001>hslider_chorus_amt0 
slider2:fHslider5=0<0,1,0.001>hslider_chorus_freq0 
slider3:fHslider3=1<0,1,0.001>hslider_high0 
slider4:fHslider4=1<0,1,0.001>hslider_highgain0 
slider5:fHslider1=0<0,1,0.001>hslider_low0 
slider6:fHslider2=1<0,1,0.001>hslider_lowgain0 
slider7:fHslider7=0<0,1,0.001>hslider_predelay0 
slider8:fHslider9=1<0,1,0.001>hslider_prehigh0 
slider9:fHslider8=0<0,1,0.001>hslider_prelow0 
slider10:fHslider0=0.5<0,1,0.001>hslider_size0 

in_pin:input0
out_pin:output0
out_pin:output1

@init

// GLOBAL Functions 

/*
 * Initialise memory allocator 
 */
function init_memory() instance(index) (
 index = 0;
);
/*
 *Allocate memory 
 */
function alloc_memory(amount) instance(index) local(i) (
 i = index; 
 index += amount; 
 i;
);
MEMORY.init_memory();

function zeros(address, amount) (
 i = 0;
 loop(amount, address[i] = 0; i+=1;);
 address;
);
function int32(x) ( 
 x >= 2147483648 ? x - 4294967296 : x; 
); 
function uint32(x) ( 
 x < 0 ? x + 4294967296 : x; 
); 
function add32(x, y) ( 
 (x += y) >= 4294967296 ? x - 4294967296 : x; 
); 
function sub32(x, y) ( 
 (x -= y) < 0 ? x + 4294967296 : x; 
); 
function mul32(x, y) local(a, b) ( 
 x = uint32(x); 
 y = uint32(y); 
 a = x & 0xFFFF; 
 b = y & 0xFFFF; 
 y = ((((y / 65536)|0) * a + ((x / 65536)|0) * b) & 0xFFFF) * 65536 + a * b; 
 y >= 4294967296 ? y - 4294967296 : y; 
); 
function ftoi32(x) ( 
 x <= -1 ? ((min(max(-2147483648, x), -1)|0) + 4294967296;) : (min(max(0, x), 4294967295)|0;); 
);function limit(x, min, max) (
   (x < min) ? min : (x > max) ? max : x; 
);
function midi_scale(x, min, max, step) (
   diff = (max - min);
   min + (diff * (x / 127));
);
function mtof(mid) (
   440 * exp(0.0577622645 * (mid - 69));
);
/*
 * Mathematical functions 
 */
function exp2(arg) (pow(2, n)); 
function exp10(arg) (pow(10, n)); 
function log2(x) (log(x) / log(2)); 
function round(N) (0|(N+sign(N)*0.5)); 
function rint(x) (round(int32(x))); 
function mod(a,b) (a%b); 
function remainder(x,y) (
 x - (round(x/y)*y);
);
function fmod(x,y) ( 
 y = abs(y); 
 res = remainder(abs(x), y); 
 (res < 0) ? res += y; 
 (x < 0) ? -res : res; 
);
/* 
 * MIDI Constants 
 */ 
CC = 0xB0; 
NOTE_ON = 0x90; 
NOTE_OFF = 0x80; 

num_inputs = 1;
num_outputs = 2;

nvoices = 1;
voice_idx = 0; 

ftbl0mydspSIG0 = MEMORY.alloc_memory(4);
itbl1mydspSIG1 = MEMORY.alloc_memory(4);
ftbl2mydspSIG2 = MEMORY.alloc_memory(4);
itbl3mydspSIG3 = MEMORY.alloc_memory(4);
ftbl4mydspSIG4 = MEMORY.alloc_memory(4);
itbl5mydspSIG5 = MEMORY.alloc_memory(4);
ftbl6mydspSIG6 = MEMORY.alloc_memory(4);
itbl7mydspSIG7 = MEMORY.alloc_memory(4);
fmydspSIG0Wave0 = MEMORY.alloc_memory(4);fmydspSIG0Wave0[0] = 6753.2001953125000000;
fmydspSIG0Wave0[1] = 9278.4003906250000000;
fmydspSIG0Wave0[2] = 7704.5000000000000000;
fmydspSIG0Wave0[3] = 11328.5000000000000000;

imydspSIG1Wave0 = MEMORY.alloc_memory(4);imydspSIG1Wave0[0] = 1001;
imydspSIG1Wave0[1] = 799;
imydspSIG1Wave0[2] = 933;
imydspSIG1Wave0[3] = 876;

fmydspSIG2Wave0 = MEMORY.alloc_memory(4);fmydspSIG2Wave0[0] = 9701.1201171875000000;
fmydspSIG2Wave0[1] = 5512.5000000000000000;
fmydspSIG2Wave0[2] = 8480.4501953125000000;
fmydspSIG2Wave0[3] = 5638.6499023437500000;

imydspSIG3Wave0 = MEMORY.alloc_memory(4);imydspSIG3Wave0[0] = 895;
imydspSIG3Wave0[1] = 807;
imydspSIG3Wave0[2] = 907;
imydspSIG3Wave0[3] = 853;

fmydspSIG4Wave0 = MEMORY.alloc_memory(4);fmydspSIG4Wave0[0] = 3120.7299804687500000;
fmydspSIG4Wave0[1] = 3429.5000000000000000;
fmydspSIG4Wave0[2] = 3626.3701171875000000;
fmydspSIG4Wave0[3] = 7713.5200195312500000;

imydspSIG5Wave0 = MEMORY.alloc_memory(4);imydspSIG5Wave0[0] = 957;
imydspSIG5Wave0[1] = 1019;
imydspSIG5Wave0[2] = 711;
imydspSIG5Wave0[3] = 567;

fmydspSIG6Wave0 = MEMORY.alloc_memory(4);fmydspSIG6Wave0[0] = 4521.5400390625000000;
fmydspSIG6Wave0[1] = 6518.9702148437500000;
fmydspSIG6Wave0[2] = 5265.5600585937500000;
fmydspSIG6Wave0[3] = 5630.2500000000000000;

imydspSIG7Wave0 = MEMORY.alloc_memory(4);imydspSIG7Wave0[0] = 833;
imydspSIG7Wave0[1] = 779;
imydspSIG7Wave0[2] = 663;
imydspSIG7Wave0[3] = 997;

function get_dsp(index) (
  dsp.memory + dsp.size * index 
);

// DSP struct memory layout 
dsp.memory = MEMORY.alloc_memory(0);
dsp.size = 2179469;
dsp.IOTA0 = 0;
dsp.fVec0 = 1;
dsp.iVec1 = 65537;
dsp.iRec21 = 65539;
dsp.fSampleRate = 65541;
dsp.fConst0 = 65542;
dsp.fConst1 = 65543;
dsp.fConst2 = 65544;
dsp.fVec2 = 65545;
dsp.fConst3 = 65547;
dsp.fRec23 = 65548;
dsp.fRec24 = 65550;
dsp.fRec22 = 65552;
dsp.fRec20 = 65554;
dsp.fVec3 = 65556;
dsp.fConst4 = 65558;
dsp.fRec18 = 65559;
dsp.fRec19 = 65561;
dsp.fConst5 = 65563;
dsp.fHslider0 = 65564;
dsp.fHslider1 = 65565;
dsp.fConst6 = 65566;
dsp.fRec26 = 65567;
dsp.fHslider2 = 65569;
dsp.fRec27 = 65570;
dsp.fVec4 = 65572;
dsp.fHslider3 = 65574;
dsp.fRec25 = 65575;
dsp.fHslider4 = 65577;
dsp.fRec28 = 65578;
dsp.fVec5 = 65580;
dsp.fConst7 = 196652;
dsp.fHslider5 = 196653;
dsp.fConst8 = 196654;
dsp.fRec29 = 196655;
dsp.fHslider6 = 196657;
dsp.fConst9 = 196658;
dsp.fConst10 = 196659;
dsp.fHslider7 = 196660;
dsp.fVec6 = 196661;
dsp.fHslider8 = 196663;
dsp.fRec31 = 196664;
dsp.fHslider9 = 196666;
dsp.fRec30 = 196667;
dsp.fVec7 = 196669;
dsp.iConst11 = 197693;
dsp.fRec16 = 197694;
dsp.fConst12 = 197696;
dsp.fRec35 = 197697;
dsp.fRec36 = 197699;
dsp.fVec8 = 197701;
dsp.fRec34 = 197703;
dsp.fRec37 = 197705;
dsp.fVec9 = 197707;
dsp.fRec38 = 328779;
dsp.fConst13 = 328781;
dsp.fVec10 = 328782;
dsp.iConst14 = 329806;
dsp.fRec32 = 329807;
dsp.fConst15 = 329809;
dsp.fRec42 = 329810;
dsp.fRec43 = 329812;
dsp.fVec11 = 329814;
dsp.fRec41 = 329816;
dsp.fRec44 = 329818;
dsp.fVec12 = 329820;
dsp.fRec45 = 460892;
dsp.fConst16 = 460894;
dsp.fVec13 = 460895;
dsp.iConst17 = 461919;
dsp.fRec39 = 461920;
dsp.fConst18 = 461922;
dsp.fRec49 = 461923;
dsp.fRec50 = 461925;
dsp.fVec14 = 461927;
dsp.fRec48 = 461929;
dsp.fRec51 = 461931;
dsp.fVec15 = 461933;
dsp.fRec52 = 593005;
dsp.fConst19 = 593007;
dsp.fVec16 = 593008;
dsp.iConst20 = 594032;
dsp.fRec46 = 594033;
dsp.fConst21 = 594035;
dsp.fRec56 = 594036;
dsp.fRec57 = 594038;
dsp.fVec17 = 594040;
dsp.fRec55 = 594042;
dsp.fRec58 = 594044;
dsp.fVec18 = 594046;
dsp.fConst22 = 725118;
dsp.fVec19 = 725119;
dsp.iConst23 = 726143;
dsp.fRec53 = 726144;
dsp.fConst24 = 726146;
dsp.fRec62 = 726147;
dsp.fRec63 = 726149;
dsp.fVec20 = 726151;
dsp.fRec61 = 726153;
dsp.fRec64 = 726155;
dsp.fVec21 = 726157;
dsp.fRec65 = 857229;
dsp.fConst25 = 857231;
dsp.fVec22 = 857232;
dsp.iConst26 = 858256;
dsp.fRec59 = 858257;
dsp.fConst27 = 858259;
dsp.fRec69 = 858260;
dsp.fRec70 = 858262;
dsp.fVec23 = 858264;
dsp.fRec68 = 858266;
dsp.fRec71 = 858268;
dsp.fVec24 = 858270;
dsp.fConst28 = 989342;
dsp.fVec25 = 989343;
dsp.iConst29 = 990367;
dsp.fRec66 = 990368;
dsp.fConst30 = 990370;
dsp.fRec75 = 990371;
dsp.fRec76 = 990373;
dsp.fVec26 = 990375;
dsp.fRec74 = 990377;
dsp.fRec77 = 990379;
dsp.fVec27 = 990381;
dsp.fConst31 = 1121453;
dsp.fVec28 = 1121454;
dsp.iConst32 = 1122478;
dsp.fRec72 = 1122479;
dsp.fConst33 = 1122481;
dsp.fRec81 = 1122482;
dsp.fRec82 = 1122484;
dsp.fVec29 = 1122486;
dsp.fRec80 = 1122488;
dsp.fRec83 = 1122490;
dsp.fVec30 = 1122492;
dsp.fRec84 = 1253564;
dsp.fConst34 = 1253566;
dsp.fVec31 = 1253567;
dsp.iConst35 = 1254591;
dsp.fRec78 = 1254592;
dsp.fConst36 = 1254594;
dsp.fRec88 = 1254595;
dsp.fRec89 = 1254597;
dsp.fVec32 = 1254599;
dsp.fRec87 = 1254601;
dsp.fRec90 = 1254603;
dsp.fVec33 = 1254605;
dsp.fConst37 = 1385677;
dsp.fVec34 = 1385678;
dsp.iConst38 = 1386702;
dsp.fRec85 = 1386703;
dsp.fConst39 = 1386705;
dsp.fRec94 = 1386706;
dsp.fRec95 = 1386708;
dsp.fVec35 = 1386710;
dsp.fRec93 = 1386712;
dsp.fRec96 = 1386714;
dsp.fVec36 = 1386716;
dsp.fConst40 = 1517788;
dsp.fVec37 = 1517789;
dsp.iConst41 = 1518813;
dsp.fRec91 = 1518814;
dsp.fConst42 = 1518816;
dsp.fRec100 = 1518817;
dsp.fRec101 = 1518819;
dsp.fVec38 = 1518821;
dsp.fRec99 = 1518823;
dsp.fRec102 = 1518825;
dsp.fVec39 = 1518827;
dsp.fRec103 = 1649899;
dsp.fConst43 = 1649901;
dsp.fVec40 = 1649902;
dsp.iConst44 = 1650926;
dsp.fRec97 = 1650927;
dsp.fConst45 = 1650929;
dsp.fRec107 = 1650930;
dsp.fRec108 = 1650932;
dsp.fVec41 = 1650934;
dsp.fRec106 = 1650936;
dsp.fRec109 = 1650938;
dsp.fVec42 = 1650940;
dsp.fConst46 = 1782012;
dsp.fVec43 = 1782013;
dsp.iConst47 = 1783037;
dsp.fRec104 = 1783038;
dsp.fConst48 = 1783040;
dsp.fRec113 = 1783041;
dsp.fRec114 = 1783043;
dsp.fVec44 = 1783045;
dsp.fRec112 = 1783047;
dsp.fRec115 = 1783049;
dsp.fVec45 = 1783051;
dsp.fConst49 = 1914123;
dsp.fVec46 = 1914124;
dsp.iConst50 = 1915148;
dsp.fRec110 = 1915149;
dsp.fConst51 = 1915151;
dsp.fRec119 = 1915152;
dsp.fRec120 = 1915154;
dsp.fVec47 = 1915156;
dsp.fRec118 = 1915158;
dsp.fRec121 = 1915160;
dsp.fVec48 = 1915162;
dsp.fRec122 = 2046234;
dsp.fConst52 = 2046236;
dsp.fVec49 = 2046237;
dsp.iConst53 = 2047261;
dsp.fRec116 = 2047262;
dsp.fConst54 = 2047264;
dsp.fRec126 = 2047265;
dsp.fRec127 = 2047267;
dsp.fVec50 = 2047269;
dsp.fRec125 = 2047271;
dsp.fRec128 = 2047273;
dsp.fVec51 = 2047275;
dsp.fConst55 = 2178347;
dsp.fVec52 = 2178348;
dsp.iConst56 = 2179372;
dsp.fRec123 = 2179373;
dsp.fRec0 = 2179375;
dsp.fRec1 = 2179378;
dsp.fRec2 = 2179381;
dsp.fRec3 = 2179384;
dsp.fRec4 = 2179387;
dsp.fRec5 = 2179390;
dsp.fRec6 = 2179393;
dsp.fRec7 = 2179396;
dsp.fRec8 = 2179399;
dsp.fRec9 = 2179402;
dsp.fRec10 = 2179405;
dsp.fRec11 = 2179408;
dsp.fRec12 = 2179411;
dsp.fRec13 = 2179414;
dsp.fRec14 = 2179417;
dsp.fRec15 = 2179420;
dsp.fmydspSIG0Wave0_idx = 2179423;
dsp.imydspSIG1Wave0_idx = 2179424;
dsp.fmydspSIG2Wave0_idx = 2179425;
dsp.imydspSIG3Wave0_idx = 2179426;
dsp.fmydspSIG4Wave0_idx = 2179427;
dsp.imydspSIG5Wave0_idx = 2179428;
dsp.fmydspSIG6Wave0_idx = 2179429;
dsp.imydspSIG7Wave0_idx = 2179430;
dsp.fSlow0 = 2179431;
dsp.fSlow1 = 2179432;
dsp.fSlow2 = 2179433;
dsp.fSlow3 = 2179434;
dsp.fSlow4 = 2179435;
dsp.fSlow5 = 2179436;
dsp.fSlow6 = 2179437;
dsp.fSlow7 = 2179438;
dsp.fSlow8 = 2179439;
dsp.fSlow9 = 2179440;
dsp.fSlow10 = 2179441;
dsp.fSlow11 = 2179442;
dsp.fSlow12 = 2179443;
dsp.fSlow13 = 2179444;
dsp.fSlow14 = 2179445;
dsp.iSlow15 = 2179446;
dsp.iSlow16 = 2179447;
dsp.fSlow17 = 2179448;
dsp.fSlow18 = 2179449;
dsp.fSlow19 = 2179450;
dsp.fSlow20 = 2179451;
dsp.fSlow21 = 2179452;
dsp.fSlow22 = 2179453;
dsp.iSlow23 = 2179454;
dsp.fSlow24 = 2179455;
dsp.iSlow25 = 2179456;
dsp.fSlow26 = 2179457;
dsp.iSlow27 = 2179458;
dsp.fSlow28 = 2179459;
dsp.fSlow29 = 2179460;
dsp.fSlow30 = 2179461;
dsp.fSlow31 = 2179462;
dsp.fSlow32 = 2179463;
dsp.fSlow33 = 2179464;
dsp.fSlow34 = 2179465;
dsp.fSlow35 = 2179466;
dsp.output0 = 2179467; 
dsp.output1 = 2179468; 

function create_instances() (
	voice_idx = 0;
	while(voice_idx < nvoices) (
		obj = MEMORY.alloc_memory(dsp.size);
		memset( obj + dsp.fVec0, 0, 65536);
		memset( obj + dsp.iVec1, 0, 2);
		memset( obj + dsp.iRec21, 0, 2);
		memset( obj + dsp.fVec2, 0, 2);
		memset( obj + dsp.fRec23, 0, 2);
		memset( obj + dsp.fRec24, 0, 2);
		memset( obj + dsp.fRec22, 0, 2);
		memset( obj + dsp.fRec20, 0, 2);
		memset( obj + dsp.fVec3, 0, 2);
		memset( obj + dsp.fRec18, 0, 2);
		memset( obj + dsp.fRec19, 0, 2);
		memset( obj + dsp.fRec26, 0, 2);
		memset( obj + dsp.fRec27, 0, 2);
		memset( obj + dsp.fVec4, 0, 2);
		memset( obj + dsp.fRec25, 0, 2);
		memset( obj + dsp.fRec28, 0, 2);
		memset( obj + dsp.fVec5, 0, 131072);
		memset( obj + dsp.fRec29, 0, 2);
		memset( obj + dsp.fVec6, 0, 2);
		memset( obj + dsp.fRec31, 0, 2);
		memset( obj + dsp.fRec30, 0, 2);
		memset( obj + dsp.fVec7, 0, 1024);
		memset( obj + dsp.fRec16, 0, 2);
		memset( obj + dsp.fRec35, 0, 2);
		memset( obj + dsp.fRec36, 0, 2);
		memset( obj + dsp.fVec8, 0, 2);
		memset( obj + dsp.fRec34, 0, 2);
		memset( obj + dsp.fRec37, 0, 2);
		memset( obj + dsp.fVec9, 0, 131072);
		memset( obj + dsp.fRec38, 0, 2);
		memset( obj + dsp.fVec10, 0, 1024);
		memset( obj + dsp.fRec32, 0, 2);
		memset( obj + dsp.fRec42, 0, 2);
		memset( obj + dsp.fRec43, 0, 2);
		memset( obj + dsp.fVec11, 0, 2);
		memset( obj + dsp.fRec41, 0, 2);
		memset( obj + dsp.fRec44, 0, 2);
		memset( obj + dsp.fVec12, 0, 131072);
		memset( obj + dsp.fRec45, 0, 2);
		memset( obj + dsp.fVec13, 0, 1024);
		memset( obj + dsp.fRec39, 0, 2);
		memset( obj + dsp.fRec49, 0, 2);
		memset( obj + dsp.fRec50, 0, 2);
		memset( obj + dsp.fVec14, 0, 2);
		memset( obj + dsp.fRec48, 0, 2);
		memset( obj + dsp.fRec51, 0, 2);
		memset( obj + dsp.fVec15, 0, 131072);
		memset( obj + dsp.fRec52, 0, 2);
		memset( obj + dsp.fVec16, 0, 1024);
		memset( obj + dsp.fRec46, 0, 2);
		memset( obj + dsp.fRec56, 0, 2);
		memset( obj + dsp.fRec57, 0, 2);
		memset( obj + dsp.fVec17, 0, 2);
		memset( obj + dsp.fRec55, 0, 2);
		memset( obj + dsp.fRec58, 0, 2);
		memset( obj + dsp.fVec18, 0, 131072);
		memset( obj + dsp.fVec19, 0, 1024);
		memset( obj + dsp.fRec53, 0, 2);
		memset( obj + dsp.fRec62, 0, 2);
		memset( obj + dsp.fRec63, 0, 2);
		memset( obj + dsp.fVec20, 0, 2);
		memset( obj + dsp.fRec61, 0, 2);
		memset( obj + dsp.fRec64, 0, 2);
		memset( obj + dsp.fVec21, 0, 131072);
		memset( obj + dsp.fRec65, 0, 2);
		memset( obj + dsp.fVec22, 0, 1024);
		memset( obj + dsp.fRec59, 0, 2);
		memset( obj + dsp.fRec69, 0, 2);
		memset( obj + dsp.fRec70, 0, 2);
		memset( obj + dsp.fVec23, 0, 2);
		memset( obj + dsp.fRec68, 0, 2);
		memset( obj + dsp.fRec71, 0, 2);
		memset( obj + dsp.fVec24, 0, 131072);
		memset( obj + dsp.fVec25, 0, 1024);
		memset( obj + dsp.fRec66, 0, 2);
		memset( obj + dsp.fRec75, 0, 2);
		memset( obj + dsp.fRec76, 0, 2);
		memset( obj + dsp.fVec26, 0, 2);
		memset( obj + dsp.fRec74, 0, 2);
		memset( obj + dsp.fRec77, 0, 2);
		memset( obj + dsp.fVec27, 0, 131072);
		memset( obj + dsp.fVec28, 0, 1024);
		memset( obj + dsp.fRec72, 0, 2);
		memset( obj + dsp.fRec81, 0, 2);
		memset( obj + dsp.fRec82, 0, 2);
		memset( obj + dsp.fVec29, 0, 2);
		memset( obj + dsp.fRec80, 0, 2);
		memset( obj + dsp.fRec83, 0, 2);
		memset( obj + dsp.fVec30, 0, 131072);
		memset( obj + dsp.fRec84, 0, 2);
		memset( obj + dsp.fVec31, 0, 1024);
		memset( obj + dsp.fRec78, 0, 2);
		memset( obj + dsp.fRec88, 0, 2);
		memset( obj + dsp.fRec89, 0, 2);
		memset( obj + dsp.fVec32, 0, 2);
		memset( obj + dsp.fRec87, 0, 2);
		memset( obj + dsp.fRec90, 0, 2);
		memset( obj + dsp.fVec33, 0, 131072);
		memset( obj + dsp.fVec34, 0, 1024);
		memset( obj + dsp.fRec85, 0, 2);
		memset( obj + dsp.fRec94, 0, 2);
		memset( obj + dsp.fRec95, 0, 2);
		memset( obj + dsp.fVec35, 0, 2);
		memset( obj + dsp.fRec93, 0, 2);
		memset( obj + dsp.fRec96, 0, 2);
		memset( obj + dsp.fVec36, 0, 131072);
		memset( obj + dsp.fVec37, 0, 1024);
		memset( obj + dsp.fRec91, 0, 2);
		memset( obj + dsp.fRec100, 0, 2);
		memset( obj + dsp.fRec101, 0, 2);
		memset( obj + dsp.fVec38, 0, 2);
		memset( obj + dsp.fRec99, 0, 2);
		memset( obj + dsp.fRec102, 0, 2);
		memset( obj + dsp.fVec39, 0, 131072);
		memset( obj + dsp.fRec103, 0, 2);
		memset( obj + dsp.fVec40, 0, 1024);
		memset( obj + dsp.fRec97, 0, 2);
		memset( obj + dsp.fRec107, 0, 2);
		memset( obj + dsp.fRec108, 0, 2);
		memset( obj + dsp.fVec41, 0, 2);
		memset( obj + dsp.fRec106, 0, 2);
		memset( obj + dsp.fRec109, 0, 2);
		memset( obj + dsp.fVec42, 0, 131072);
		memset( obj + dsp.fVec43, 0, 1024);
		memset( obj + dsp.fRec104, 0, 2);
		memset( obj + dsp.fRec113, 0, 2);
		memset( obj + dsp.fRec114, 0, 2);
		memset( obj + dsp.fVec44, 0, 2);
		memset( obj + dsp.fRec112, 0, 2);
		memset( obj + dsp.fRec115, 0, 2);
		memset( obj + dsp.fVec45, 0, 131072);
		memset( obj + dsp.fVec46, 0, 1024);
		memset( obj + dsp.fRec110, 0, 2);
		memset( obj + dsp.fRec119, 0, 2);
		memset( obj + dsp.fRec120, 0, 2);
		memset( obj + dsp.fVec47, 0, 2);
		memset( obj + dsp.fRec118, 0, 2);
		memset( obj + dsp.fRec121, 0, 2);
		memset( obj + dsp.fVec48, 0, 131072);
		memset( obj + dsp.fRec122, 0, 2);
		memset( obj + dsp.fVec49, 0, 1024);
		memset( obj + dsp.fRec116, 0, 2);
		memset( obj + dsp.fRec126, 0, 2);
		memset( obj + dsp.fRec127, 0, 2);
		memset( obj + dsp.fVec50, 0, 2);
		memset( obj + dsp.fRec125, 0, 2);
		memset( obj + dsp.fRec128, 0, 2);
		memset( obj + dsp.fVec51, 0, 131072);
		memset( obj + dsp.fVec52, 0, 1024);
		memset( obj + dsp.fRec123, 0, 2);
		memset( obj + dsp.fRec0, 0, 3);
		memset( obj + dsp.fRec1, 0, 3);
		memset( obj + dsp.fRec2, 0, 3);
		memset( obj + dsp.fRec3, 0, 3);
		memset( obj + dsp.fRec4, 0, 3);
		memset( obj + dsp.fRec5, 0, 3);
		memset( obj + dsp.fRec6, 0, 3);
		memset( obj + dsp.fRec7, 0, 3);
		memset( obj + dsp.fRec8, 0, 3);
		memset( obj + dsp.fRec9, 0, 3);
		memset( obj + dsp.fRec10, 0, 3);
		memset( obj + dsp.fRec11, 0, 3);
		memset( obj + dsp.fRec12, 0, 3);
		memset( obj + dsp.fRec13, 0, 3);
		memset( obj + dsp.fRec14, 0, 3);
		memset( obj + dsp.fRec15, 0, 3);
		voice_idx += 1; 
	);
);

function init_instances() (
	voice_idx = 0; 
	while(voice_idx < nvoices) ( 
		obj = dsp.memory + dsp.size * voice_idx;
		obj[dsp.IOTA0] = 0;
		
		l0 = 0;
		
		while(l0 < 65536)
		(
			obj[dsp.fVec0 + l0] = 0.0000000000000000;
			l0 = int32(add32(l0, 1));
		
		);
		l1 = 0;
		
		while(l1 < 2)
		(
			obj[dsp.iVec1 + l1] = 0;
			l1 = int32(add32(l1, 1));
		
		);
		l2 = 0;
		
		while(l2 < 2)
		(
			obj[dsp.iRec21 + l2] = 0;
			l2 = int32(add32(l2, 1));
		
		);
		l3 = 0;
		
		while(l3 < 2)
		(
			obj[dsp.fVec2 + l3] = 0.0000000000000000;
			l3 = int32(add32(l3, 1));
		
		);
		l4 = 0;
		
		while(l4 < 2)
		(
			obj[dsp.fRec23 + l4] = 0.0000000000000000;
			l4 = int32(add32(l4, 1));
		
		);
		l5 = 0;
		
		while(l5 < 2)
		(
			obj[dsp.fRec24 + l5] = 0.0000000000000000;
			l5 = int32(add32(l5, 1));
		
		);
		l6 = 0;
		
		while(l6 < 2)
		(
			obj[dsp.fRec22 + l6] = 0.0000000000000000;
			l6 = int32(add32(l6, 1));
		
		);
		l7 = 0;
		
		while(l7 < 2)
		(
			obj[dsp.fRec20 + l7] = 0.0000000000000000;
			l7 = int32(add32(l7, 1));
		
		);
		l8 = 0;
		
		while(l8 < 2)
		(
			obj[dsp.fVec3 + l8] = 0.0000000000000000;
			l8 = int32(add32(l8, 1));
		
		);
		l9 = 0;
		
		while(l9 < 2)
		(
			obj[dsp.fRec18 + l9] = 0.0000000000000000;
			l9 = int32(add32(l9, 1));
		
		);
		l10 = 0;
		
		while(l10 < 2)
		(
			obj[dsp.fRec19 + l10] = 0.0000000000000000;
			l10 = int32(add32(l10, 1));
		
		);
		l11 = 0;
		
		while(l11 < 2)
		(
			obj[dsp.fRec26 + l11] = 0.0000000000000000;
			l11 = int32(add32(l11, 1));
		
		);
		l12 = 0;
		
		while(l12 < 2)
		(
			obj[dsp.fRec27 + l12] = 0.0000000000000000;
			l12 = int32(add32(l12, 1));
		
		);
		l13 = 0;
		
		while(l13 < 2)
		(
			obj[dsp.fVec4 + l13] = 0.0000000000000000;
			l13 = int32(add32(l13, 1));
		
		);
		l14 = 0;
		
		while(l14 < 2)
		(
			obj[dsp.fRec25 + l14] = 0.0000000000000000;
			l14 = int32(add32(l14, 1));
		
		);
		l15 = 0;
		
		while(l15 < 2)
		(
			obj[dsp.fRec28 + l15] = 0.0000000000000000;
			l15 = int32(add32(l15, 1));
		
		);
		l16 = 0;
		
		while(l16 < 131072)
		(
			obj[dsp.fVec5 + l16] = 0.0000000000000000;
			l16 = int32(add32(l16, 1));
		
		);
		l17 = 0;
		
		while(l17 < 2)
		(
			obj[dsp.fRec29 + l17] = 0.0000000000000000;
			l17 = int32(add32(l17, 1));
		
		);
		l18 = 0;
		
		while(l18 < 2)
		(
			obj[dsp.fVec6 + l18] = 0.0000000000000000;
			l18 = int32(add32(l18, 1));
		
		);
		l19 = 0;
		
		while(l19 < 2)
		(
			obj[dsp.fRec31 + l19] = 0.0000000000000000;
			l19 = int32(add32(l19, 1));
		
		);
		l20 = 0;
		
		while(l20 < 2)
		(
			obj[dsp.fRec30 + l20] = 0.0000000000000000;
			l20 = int32(add32(l20, 1));
		
		);
		l21 = 0;
		
		while(l21 < 1024)
		(
			obj[dsp.fVec7 + l21] = 0.0000000000000000;
			l21 = int32(add32(l21, 1));
		
		);
		l22 = 0;
		
		while(l22 < 2)
		(
			obj[dsp.fRec16 + l22] = 0.0000000000000000;
			l22 = int32(add32(l22, 1));
		
		);
		l23 = 0;
		
		while(l23 < 2)
		(
			obj[dsp.fRec35 + l23] = 0.0000000000000000;
			l23 = int32(add32(l23, 1));
		
		);
		l24 = 0;
		
		while(l24 < 2)
		(
			obj[dsp.fRec36 + l24] = 0.0000000000000000;
			l24 = int32(add32(l24, 1));
		
		);
		l25 = 0;
		
		while(l25 < 2)
		(
			obj[dsp.fVec8 + l25] = 0.0000000000000000;
			l25 = int32(add32(l25, 1));
		
		);
		l26 = 0;
		
		while(l26 < 2)
		(
			obj[dsp.fRec34 + l26] = 0.0000000000000000;
			l26 = int32(add32(l26, 1));
		
		);
		l27 = 0;
		
		while(l27 < 2)
		(
			obj[dsp.fRec37 + l27] = 0.0000000000000000;
			l27 = int32(add32(l27, 1));
		
		);
		l28 = 0;
		
		while(l28 < 131072)
		(
			obj[dsp.fVec9 + l28] = 0.0000000000000000;
			l28 = int32(add32(l28, 1));
		
		);
		l29 = 0;
		
		while(l29 < 2)
		(
			obj[dsp.fRec38 + l29] = 0.0000000000000000;
			l29 = int32(add32(l29, 1));
		
		);
		l30 = 0;
		
		while(l30 < 1024)
		(
			obj[dsp.fVec10 + l30] = 0.0000000000000000;
			l30 = int32(add32(l30, 1));
		
		);
		l31 = 0;
		
		while(l31 < 2)
		(
			obj[dsp.fRec32 + l31] = 0.0000000000000000;
			l31 = int32(add32(l31, 1));
		
		);
		l32 = 0;
		
		while(l32 < 2)
		(
			obj[dsp.fRec42 + l32] = 0.0000000000000000;
			l32 = int32(add32(l32, 1));
		
		);
		l33 = 0;
		
		while(l33 < 2)
		(
			obj[dsp.fRec43 + l33] = 0.0000000000000000;
			l33 = int32(add32(l33, 1));
		
		);
		l34 = 0;
		
		while(l34 < 2)
		(
			obj[dsp.fVec11 + l34] = 0.0000000000000000;
			l34 = int32(add32(l34, 1));
		
		);
		l35 = 0;
		
		while(l35 < 2)
		(
			obj[dsp.fRec41 + l35] = 0.0000000000000000;
			l35 = int32(add32(l35, 1));
		
		);
		l36 = 0;
		
		while(l36 < 2)
		(
			obj[dsp.fRec44 + l36] = 0.0000000000000000;
			l36 = int32(add32(l36, 1));
		
		);
		l37 = 0;
		
		while(l37 < 131072)
		(
			obj[dsp.fVec12 + l37] = 0.0000000000000000;
			l37 = int32(add32(l37, 1));
		
		);
		l38 = 0;
		
		while(l38 < 2)
		(
			obj[dsp.fRec45 + l38] = 0.0000000000000000;
			l38 = int32(add32(l38, 1));
		
		);
		l39 = 0;
		
		while(l39 < 1024)
		(
			obj[dsp.fVec13 + l39] = 0.0000000000000000;
			l39 = int32(add32(l39, 1));
		
		);
		l40 = 0;
		
		while(l40 < 2)
		(
			obj[dsp.fRec39 + l40] = 0.0000000000000000;
			l40 = int32(add32(l40, 1));
		
		);
		l41 = 0;
		
		while(l41 < 2)
		(
			obj[dsp.fRec49 + l41] = 0.0000000000000000;
			l41 = int32(add32(l41, 1));
		
		);
		l42 = 0;
		
		while(l42 < 2)
		(
			obj[dsp.fRec50 + l42] = 0.0000000000000000;
			l42 = int32(add32(l42, 1));
		
		);
		l43 = 0;
		
		while(l43 < 2)
		(
			obj[dsp.fVec14 + l43] = 0.0000000000000000;
			l43 = int32(add32(l43, 1));
		
		);
		l44 = 0;
		
		while(l44 < 2)
		(
			obj[dsp.fRec48 + l44] = 0.0000000000000000;
			l44 = int32(add32(l44, 1));
		
		);
		l45 = 0;
		
		while(l45 < 2)
		(
			obj[dsp.fRec51 + l45] = 0.0000000000000000;
			l45 = int32(add32(l45, 1));
		
		);
		l46 = 0;
		
		while(l46 < 131072)
		(
			obj[dsp.fVec15 + l46] = 0.0000000000000000;
			l46 = int32(add32(l46, 1));
		
		);
		l47 = 0;
		
		while(l47 < 2)
		(
			obj[dsp.fRec52 + l47] = 0.0000000000000000;
			l47 = int32(add32(l47, 1));
		
		);
		l48 = 0;
		
		while(l48 < 1024)
		(
			obj[dsp.fVec16 + l48] = 0.0000000000000000;
			l48 = int32(add32(l48, 1));
		
		);
		l49 = 0;
		
		while(l49 < 2)
		(
			obj[dsp.fRec46 + l49] = 0.0000000000000000;
			l49 = int32(add32(l49, 1));
		
		);
		l50 = 0;
		
		while(l50 < 2)
		(
			obj[dsp.fRec56 + l50] = 0.0000000000000000;
			l50 = int32(add32(l50, 1));
		
		);
		l51 = 0;
		
		while(l51 < 2)
		(
			obj[dsp.fRec57 + l51] = 0.0000000000000000;
			l51 = int32(add32(l51, 1));
		
		);
		l52 = 0;
		
		while(l52 < 2)
		(
			obj[dsp.fVec17 + l52] = 0.0000000000000000;
			l52 = int32(add32(l52, 1));
		
		);
		l53 = 0;
		
		while(l53 < 2)
		(
			obj[dsp.fRec55 + l53] = 0.0000000000000000;
			l53 = int32(add32(l53, 1));
		
		);
		l54 = 0;
		
		while(l54 < 2)
		(
			obj[dsp.fRec58 + l54] = 0.0000000000000000;
			l54 = int32(add32(l54, 1));
		
		);
		l55 = 0;
		
		while(l55 < 131072)
		(
			obj[dsp.fVec18 + l55] = 0.0000000000000000;
			l55 = int32(add32(l55, 1));
		
		);
		l56 = 0;
		
		while(l56 < 1024)
		(
			obj[dsp.fVec19 + l56] = 0.0000000000000000;
			l56 = int32(add32(l56, 1));
		
		);
		l57 = 0;
		
		while(l57 < 2)
		(
			obj[dsp.fRec53 + l57] = 0.0000000000000000;
			l57 = int32(add32(l57, 1));
		
		);
		l58 = 0;
		
		while(l58 < 2)
		(
			obj[dsp.fRec62 + l58] = 0.0000000000000000;
			l58 = int32(add32(l58, 1));
		
		);
		l59 = 0;
		
		while(l59 < 2)
		(
			obj[dsp.fRec63 + l59] = 0.0000000000000000;
			l59 = int32(add32(l59, 1));
		
		);
		l60 = 0;
		
		while(l60 < 2)
		(
			obj[dsp.fVec20 + l60] = 0.0000000000000000;
			l60 = int32(add32(l60, 1));
		
		);
		l61 = 0;
		
		while(l61 < 2)
		(
			obj[dsp.fRec61 + l61] = 0.0000000000000000;
			l61 = int32(add32(l61, 1));
		
		);
		l62 = 0;
		
		while(l62 < 2)
		(
			obj[dsp.fRec64 + l62] = 0.0000000000000000;
			l62 = int32(add32(l62, 1));
		
		);
		l63 = 0;
		
		while(l63 < 131072)
		(
			obj[dsp.fVec21 + l63] = 0.0000000000000000;
			l63 = int32(add32(l63, 1));
		
		);
		l64 = 0;
		
		while(l64 < 2)
		(
			obj[dsp.fRec65 + l64] = 0.0000000000000000;
			l64 = int32(add32(l64, 1));
		
		);
		l65 = 0;
		
		while(l65 < 1024)
		(
			obj[dsp.fVec22 + l65] = 0.0000000000000000;
			l65 = int32(add32(l65, 1));
		
		);
		l66 = 0;
		
		while(l66 < 2)
		(
			obj[dsp.fRec59 + l66] = 0.0000000000000000;
			l66 = int32(add32(l66, 1));
		
		);
		l67 = 0;
		
		while(l67 < 2)
		(
			obj[dsp.fRec69 + l67] = 0.0000000000000000;
			l67 = int32(add32(l67, 1));
		
		);
		l68 = 0;
		
		while(l68 < 2)
		(
			obj[dsp.fRec70 + l68] = 0.0000000000000000;
			l68 = int32(add32(l68, 1));
		
		);
		l69 = 0;
		
		while(l69 < 2)
		(
			obj[dsp.fVec23 + l69] = 0.0000000000000000;
			l69 = int32(add32(l69, 1));
		
		);
		l70 = 0;
		
		while(l70 < 2)
		(
			obj[dsp.fRec68 + l70] = 0.0000000000000000;
			l70 = int32(add32(l70, 1));
		
		);
		l71 = 0;
		
		while(l71 < 2)
		(
			obj[dsp.fRec71 + l71] = 0.0000000000000000;
			l71 = int32(add32(l71, 1));
		
		);
		l72 = 0;
		
		while(l72 < 131072)
		(
			obj[dsp.fVec24 + l72] = 0.0000000000000000;
			l72 = int32(add32(l72, 1));
		
		);
		l73 = 0;
		
		while(l73 < 1024)
		(
			obj[dsp.fVec25 + l73] = 0.0000000000000000;
			l73 = int32(add32(l73, 1));
		
		);
		l74 = 0;
		
		while(l74 < 2)
		(
			obj[dsp.fRec66 + l74] = 0.0000000000000000;
			l74 = int32(add32(l74, 1));
		
		);
		l75 = 0;
		
		while(l75 < 2)
		(
			obj[dsp.fRec75 + l75] = 0.0000000000000000;
			l75 = int32(add32(l75, 1));
		
		);
		l76 = 0;
		
		while(l76 < 2)
		(
			obj[dsp.fRec76 + l76] = 0.0000000000000000;
			l76 = int32(add32(l76, 1));
		
		);
		l77 = 0;
		
		while(l77 < 2)
		(
			obj[dsp.fVec26 + l77] = 0.0000000000000000;
			l77 = int32(add32(l77, 1));
		
		);
		l78 = 0;
		
		while(l78 < 2)
		(
			obj[dsp.fRec74 + l78] = 0.0000000000000000;
			l78 = int32(add32(l78, 1));
		
		);
		l79 = 0;
		
		while(l79 < 2)
		(
			obj[dsp.fRec77 + l79] = 0.0000000000000000;
			l79 = int32(add32(l79, 1));
		
		);
		l80 = 0;
		
		while(l80 < 131072)
		(
			obj[dsp.fVec27 + l80] = 0.0000000000000000;
			l80 = int32(add32(l80, 1));
		
		);
		l81 = 0;
		
		while(l81 < 1024)
		(
			obj[dsp.fVec28 + l81] = 0.0000000000000000;
			l81 = int32(add32(l81, 1));
		
		);
		l82 = 0;
		
		while(l82 < 2)
		(
			obj[dsp.fRec72 + l82] = 0.0000000000000000;
			l82 = int32(add32(l82, 1));
		
		);
		l83 = 0;
		
		while(l83 < 2)
		(
			obj[dsp.fRec81 + l83] = 0.0000000000000000;
			l83 = int32(add32(l83, 1));
		
		);
		l84 = 0;
		
		while(l84 < 2)
		(
			obj[dsp.fRec82 + l84] = 0.0000000000000000;
			l84 = int32(add32(l84, 1));
		
		);
		l85 = 0;
		
		while(l85 < 2)
		(
			obj[dsp.fVec29 + l85] = 0.0000000000000000;
			l85 = int32(add32(l85, 1));
		
		);
		l86 = 0;
		
		while(l86 < 2)
		(
			obj[dsp.fRec80 + l86] = 0.0000000000000000;
			l86 = int32(add32(l86, 1));
		
		);
		l87 = 0;
		
		while(l87 < 2)
		(
			obj[dsp.fRec83 + l87] = 0.0000000000000000;
			l87 = int32(add32(l87, 1));
		
		);
		l88 = 0;
		
		while(l88 < 131072)
		(
			obj[dsp.fVec30 + l88] = 0.0000000000000000;
			l88 = int32(add32(l88, 1));
		
		);
		l89 = 0;
		
		while(l89 < 2)
		(
			obj[dsp.fRec84 + l89] = 0.0000000000000000;
			l89 = int32(add32(l89, 1));
		
		);
		l90 = 0;
		
		while(l90 < 1024)
		(
			obj[dsp.fVec31 + l90] = 0.0000000000000000;
			l90 = int32(add32(l90, 1));
		
		);
		l91 = 0;
		
		while(l91 < 2)
		(
			obj[dsp.fRec78 + l91] = 0.0000000000000000;
			l91 = int32(add32(l91, 1));
		
		);
		l92 = 0;
		
		while(l92 < 2)
		(
			obj[dsp.fRec88 + l92] = 0.0000000000000000;
			l92 = int32(add32(l92, 1));
		
		);
		l93 = 0;
		
		while(l93 < 2)
		(
			obj[dsp.fRec89 + l93] = 0.0000000000000000;
			l93 = int32(add32(l93, 1));
		
		);
		l94 = 0;
		
		while(l94 < 2)
		(
			obj[dsp.fVec32 + l94] = 0.0000000000000000;
			l94 = int32(add32(l94, 1));
		
		);
		l95 = 0;
		
		while(l95 < 2)
		(
			obj[dsp.fRec87 + l95] = 0.0000000000000000;
			l95 = int32(add32(l95, 1));
		
		);
		l96 = 0;
		
		while(l96 < 2)
		(
			obj[dsp.fRec90 + l96] = 0.0000000000000000;
			l96 = int32(add32(l96, 1));
		
		);
		l97 = 0;
		
		while(l97 < 131072)
		(
			obj[dsp.fVec33 + l97] = 0.0000000000000000;
			l97 = int32(add32(l97, 1));
		
		);
		l98 = 0;
		
		while(l98 < 1024)
		(
			obj[dsp.fVec34 + l98] = 0.0000000000000000;
			l98 = int32(add32(l98, 1));
		
		);
		l99 = 0;
		
		while(l99 < 2)
		(
			obj[dsp.fRec85 + l99] = 0.0000000000000000;
			l99 = int32(add32(l99, 1));
		
		);
		l100 = 0;
		
		while(l100 < 2)
		(
			obj[dsp.fRec94 + l100] = 0.0000000000000000;
			l100 = int32(add32(l100, 1));
		
		);
		l101 = 0;
		
		while(l101 < 2)
		(
			obj[dsp.fRec95 + l101] = 0.0000000000000000;
			l101 = int32(add32(l101, 1));
		
		);
		l102 = 0;
		
		while(l102 < 2)
		(
			obj[dsp.fVec35 + l102] = 0.0000000000000000;
			l102 = int32(add32(l102, 1));
		
		);
		l103 = 0;
		
		while(l103 < 2)
		(
			obj[dsp.fRec93 + l103] = 0.0000000000000000;
			l103 = int32(add32(l103, 1));
		
		);
		l104 = 0;
		
		while(l104 < 2)
		(
			obj[dsp.fRec96 + l104] = 0.0000000000000000;
			l104 = int32(add32(l104, 1));
		
		);
		l105 = 0;
		
		while(l105 < 131072)
		(
			obj[dsp.fVec36 + l105] = 0.0000000000000000;
			l105 = int32(add32(l105, 1));
		
		);
		l106 = 0;
		
		while(l106 < 1024)
		(
			obj[dsp.fVec37 + l106] = 0.0000000000000000;
			l106 = int32(add32(l106, 1));
		
		);
		l107 = 0;
		
		while(l107 < 2)
		(
			obj[dsp.fRec91 + l107] = 0.0000000000000000;
			l107 = int32(add32(l107, 1));
		
		);
		l108 = 0;
		
		while(l108 < 2)
		(
			obj[dsp.fRec100 + l108] = 0.0000000000000000;
			l108 = int32(add32(l108, 1));
		
		);
		l109 = 0;
		
		while(l109 < 2)
		(
			obj[dsp.fRec101 + l109] = 0.0000000000000000;
			l109 = int32(add32(l109, 1));
		
		);
		l110 = 0;
		
		while(l110 < 2)
		(
			obj[dsp.fVec38 + l110] = 0.0000000000000000;
			l110 = int32(add32(l110, 1));
		
		);
		l111 = 0;
		
		while(l111 < 2)
		(
			obj[dsp.fRec99 + l111] = 0.0000000000000000;
			l111 = int32(add32(l111, 1));
		
		);
		l112 = 0;
		
		while(l112 < 2)
		(
			obj[dsp.fRec102 + l112] = 0.0000000000000000;
			l112 = int32(add32(l112, 1));
		
		);
		l113 = 0;
		
		while(l113 < 131072)
		(
			obj[dsp.fVec39 + l113] = 0.0000000000000000;
			l113 = int32(add32(l113, 1));
		
		);
		l114 = 0;
		
		while(l114 < 2)
		(
			obj[dsp.fRec103 + l114] = 0.0000000000000000;
			l114 = int32(add32(l114, 1));
		
		);
		l115 = 0;
		
		while(l115 < 1024)
		(
			obj[dsp.fVec40 + l115] = 0.0000000000000000;
			l115 = int32(add32(l115, 1));
		
		);
		l116 = 0;
		
		while(l116 < 2)
		(
			obj[dsp.fRec97 + l116] = 0.0000000000000000;
			l116 = int32(add32(l116, 1));
		
		);
		l117 = 0;
		
		while(l117 < 2)
		(
			obj[dsp.fRec107 + l117] = 0.0000000000000000;
			l117 = int32(add32(l117, 1));
		
		);
		l118 = 0;
		
		while(l118 < 2)
		(
			obj[dsp.fRec108 + l118] = 0.0000000000000000;
			l118 = int32(add32(l118, 1));
		
		);
		l119 = 0;
		
		while(l119 < 2)
		(
			obj[dsp.fVec41 + l119] = 0.0000000000000000;
			l119 = int32(add32(l119, 1));
		
		);
		l120 = 0;
		
		while(l120 < 2)
		(
			obj[dsp.fRec106 + l120] = 0.0000000000000000;
			l120 = int32(add32(l120, 1));
		
		);
		l121 = 0;
		
		while(l121 < 2)
		(
			obj[dsp.fRec109 + l121] = 0.0000000000000000;
			l121 = int32(add32(l121, 1));
		
		);
		l122 = 0;
		
		while(l122 < 131072)
		(
			obj[dsp.fVec42 + l122] = 0.0000000000000000;
			l122 = int32(add32(l122, 1));
		
		);
		l123 = 0;
		
		while(l123 < 1024)
		(
			obj[dsp.fVec43 + l123] = 0.0000000000000000;
			l123 = int32(add32(l123, 1));
		
		);
		l124 = 0;
		
		while(l124 < 2)
		(
			obj[dsp.fRec104 + l124] = 0.0000000000000000;
			l124 = int32(add32(l124, 1));
		
		);
		l125 = 0;
		
		while(l125 < 2)
		(
			obj[dsp.fRec113 + l125] = 0.0000000000000000;
			l125 = int32(add32(l125, 1));
		
		);
		l126 = 0;
		
		while(l126 < 2)
		(
			obj[dsp.fRec114 + l126] = 0.0000000000000000;
			l126 = int32(add32(l126, 1));
		
		);
		l127 = 0;
		
		while(l127 < 2)
		(
			obj[dsp.fVec44 + l127] = 0.0000000000000000;
			l127 = int32(add32(l127, 1));
		
		);
		l128 = 0;
		
		while(l128 < 2)
		(
			obj[dsp.fRec112 + l128] = 0.0000000000000000;
			l128 = int32(add32(l128, 1));
		
		);
		l129 = 0;
		
		while(l129 < 2)
		(
			obj[dsp.fRec115 + l129] = 0.0000000000000000;
			l129 = int32(add32(l129, 1));
		
		);
		l130 = 0;
		
		while(l130 < 131072)
		(
			obj[dsp.fVec45 + l130] = 0.0000000000000000;
			l130 = int32(add32(l130, 1));
		
		);
		l131 = 0;
		
		while(l131 < 1024)
		(
			obj[dsp.fVec46 + l131] = 0.0000000000000000;
			l131 = int32(add32(l131, 1));
		
		);
		l132 = 0;
		
		while(l132 < 2)
		(
			obj[dsp.fRec110 + l132] = 0.0000000000000000;
			l132 = int32(add32(l132, 1));
		
		);
		l133 = 0;
		
		while(l133 < 2)
		(
			obj[dsp.fRec119 + l133] = 0.0000000000000000;
			l133 = int32(add32(l133, 1));
		
		);
		l134 = 0;
		
		while(l134 < 2)
		(
			obj[dsp.fRec120 + l134] = 0.0000000000000000;
			l134 = int32(add32(l134, 1));
		
		);
		l135 = 0;
		
		while(l135 < 2)
		(
			obj[dsp.fVec47 + l135] = 0.0000000000000000;
			l135 = int32(add32(l135, 1));
		
		);
		l136 = 0;
		
		while(l136 < 2)
		(
			obj[dsp.fRec118 + l136] = 0.0000000000000000;
			l136 = int32(add32(l136, 1));
		
		);
		l137 = 0;
		
		while(l137 < 2)
		(
			obj[dsp.fRec121 + l137] = 0.0000000000000000;
			l137 = int32(add32(l137, 1));
		
		);
		l138 = 0;
		
		while(l138 < 131072)
		(
			obj[dsp.fVec48 + l138] = 0.0000000000000000;
			l138 = int32(add32(l138, 1));
		
		);
		l139 = 0;
		
		while(l139 < 2)
		(
			obj[dsp.fRec122 + l139] = 0.0000000000000000;
			l139 = int32(add32(l139, 1));
		
		);
		l140 = 0;
		
		while(l140 < 1024)
		(
			obj[dsp.fVec49 + l140] = 0.0000000000000000;
			l140 = int32(add32(l140, 1));
		
		);
		l141 = 0;
		
		while(l141 < 2)
		(
			obj[dsp.fRec116 + l141] = 0.0000000000000000;
			l141 = int32(add32(l141, 1));
		
		);
		l142 = 0;
		
		while(l142 < 2)
		(
			obj[dsp.fRec126 + l142] = 0.0000000000000000;
			l142 = int32(add32(l142, 1));
		
		);
		l143 = 0;
		
		while(l143 < 2)
		(
			obj[dsp.fRec127 + l143] = 0.0000000000000000;
			l143 = int32(add32(l143, 1));
		
		);
		l144 = 0;
		
		while(l144 < 2)
		(
			obj[dsp.fVec50 + l144] = 0.0000000000000000;
			l144 = int32(add32(l144, 1));
		
		);
		l145 = 0;
		
		while(l145 < 2)
		(
			obj[dsp.fRec125 + l145] = 0.0000000000000000;
			l145 = int32(add32(l145, 1));
		
		);
		l146 = 0;
		
		while(l146 < 2)
		(
			obj[dsp.fRec128 + l146] = 0.0000000000000000;
			l146 = int32(add32(l146, 1));
		
		);
		l147 = 0;
		
		while(l147 < 131072)
		(
			obj[dsp.fVec51 + l147] = 0.0000000000000000;
			l147 = int32(add32(l147, 1));
		
		);
		l148 = 0;
		
		while(l148 < 1024)
		(
			obj[dsp.fVec52 + l148] = 0.0000000000000000;
			l148 = int32(add32(l148, 1));
		
		);
		l149 = 0;
		
		while(l149 < 2)
		(
			obj[dsp.fRec123 + l149] = 0.0000000000000000;
			l149 = int32(add32(l149, 1));
		
		);
		l150 = 0;
		
		while(l150 < 3)
		(
			obj[dsp.fRec0 + l150] = 0.0000000000000000;
			l150 = int32(add32(l150, 1));
		
		);
		l151 = 0;
		
		while(l151 < 3)
		(
			obj[dsp.fRec1 + l151] = 0.0000000000000000;
			l151 = int32(add32(l151, 1));
		
		);
		l152 = 0;
		
		while(l152 < 3)
		(
			obj[dsp.fRec2 + l152] = 0.0000000000000000;
			l152 = int32(add32(l152, 1));
		
		);
		l153 = 0;
		
		while(l153 < 3)
		(
			obj[dsp.fRec3 + l153] = 0.0000000000000000;
			l153 = int32(add32(l153, 1));
		
		);
		l154 = 0;
		
		while(l154 < 3)
		(
			obj[dsp.fRec4 + l154] = 0.0000000000000000;
			l154 = int32(add32(l154, 1));
		
		);
		l155 = 0;
		
		while(l155 < 3)
		(
			obj[dsp.fRec5 + l155] = 0.0000000000000000;
			l155 = int32(add32(l155, 1));
		
		);
		l156 = 0;
		
		while(l156 < 3)
		(
			obj[dsp.fRec6 + l156] = 0.0000000000000000;
			l156 = int32(add32(l156, 1));
		
		);
		l157 = 0;
		
		while(l157 < 3)
		(
			obj[dsp.fRec7 + l157] = 0.0000000000000000;
			l157 = int32(add32(l157, 1));
		
		);
		l158 = 0;
		
		while(l158 < 3)
		(
			obj[dsp.fRec8 + l158] = 0.0000000000000000;
			l158 = int32(add32(l158, 1));
		
		);
		l159 = 0;
		
		while(l159 < 3)
		(
			obj[dsp.fRec9 + l159] = 0.0000000000000000;
			l159 = int32(add32(l159, 1));
		
		);
		l160 = 0;
		
		while(l160 < 3)
		(
			obj[dsp.fRec10 + l160] = 0.0000000000000000;
			l160 = int32(add32(l160, 1));
		
		);
		l161 = 0;
		
		while(l161 < 3)
		(
			obj[dsp.fRec11 + l161] = 0.0000000000000000;
			l161 = int32(add32(l161, 1));
		
		);
		l162 = 0;
		
		while(l162 < 3)
		(
			obj[dsp.fRec12 + l162] = 0.0000000000000000;
			l162 = int32(add32(l162, 1));
		
		);
		l163 = 0;
		
		while(l163 < 3)
		(
			obj[dsp.fRec13 + l163] = 0.0000000000000000;
			l163 = int32(add32(l163, 1));
		
		);
		l164 = 0;
		
		while(l164 < 3)
		(
			obj[dsp.fRec14 + l164] = 0.0000000000000000;
			l164 = int32(add32(l164, 1));
		
		);
		l165 = 0;
		
		while(l165 < 3)
		(
			obj[dsp.fRec15 + l165] = 0.0000000000000000;
			l165 = int32(add32(l165, 1));
		
		);obj[dsp.fmydspSIG0Wave0_idx] = 0;
		
		i1_re0 = 0;
		
		while(i1_re0 < 4)
		(
			ftbl0mydspSIG0[i1_re0] = fmydspSIG0Wave0[obj[dsp.fmydspSIG0Wave0_idx]];
			obj[dsp.fmydspSIG0Wave0_idx] = (int32(add32(1, obj[dsp.fmydspSIG0Wave0_idx])) % 4);
			i1_re0 = int32(add32(i1_re0, 1));
		
		);obj[dsp.imydspSIG1Wave0_idx] = 0;
		
		i2_re0 = 0;
		
		while(i2_re0 < 4)
		(
			itbl1mydspSIG1[i2_re0] = imydspSIG1Wave0[obj[dsp.imydspSIG1Wave0_idx]];
			obj[dsp.imydspSIG1Wave0_idx] = (int32(add32(1, obj[dsp.imydspSIG1Wave0_idx])) % 4);
			i2_re0 = int32(add32(i2_re0, 1));
		
		);obj[dsp.fmydspSIG2Wave0_idx] = 0;
		
		i3_re0 = 0;
		
		while(i3_re0 < 4)
		(
			ftbl2mydspSIG2[i3_re0] = fmydspSIG2Wave0[obj[dsp.fmydspSIG2Wave0_idx]];
			obj[dsp.fmydspSIG2Wave0_idx] = (int32(add32(1, obj[dsp.fmydspSIG2Wave0_idx])) % 4);
			i3_re0 = int32(add32(i3_re0, 1));
		
		);obj[dsp.imydspSIG3Wave0_idx] = 0;
		
		i4_re0 = 0;
		
		while(i4_re0 < 4)
		(
			itbl3mydspSIG3[i4_re0] = imydspSIG3Wave0[obj[dsp.imydspSIG3Wave0_idx]];
			obj[dsp.imydspSIG3Wave0_idx] = (int32(add32(1, obj[dsp.imydspSIG3Wave0_idx])) % 4);
			i4_re0 = int32(add32(i4_re0, 1));
		
		);obj[dsp.fmydspSIG4Wave0_idx] = 0;
		
		i5_re0 = 0;
		
		while(i5_re0 < 4)
		(
			ftbl4mydspSIG4[i5_re0] = fmydspSIG4Wave0[obj[dsp.fmydspSIG4Wave0_idx]];
			obj[dsp.fmydspSIG4Wave0_idx] = (int32(add32(1, obj[dsp.fmydspSIG4Wave0_idx])) % 4);
			i5_re0 = int32(add32(i5_re0, 1));
		
		);obj[dsp.imydspSIG5Wave0_idx] = 0;
		
		i6_re0 = 0;
		
		while(i6_re0 < 4)
		(
			itbl5mydspSIG5[i6_re0] = imydspSIG5Wave0[obj[dsp.imydspSIG5Wave0_idx]];
			obj[dsp.imydspSIG5Wave0_idx] = (int32(add32(1, obj[dsp.imydspSIG5Wave0_idx])) % 4);
			i6_re0 = int32(add32(i6_re0, 1));
		
		);obj[dsp.fmydspSIG6Wave0_idx] = 0;
		
		i7_re0 = 0;
		
		while(i7_re0 < 4)
		(
			ftbl6mydspSIG6[i7_re0] = fmydspSIG6Wave0[obj[dsp.fmydspSIG6Wave0_idx]];
			obj[dsp.fmydspSIG6Wave0_idx] = (int32(add32(1, obj[dsp.fmydspSIG6Wave0_idx])) % 4);
			i7_re0 = int32(add32(i7_re0, 1));
		
		);obj[dsp.imydspSIG7Wave0_idx] = 0;
		
		i8_re0 = 0;
		
		while(i8_re0 < 4)
		(
			itbl7mydspSIG7[i8_re0] = imydspSIG7Wave0[obj[dsp.imydspSIG7Wave0_idx]];
			obj[dsp.imydspSIG7Wave0_idx] = (int32(add32(1, obj[dsp.imydspSIG7Wave0_idx])) % 4);
			i8_re0 = int32(add32(i8_re0, 1));
		
		);
		fSampleRate = srate;
		obj[dsp.fConst0] = min(192000.0000000000000000, max(1.0000000000000000, (fSampleRate)));
		obj[dsp.fConst1] = (0.0199999995529652 * obj[dsp.fConst0]);
		obj[dsp.fConst2] = (0.0049999998882413 * obj[dsp.fConst0]);
		obj[dsp.fConst3] = (0.0299999993294477 * obj[dsp.fConst0]);
		obj[dsp.fConst4] = (0.5000000000000000 * obj[dsp.fConst0]);
		obj[dsp.fConst5] = ftbl0mydspSIG0[1];
		obj[dsp.fConst6] = (1382.3007812500000000 / obj[dsp.fConst0]);
		obj[dsp.fConst7] = (0.6271655559539795 * obj[dsp.fConst0]);
		obj[dsp.fConst8] = (1.0000000000000000 / obj[dsp.fConst0]);
		obj[dsp.fConst9] = (0.0000226757365454 * obj[dsp.fConst5]);
		obj[dsp.fConst10] = (0.3000000119209290 * obj[dsp.fConst0]);
		obj[dsp.iConst11] = min(1001, max(0, int32(add32(itbl1mydspSIG1[1], -1))));
		obj[dsp.fConst12] = ftbl0mydspSIG0[0];
		obj[dsp.fConst13] = (0.0000226757365454 * obj[dsp.fConst12]);
		obj[dsp.iConst14] = min(1001, max(0, int32(add32(itbl1mydspSIG1[0], -1))));
		obj[dsp.fConst15] = ftbl0mydspSIG0[2];
		obj[dsp.fConst16] = (0.0000226757365454 * obj[dsp.fConst15]);
		obj[dsp.iConst17] = min(1001, max(0, int32(add32(itbl1mydspSIG1[2], -1))));
		obj[dsp.fConst18] = ftbl0mydspSIG0[3];
		obj[dsp.fConst19] = (0.0000226757365454 * obj[dsp.fConst18]);
		obj[dsp.iConst20] = min(1001, max(0, int32(add32(itbl1mydspSIG1[3], -1))));
		obj[dsp.fConst21] = ftbl2mydspSIG2[0];
		obj[dsp.fConst22] = (0.0000226757365454 * obj[dsp.fConst21]);
		obj[dsp.iConst23] = min(1001, max(0, int32(add32(itbl3mydspSIG3[0], -1))));
		obj[dsp.fConst24] = ftbl4mydspSIG4[0];
		obj[dsp.fConst25] = (0.0000226757365454 * obj[dsp.fConst24]);
		obj[dsp.iConst26] = min(1001, max(0, int32(add32(itbl5mydspSIG5[0], -1))));
		obj[dsp.fConst27] = ftbl6mydspSIG6[0];
		obj[dsp.fConst28] = (0.0000226757365454 * obj[dsp.fConst27]);
		obj[dsp.iConst29] = min(1001, max(0, int32(add32(itbl7mydspSIG7[0], -1))));
		obj[dsp.fConst30] = ftbl2mydspSIG2[1];
		obj[dsp.fConst31] = (0.0000226757365454 * obj[dsp.fConst30]);
		obj[dsp.iConst32] = min(1001, max(0, int32(add32(itbl3mydspSIG3[1], -1))));
		obj[dsp.fConst33] = ftbl4mydspSIG4[1];
		obj[dsp.fConst34] = (0.0000226757365454 * obj[dsp.fConst33]);
		obj[dsp.iConst35] = min(1001, max(0, int32(add32(itbl5mydspSIG5[1], -1))));
		obj[dsp.fConst36] = ftbl6mydspSIG6[1];
		obj[dsp.fConst37] = (0.0000226757365454 * obj[dsp.fConst36]);
		obj[dsp.iConst38] = min(1001, max(0, int32(add32(itbl7mydspSIG7[1], -1))));
		obj[dsp.fConst39] = ftbl2mydspSIG2[2];
		obj[dsp.fConst40] = (0.0000226757365454 * obj[dsp.fConst39]);
		obj[dsp.iConst41] = min(1001, max(0, int32(add32(itbl3mydspSIG3[2], -1))));
		obj[dsp.fConst42] = ftbl4mydspSIG4[2];
		obj[dsp.fConst43] = (0.0000226757365454 * obj[dsp.fConst42]);
		obj[dsp.iConst44] = min(1001, max(0, int32(add32(itbl5mydspSIG5[2], -1))));
		obj[dsp.fConst45] = ftbl6mydspSIG6[2];
		obj[dsp.fConst46] = (0.0000226757365454 * obj[dsp.fConst45]);
		obj[dsp.iConst47] = min(1001, max(0, int32(add32(itbl7mydspSIG7[2], -1))));
		obj[dsp.fConst48] = ftbl2mydspSIG2[3];
		obj[dsp.fConst49] = (0.0000226757365454 * obj[dsp.fConst48]);
		obj[dsp.iConst50] = min(1001, max(0, int32(add32(itbl3mydspSIG3[3], -1))));
		obj[dsp.fConst51] = ftbl4mydspSIG4[3];
		obj[dsp.fConst52] = (0.0000226757365454 * obj[dsp.fConst51]);
		obj[dsp.iConst53] = min(1001, max(0, int32(add32(itbl5mydspSIG5[3], -1))));
		obj[dsp.fConst54] = ftbl6mydspSIG6[3];
		obj[dsp.fConst55] = (0.0000226757365454 * obj[dsp.fConst54]);
		obj[dsp.iConst56] = min(1001, max(0, int32(add32(itbl7mydspSIG7[3], -1))));
		voice_idx += 1;
	); 
);

create_instances();
init_instances();

function control() (
	voice_idx = 0;
	while(voice_idx < nvoices) (
		obj = dsp.memory + dsp.size * voice_idx;
		obj[dsp.fSlow0] = pow(2.0000000000000000, ((4.0000000000000000 * max(0.0000000000000000, min(1.0000000000000000, fHslider0))) + -3.0000000000000000));
		obj[dsp.fSlow1] = (0.0000226757365454 * obj[dsp.fSlow0]);
		obj[dsp.fSlow2] = (1.0000000000000000 / tan((obj[dsp.fConst6] * pow(2.0000000000000000, (0.0833333358168602 * ((119.0000000000000000 * max(0.0000000000000000, min(1.0000000000000000, fHslider1))) + -53.0000000000000000))))));
		obj[dsp.fSlow3] = (1.0000000000000000 - obj[dsp.fSlow2]);
		obj[dsp.fSlow4] = (1.0000000000000000 / (obj[dsp.fSlow2] + 1.0000000000000000));
		obj[dsp.fSlow5] = pow(10.0000000000000000, -((1.2000000476837158 * (1.0000000000000000 - max(0.0000000000000000, min(1.0000000000000000, fHslider2))))));
		obj[dsp.fSlow6] = (1.0000000000000000 / tan((obj[dsp.fConst6] * pow(2.0000000000000000, (0.0833333358168602 * ((119.0000000000000000 * max(0.0000000000000000, min(1.0000000000000000, fHslider3))) + -53.0000000000000000))))));
		obj[dsp.fSlow7] = (1.0000000000000000 - obj[dsp.fSlow6]);
		obj[dsp.fSlow8] = (1.0000000000000000 / (obj[dsp.fSlow6] + 1.0000000000000000));
		obj[dsp.fSlow9] = pow(10.0000000000000000, -((1.2000000476837158 * (1.0000000000000000 - max(0.0000000000000000, min(1.0000000000000000, fHslider4))))));
		obj[dsp.fSlow10] = (obj[dsp.fConst8] * min(16.0000000000000000, exp(((11.0000000000000000 * fHslider5) + -8.0000000000000000))));
		obj[dsp.fSlow11] = (0.0566893406212330 * pow(max(0.0000000000000000, min(1.0000000000000000, fHslider6)), 2.0000000000000000));
		obj[dsp.fSlow12] = (obj[dsp.fConst0] * obj[dsp.fSlow0]);
		obj[dsp.fSlow13] = max(1.0000000000000000, (obj[dsp.fConst10] * max(0.0000000000000000, min(1.0000000000000000, fHslider7))));
		obj[dsp.fSlow14] = (obj[dsp.fSlow13] + -0.9999949932098389);
		obj[dsp.iSlow15] = int32(ftoi32(obj[dsp.fSlow14]));
		obj[dsp.iSlow16] = int32(ftoi32(min(obj[dsp.fConst10], (max(0, int32(add32(obj[dsp.iSlow15], 3)))))));
		obj[dsp.fSlow17] = floor(obj[dsp.fSlow14]);
		obj[dsp.fSlow18] = (obj[dsp.fSlow13] + (-2.0000000000000000 - obj[dsp.fSlow17]));
		obj[dsp.fSlow19] = (obj[dsp.fSlow13] + (-1.0000000000000000 - obj[dsp.fSlow17]));
		obj[dsp.fSlow20] = (obj[dsp.fSlow13] - obj[dsp.fSlow17]);
		obj[dsp.fSlow21] = (obj[dsp.fSlow20] * obj[dsp.fSlow19]);
		obj[dsp.fSlow22] = (0.1666666716337204 * (obj[dsp.fSlow21] * obj[dsp.fSlow18]));
		obj[dsp.iSlow23] = int32(ftoi32(min(obj[dsp.fConst10], (max(0, int32(add32(obj[dsp.iSlow15], 2)))))));
		obj[dsp.fSlow24] = (0.5000000000000000 * obj[dsp.fSlow21]);
		obj[dsp.iSlow25] = int32(ftoi32(min(obj[dsp.fConst10], (max(0, obj[dsp.iSlow15])))));
		obj[dsp.fSlow26] = (0.1666666716337204 * obj[dsp.fSlow19]);
		obj[dsp.iSlow27] = int32(ftoi32(min(obj[dsp.fConst10], (max(0, int32(add32(obj[dsp.iSlow15], 1)))))));
		obj[dsp.fSlow28] = (0.5000000000000000 * obj[dsp.fSlow20]);
		obj[dsp.fSlow29] = (obj[dsp.fSlow13] + (-3.0000000000000000 - obj[dsp.fSlow17]));
		obj[dsp.fSlow30] = (1.0000000000000000 / tan((obj[dsp.fConst6] * pow(2.0000000000000000, (0.0833333358168602 * ((119.0000000000000000 * max(0.0000000000000000, min(1.0000000000000000, fHslider8))) + -53.0000000000000000))))));
		obj[dsp.fSlow31] = (1.0000000000000000 - obj[dsp.fSlow30]);
		obj[dsp.fSlow32] = (1.0000000000000000 / (obj[dsp.fSlow30] + 1.0000000000000000));
		obj[dsp.fSlow33] = (1.0000000000000000 / tan((obj[dsp.fConst6] * pow(2.0000000000000000, (0.0833333358168602 * ((119.0000000000000000 * max(0.0000000000000000, min(1.0000000000000000, fHslider9))) + -53.0000000000000000))))));
		obj[dsp.fSlow34] = (1.0000000000000000 - obj[dsp.fSlow33]);
		obj[dsp.fSlow35] = (1.0000000000000000 / (obj[dsp.fSlow33] + 1.0000000000000000));
		voice_idx += 1;
	);
);

@slider
control();

@sample
voice_idx = 0;
while(voice_idx < nvoices) (
	obj = dsp.memory + dsp.size * voice_idx;
	fTemp0 = spl0;
	obj[dsp.fVec0 + (obj[dsp.IOTA0] & 65535)] = fTemp0;
	obj[dsp.iVec1 + 0] = 1;
	obj[dsp.iRec21 + 0] = int32(add32(obj[dsp.iRec21 + 1], 1));
	fTemp1 = (obj[dsp.iRec21 + 0]);
	fTemp2 = pow((10.0000000000000000 * fTemp0), 2.0000000000000000);
	obj[dsp.fVec2 + 0] = fTemp2;
	fTemp3 = (((fTemp2 != obj[dsp.fVec2 + 1]) != 0) ? obj[dsp.fConst3] : (obj[dsp.fRec23 + 1] + -1.0000000000000000));
	obj[dsp.fRec23 + 0] = fTemp3;
	obj[dsp.fRec24 + 0] = (((fTemp3 > 0.0000000000000000) != 0) ? (obj[dsp.fRec24 + 1] + ((fTemp2 - obj[dsp.fRec24 + 1]) / fTemp3)) : fTemp2);
	obj[dsp.fRec22 + 0] = (((fmod(fTemp1, obj[dsp.fConst2]) == 0.0000000000000000) != 0) ? obj[dsp.fRec24 + 0] : obj[dsp.fRec22 + 1]);
	obj[dsp.fRec20 + 0] = (((fmod(fTemp1, obj[dsp.fConst1]) == 0.0000000000000000) != 0) ? (20.0000000000000000 * log10(max(0.0000000000000000, obj[dsp.fRec22 + 0]))) : obj[dsp.fRec20 + 1]);
	fTemp4 = (max(-30.0000000000000000, min(0.0000000000000000, obj[dsp.fRec20 + 0])) + 30.0000000000000000);
	obj[dsp.fVec3 + 0] = fTemp4;
	fTemp5 = (0.0333333350718021 * fTemp4);
	fTemp6 = (((fTemp5 != (0.0333333350718021 * obj[dsp.fVec3 + 1])) != 0) ? obj[dsp.fConst4] : (obj[dsp.fRec18 + 1] + -1.0000000000000000));
	obj[dsp.fRec18 + 0] = fTemp6;
	obj[dsp.fRec19 + 0] = (((fTemp6 > 0.0000000000000000) != 0) ? (obj[dsp.fRec19 + 1] + ((fTemp5 - obj[dsp.fRec19 + 1]) / fTemp6)) : fTemp5);
	fTemp7 = max(0.1000000014901161, min(100.0000000000000000, exp(((12.0000000000000000 * max(0.7500000000000000, min(1.0000000000000000, (1.0000000000000000 - (0.2500000000000000 * pow(obj[dsp.fRec19 + 0], 0.1000000014901161)))))) + -6.0000000000000000))));
	obj[dsp.fRec26 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec26 + 1]) - (obj[dsp.fRec1 + 1] + obj[dsp.fRec1 + 2]))));
	obj[dsp.fRec27 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec27 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec1 + 1] - obj[dsp.fRec1 + 2])))));
	fTemp8 = (obj[dsp.fRec27 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec26 + 0]));
	obj[dsp.fVec4 + 0] = fTemp8;
	obj[dsp.fRec25 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec25 + 1]) - (obj[dsp.fSlow6] * (fTemp8 - obj[dsp.fVec4 + 1])))));
	obj[dsp.fRec28 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec28 + 1]) - (fTemp8 + obj[dsp.fVec4 + 1]))));
	fTemp9 = ((obj[dsp.fRec28 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec25 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst5] / fTemp7))));
	obj[dsp.fVec5 + (obj[dsp.IOTA0] & 131071)] = fTemp9;
	iTemp10 = int32(sub32(1, obj[dsp.iVec1 + 1]));
	fTemp11 = ((iTemp10 != 0) ? 0.3125000000000000 : (obj[dsp.fSlow10] + obj[dsp.fRec29 + 1]));
	obj[dsp.fRec29 + 0] = (fTemp11 - floor(fTemp11));
	fTemp12 = (obj[dsp.fSlow11] * sin((6.2831854820251465 * obj[dsp.fRec29 + 0])));
	fTemp13 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst9] + fTemp12)));
	fTemp14 = (fTemp13 + -0.9999949932098389);
	iTemp15 = int32(ftoi32(fTemp14));
	fTemp16 = floor(fTemp14);
	fTemp17 = (fTemp13 + (-1.0000000000000000 - fTemp16));
	fTemp18 = (fTemp13 - fTemp16);
	fTemp19 = (fTemp18 * fTemp17);
	fTemp20 = (fTemp13 + (-2.0000000000000000 - fTemp16));
	fTemp21 = ((obj[dsp.fSlow29] * ((obj[dsp.fSlow18] * ((obj[dsp.fSlow28] * obj[dsp.fVec0 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iSlow27])) & 65535)]) - (obj[dsp.fSlow26] * obj[dsp.fVec0 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iSlow25])) & 65535)]))) - (obj[dsp.fSlow24] * obj[dsp.fVec0 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iSlow23])) & 65535)]))) + (obj[dsp.fSlow22] * obj[dsp.fVec0 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iSlow16])) & 65535)]));
	obj[dsp.fVec6 + 0] = fTemp21;
	obj[dsp.fRec31 + 0] = -((obj[dsp.fSlow32] * ((obj[dsp.fSlow31] * obj[dsp.fRec31 + 1]) - (obj[dsp.fSlow30] * (fTemp21 - obj[dsp.fVec6 + 1])))));
	obj[dsp.fRec30 + 0] = -((obj[dsp.fSlow35] * ((obj[dsp.fSlow34] * obj[dsp.fRec30 + 1]) - (obj[dsp.fRec31 + 0] + obj[dsp.fRec31 + 1]))));
	fTemp22 = (0.2500000000000000 * obj[dsp.fRec30 + 0]);
	fTemp23 = (((0.1666666716337204 * ((fTemp19 * fTemp20) * obj[dsp.fVec5 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp15, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp13 + (-3.0000000000000000 - fTemp16)) * ((fTemp20 * ((0.5000000000000000 * (fTemp18 * obj[dsp.fVec5 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp15, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec5 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp15))))))) & 131071)] * fTemp17)))) - (0.5000000000000000 * (fTemp19 * obj[dsp.fVec5 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp15, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec16 + 1]));
	obj[dsp.fVec7 + (obj[dsp.IOTA0] & 1023)] = fTemp23;
	obj[dsp.fRec16 + 0] = obj[dsp.fVec7 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst11])) & 1023)];
	fRec17 = (0.6000000238418579 * fTemp23);
	obj[dsp.fRec35 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec35 + 1]) - (obj[dsp.fRec0 + 1] + obj[dsp.fRec0 + 2]))));
	obj[dsp.fRec36 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec36 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec0 + 1] - obj[dsp.fRec0 + 2])))));
	fTemp24 = (obj[dsp.fRec36 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec35 + 0]));
	obj[dsp.fVec8 + 0] = fTemp24;
	obj[dsp.fRec34 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec34 + 1]) - (obj[dsp.fSlow6] * (fTemp24 - obj[dsp.fVec8 + 1])))));
	obj[dsp.fRec37 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec37 + 1]) - (fTemp24 + obj[dsp.fVec8 + 1]))));
	fTemp25 = ((obj[dsp.fRec37 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec34 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst12] / fTemp7))));
	obj[dsp.fVec9 + (obj[dsp.IOTA0] & 131071)] = fTemp25;
	fTemp26 = ((iTemp10 != 0) ? 0.2500000000000000 : (obj[dsp.fSlow10] + obj[dsp.fRec38 + 1]));
	obj[dsp.fRec38 + 0] = (fTemp26 - floor(fTemp26));
	fTemp27 = (obj[dsp.fSlow11] * sin((6.2831854820251465 * obj[dsp.fRec38 + 0])));
	fTemp28 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst13] + fTemp27)));
	fTemp29 = (fTemp28 + -0.9999949932098389);
	iTemp30 = int32(ftoi32(fTemp29));
	fTemp31 = floor(fTemp29);
	fTemp32 = (fTemp28 + (-1.0000000000000000 - fTemp31));
	fTemp33 = (fTemp28 - fTemp31);
	fTemp34 = (fTemp33 * fTemp32);
	fTemp35 = (fTemp28 + (-2.0000000000000000 - fTemp31));
	fTemp36 = (((0.1666666716337204 * ((fTemp34 * fTemp35) * obj[dsp.fVec9 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp30, 3))))))))) & 131071)])) + (((fTemp28 + (-3.0000000000000000 - fTemp31)) * ((fTemp35 * ((0.5000000000000000 * (fTemp33 * obj[dsp.fVec9 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp30, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec9 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp30))))))) & 131071)] * fTemp32)))) - (0.5000000000000000 * (fTemp34 * obj[dsp.fVec9 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp30, 2))))))))) & 131071)])))) + fTemp22)) - (0.6000000238418579 * obj[dsp.fRec32 + 1]));
	obj[dsp.fVec10 + (obj[dsp.IOTA0] & 1023)] = fTemp36;
	obj[dsp.fRec32 + 0] = obj[dsp.fVec10 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst14])) & 1023)];
	fRec33 = (0.6000000238418579 * fTemp36);
	obj[dsp.fRec42 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec42 + 1]) - (obj[dsp.fRec2 + 1] + obj[dsp.fRec2 + 2]))));
	obj[dsp.fRec43 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec43 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec2 + 1] - obj[dsp.fRec2 + 2])))));
	fTemp37 = (obj[dsp.fRec43 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec42 + 0]));
	obj[dsp.fVec11 + 0] = fTemp37;
	obj[dsp.fRec41 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec41 + 1]) - (obj[dsp.fSlow6] * (fTemp37 - obj[dsp.fVec11 + 1])))));
	obj[dsp.fRec44 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec44 + 1]) - (fTemp37 + obj[dsp.fVec11 + 1]))));
	fTemp38 = ((obj[dsp.fRec44 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec41 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst15] / fTemp7))));
	obj[dsp.fVec12 + (obj[dsp.IOTA0] & 131071)] = fTemp38;
	fTemp39 = ((iTemp10 != 0) ? 0.3750000000000000 : (obj[dsp.fSlow10] + obj[dsp.fRec45 + 1]));
	obj[dsp.fRec45 + 0] = (fTemp39 - floor(fTemp39));
	fTemp40 = (obj[dsp.fSlow11] * sin((6.2831854820251465 * obj[dsp.fRec45 + 0])));
	fTemp41 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst16] + fTemp40)));
	fTemp42 = (fTemp41 + -0.9999949932098389);
	iTemp43 = int32(ftoi32(fTemp42));
	fTemp44 = floor(fTemp42);
	fTemp45 = (fTemp41 + (-1.0000000000000000 - fTemp44));
	fTemp46 = (fTemp41 - fTemp44);
	fTemp47 = (fTemp46 * fTemp45);
	fTemp48 = (fTemp41 + (-2.0000000000000000 - fTemp44));
	fTemp49 = (((0.1666666716337204 * ((fTemp47 * fTemp48) * obj[dsp.fVec12 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp43, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp41 + (-3.0000000000000000 - fTemp44)) * ((fTemp48 * ((0.5000000000000000 * (fTemp46 * obj[dsp.fVec12 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp43, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec12 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp43))))))) & 131071)] * fTemp45)))) - (0.5000000000000000 * (fTemp47 * obj[dsp.fVec12 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp43, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec39 + 1]));
	obj[dsp.fVec13 + (obj[dsp.IOTA0] & 1023)] = fTemp49;
	obj[dsp.fRec39 + 0] = obj[dsp.fVec13 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst17])) & 1023)];
	fRec40 = (0.6000000238418579 * fTemp49);
	obj[dsp.fRec49 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec49 + 1]) - (obj[dsp.fRec3 + 1] + obj[dsp.fRec3 + 2]))));
	obj[dsp.fRec50 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec50 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec3 + 1] - obj[dsp.fRec3 + 2])))));
	fTemp50 = (obj[dsp.fRec50 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec49 + 0]));
	obj[dsp.fVec14 + 0] = fTemp50;
	obj[dsp.fRec48 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec48 + 1]) - (obj[dsp.fSlow6] * (fTemp50 - obj[dsp.fVec14 + 1])))));
	obj[dsp.fRec51 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec51 + 1]) - (fTemp50 + obj[dsp.fVec14 + 1]))));
	fTemp51 = ((obj[dsp.fRec51 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec48 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst18] / fTemp7))));
	obj[dsp.fVec15 + (obj[dsp.IOTA0] & 131071)] = fTemp51;
	fTemp52 = ((iTemp10 != 0) ? 0.4375000000000000 : (obj[dsp.fSlow10] + obj[dsp.fRec52 + 1]));
	obj[dsp.fRec52 + 0] = (fTemp52 - floor(fTemp52));
	fTemp53 = (obj[dsp.fSlow11] * sin((6.2831854820251465 * obj[dsp.fRec52 + 0])));
	fTemp54 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst19] + fTemp53)));
	fTemp55 = (fTemp54 + -0.9999949932098389);
	iTemp56 = int32(ftoi32(fTemp55));
	fTemp57 = floor(fTemp55);
	fTemp58 = (fTemp54 + (-1.0000000000000000 - fTemp57));
	fTemp59 = (fTemp54 - fTemp57);
	fTemp60 = (fTemp59 * fTemp58);
	fTemp61 = (fTemp54 + (-2.0000000000000000 - fTemp57));
	fTemp62 = (((0.1666666716337204 * ((fTemp60 * fTemp61) * obj[dsp.fVec15 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp56, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp54 + (-3.0000000000000000 - fTemp57)) * ((fTemp61 * ((0.5000000000000000 * (fTemp59 * obj[dsp.fVec15 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp56, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec15 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp56))))))) & 131071)] * fTemp58)))) - (0.5000000000000000 * (fTemp60 * obj[dsp.fVec15 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp56, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec46 + 1]));
	obj[dsp.fVec16 + (obj[dsp.IOTA0] & 1023)] = fTemp62;
	obj[dsp.fRec46 + 0] = obj[dsp.fVec16 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst20])) & 1023)];
	fRec47 = (0.6000000238418579 * fTemp62);
	fTemp63 = (obj[dsp.fRec46 + 1] + (obj[dsp.fRec39 + 1] + (obj[dsp.fRec16 + 1] + (obj[dsp.fRec32 + 1] + (fRec47 + (fRec40 + (fRec33 + fRec17)))))));
	obj[dsp.fRec56 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec56 + 1]) - (obj[dsp.fRec4 + 1] + obj[dsp.fRec4 + 2]))));
	obj[dsp.fRec57 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec57 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec4 + 1] - obj[dsp.fRec4 + 2])))));
	fTemp64 = (obj[dsp.fRec57 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec56 + 0]));
	obj[dsp.fVec17 + 0] = fTemp64;
	obj[dsp.fRec55 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec55 + 1]) - (obj[dsp.fSlow6] * (fTemp64 - obj[dsp.fVec17 + 1])))));
	obj[dsp.fRec58 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec58 + 1]) - (fTemp64 + obj[dsp.fVec17 + 1]))));
	fTemp65 = ((obj[dsp.fRec58 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec55 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst21] / fTemp7))));
	obj[dsp.fVec18 + (obj[dsp.IOTA0] & 131071)] = fTemp65;
	fTemp66 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst22] - fTemp27)));
	fTemp67 = (fTemp66 + -0.9999949932098389);
	iTemp68 = int32(ftoi32(fTemp67));
	fTemp69 = floor(fTemp67);
	fTemp70 = (fTemp66 + (-1.0000000000000000 - fTemp69));
	fTemp71 = (fTemp66 - fTemp69);
	fTemp72 = (fTemp71 * fTemp70);
	fTemp73 = (fTemp66 + (-2.0000000000000000 - fTemp69));
	fTemp74 = (((0.1666666716337204 * ((fTemp72 * fTemp73) * obj[dsp.fVec18 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp68, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp66 + (-3.0000000000000000 - fTemp69)) * ((fTemp73 * ((0.5000000000000000 * (fTemp71 * obj[dsp.fVec18 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp68, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec18 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp68))))))) & 131071)] * fTemp70)))) - (0.5000000000000000 * (fTemp72 * obj[dsp.fVec18 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp68, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec53 + 1]));
	obj[dsp.fVec19 + (obj[dsp.IOTA0] & 1023)] = fTemp74;
	obj[dsp.fRec53 + 0] = obj[dsp.fVec19 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst23])) & 1023)];
	fRec54 = (0.6000000238418579 * fTemp74);
	obj[dsp.fRec62 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec62 + 1]) - (obj[dsp.fRec8 + 1] + obj[dsp.fRec8 + 2]))));
	obj[dsp.fRec63 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec63 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec8 + 1] - obj[dsp.fRec8 + 2])))));
	fTemp75 = (obj[dsp.fRec63 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec62 + 0]));
	obj[dsp.fVec20 + 0] = fTemp75;
	obj[dsp.fRec61 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec61 + 1]) - (obj[dsp.fSlow6] * (fTemp75 - obj[dsp.fVec20 + 1])))));
	obj[dsp.fRec64 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec64 + 1]) - (fTemp75 + obj[dsp.fVec20 + 1]))));
	fTemp76 = ((obj[dsp.fRec64 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec61 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst24] / fTemp7))));
	obj[dsp.fVec21 + (obj[dsp.IOTA0] & 131071)] = fTemp76;
	fTemp77 = ((iTemp10 != 0) ? 0.0000000000000000 : (obj[dsp.fSlow10] + obj[dsp.fRec65 + 1]));
	obj[dsp.fRec65 + 0] = (fTemp77 - floor(fTemp77));
	fTemp78 = (obj[dsp.fSlow11] * sin((6.2831854820251465 * obj[dsp.fRec65 + 0])));
	fTemp79 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst25] + fTemp78)));
	fTemp80 = (fTemp79 + -0.9999949932098389);
	iTemp81 = int32(ftoi32(fTemp80));
	fTemp82 = floor(fTemp80);
	fTemp83 = (fTemp79 + (-1.0000000000000000 - fTemp82));
	fTemp84 = (fTemp79 - fTemp82);
	fTemp85 = (fTemp84 * fTemp83);
	fTemp86 = (fTemp79 + (-2.0000000000000000 - fTemp82));
	fTemp87 = (((0.1666666716337204 * ((fTemp85 * fTemp86) * obj[dsp.fVec21 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp81, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp79 + (-3.0000000000000000 - fTemp82)) * ((fTemp86 * ((0.5000000000000000 * (fTemp84 * obj[dsp.fVec21 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp81, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec21 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp81))))))) & 131071)] * fTemp83)))) - (0.5000000000000000 * (fTemp85 * obj[dsp.fVec21 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp81, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec59 + 1]));
	obj[dsp.fVec22 + (obj[dsp.IOTA0] & 1023)] = fTemp87;
	obj[dsp.fRec59 + 0] = obj[dsp.fVec22 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst26])) & 1023)];
	fRec60 = (0.6000000238418579 * fTemp87);
	obj[dsp.fRec69 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec69 + 1]) - (obj[dsp.fRec12 + 1] + obj[dsp.fRec12 + 2]))));
	obj[dsp.fRec70 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec70 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec12 + 1] - obj[dsp.fRec12 + 2])))));
	fTemp88 = (obj[dsp.fRec70 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec69 + 0]));
	obj[dsp.fVec23 + 0] = fTemp88;
	obj[dsp.fRec68 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec68 + 1]) - (obj[dsp.fSlow6] * (fTemp88 - obj[dsp.fVec23 + 1])))));
	obj[dsp.fRec71 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec71 + 1]) - (fTemp88 + obj[dsp.fVec23 + 1]))));
	fTemp89 = ((obj[dsp.fRec71 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec68 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst27] / fTemp7))));
	obj[dsp.fVec24 + (obj[dsp.IOTA0] & 131071)] = fTemp89;
	fTemp90 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst28] - fTemp78)));
	fTemp91 = (fTemp90 + -0.9999949932098389);
	iTemp92 = int32(ftoi32(fTemp91));
	fTemp93 = floor(fTemp91);
	fTemp94 = (fTemp90 + (-1.0000000000000000 - fTemp93));
	fTemp95 = (fTemp90 - fTemp93);
	fTemp96 = (fTemp95 * fTemp94);
	fTemp97 = (fTemp90 + (-2.0000000000000000 - fTemp93));
	fTemp98 = (((0.1666666716337204 * ((fTemp96 * fTemp97) * obj[dsp.fVec24 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp92, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp90 + (-3.0000000000000000 - fTemp93)) * ((fTemp97 * ((0.5000000000000000 * (fTemp95 * obj[dsp.fVec24 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp92, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec24 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp92))))))) & 131071)] * fTemp94)))) - (0.5000000000000000 * (fTemp96 * obj[dsp.fVec24 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp92, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec66 + 1]));
	obj[dsp.fVec25 + (obj[dsp.IOTA0] & 1023)] = fTemp98;
	obj[dsp.fRec66 + 0] = obj[dsp.fVec25 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst29])) & 1023)];
	fRec67 = (0.6000000238418579 * fTemp98);
	fTemp99 = (fRec67 + (fRec60 + (fRec33 + fRec54)));
	fTemp100 = (obj[dsp.fRec66 + 1] + (obj[dsp.fRec59 + 1] + (obj[dsp.fRec53 + 1] + (obj[dsp.fRec32 + 1] + fTemp99))));
	obj[dsp.fRec75 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec75 + 1]) - (obj[dsp.fRec5 + 1] + obj[dsp.fRec5 + 2]))));
	obj[dsp.fRec76 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec76 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec5 + 1] - obj[dsp.fRec5 + 2])))));
	fTemp101 = (obj[dsp.fRec76 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec75 + 0]));
	obj[dsp.fVec26 + 0] = fTemp101;
	obj[dsp.fRec74 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec74 + 1]) - (obj[dsp.fSlow6] * (fTemp101 - obj[dsp.fVec26 + 1])))));
	obj[dsp.fRec77 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec77 + 1]) - (fTemp101 + obj[dsp.fVec26 + 1]))));
	fTemp102 = ((obj[dsp.fRec77 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec74 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst30] / fTemp7))));
	obj[dsp.fVec27 + (obj[dsp.IOTA0] & 131071)] = fTemp102;
	fTemp103 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst31] - fTemp12)));
	fTemp104 = (fTemp103 + -0.9999949932098389);
	iTemp105 = int32(ftoi32(fTemp104));
	fTemp106 = floor(fTemp104);
	fTemp107 = (fTemp103 + (-1.0000000000000000 - fTemp106));
	fTemp108 = (fTemp103 - fTemp106);
	fTemp109 = (fTemp108 * fTemp107);
	fTemp110 = (fTemp103 + (-2.0000000000000000 - fTemp106));
	fTemp111 = (((0.1666666716337204 * ((fTemp109 * fTemp110) * obj[dsp.fVec27 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp105, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp103 + (-3.0000000000000000 - fTemp106)) * ((fTemp110 * ((0.5000000000000000 * (fTemp108 * obj[dsp.fVec27 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp105, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec27 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp105))))))) & 131071)] * fTemp107)))) - (0.5000000000000000 * (fTemp109 * obj[dsp.fVec27 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp105, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec72 + 1]));
	obj[dsp.fVec28 + (obj[dsp.IOTA0] & 1023)] = fTemp111;
	obj[dsp.fRec72 + 0] = obj[dsp.fVec28 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst32])) & 1023)];
	fRec73 = (0.6000000238418579 * fTemp111);
	obj[dsp.fRec81 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec81 + 1]) - (obj[dsp.fRec9 + 1] + obj[dsp.fRec9 + 2]))));
	obj[dsp.fRec82 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec82 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec9 + 1] - obj[dsp.fRec9 + 2])))));
	fTemp112 = (obj[dsp.fRec82 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec81 + 0]));
	obj[dsp.fVec29 + 0] = fTemp112;
	obj[dsp.fRec80 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec80 + 1]) - (obj[dsp.fSlow6] * (fTemp112 - obj[dsp.fVec29 + 1])))));
	obj[dsp.fRec83 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec83 + 1]) - (fTemp112 + obj[dsp.fVec29 + 1]))));
	fTemp113 = ((obj[dsp.fRec83 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec80 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst33] / fTemp7))));
	obj[dsp.fVec30 + (obj[dsp.IOTA0] & 131071)] = fTemp113;
	fTemp114 = ((iTemp10 != 0) ? 0.0625000000000000 : (obj[dsp.fSlow10] + obj[dsp.fRec84 + 1]));
	obj[dsp.fRec84 + 0] = (fTemp114 - floor(fTemp114));
	fTemp115 = (obj[dsp.fSlow11] * sin((6.2831854820251465 * obj[dsp.fRec84 + 0])));
	fTemp116 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst34] + fTemp115)));
	fTemp117 = (fTemp116 + -0.9999949932098389);
	iTemp118 = int32(ftoi32(fTemp117));
	fTemp119 = floor(fTemp117);
	fTemp120 = (fTemp116 + (-1.0000000000000000 - fTemp119));
	fTemp121 = (fTemp116 - fTemp119);
	fTemp122 = (fTemp121 * fTemp120);
	fTemp123 = (fTemp116 + (-2.0000000000000000 - fTemp119));
	fTemp124 = (((0.1666666716337204 * ((fTemp122 * fTemp123) * obj[dsp.fVec30 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp118, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp116 + (-3.0000000000000000 - fTemp119)) * ((fTemp123 * ((0.5000000000000000 * (fTemp121 * obj[dsp.fVec30 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp118, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec30 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp118))))))) & 131071)] * fTemp120)))) - (0.5000000000000000 * (fTemp122 * obj[dsp.fVec30 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp118, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec78 + 1]));
	obj[dsp.fVec31 + (obj[dsp.IOTA0] & 1023)] = fTemp124;
	obj[dsp.fRec78 + 0] = obj[dsp.fVec31 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst35])) & 1023)];
	fRec79 = (0.6000000238418579 * fTemp124);
	obj[dsp.fRec88 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec88 + 1]) - (obj[dsp.fRec13 + 1] + obj[dsp.fRec13 + 2]))));
	obj[dsp.fRec89 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec89 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec13 + 1] - obj[dsp.fRec13 + 2])))));
	fTemp125 = (obj[dsp.fRec89 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec88 + 0]));
	obj[dsp.fVec32 + 0] = fTemp125;
	obj[dsp.fRec87 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec87 + 1]) - (obj[dsp.fSlow6] * (fTemp125 - obj[dsp.fVec32 + 1])))));
	obj[dsp.fRec90 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec90 + 1]) - (fTemp125 + obj[dsp.fVec32 + 1]))));
	fTemp126 = ((obj[dsp.fRec90 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec87 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst36] / fTemp7))));
	obj[dsp.fVec33 + (obj[dsp.IOTA0] & 131071)] = fTemp126;
	fTemp127 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst37] - fTemp115)));
	fTemp128 = (fTemp127 + -0.9999949932098389);
	iTemp129 = int32(ftoi32(fTemp128));
	fTemp130 = floor(fTemp128);
	fTemp131 = (fTemp127 + (-1.0000000000000000 - fTemp130));
	fTemp132 = (fTemp127 - fTemp130);
	fTemp133 = (fTemp132 * fTemp131);
	fTemp134 = (fTemp127 + (-2.0000000000000000 - fTemp130));
	fTemp135 = (((0.1666666716337204 * ((fTemp133 * fTemp134) * obj[dsp.fVec33 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp129, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp127 + (-3.0000000000000000 - fTemp130)) * ((fTemp134 * ((0.5000000000000000 * (fTemp132 * obj[dsp.fVec33 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp129, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec33 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp129))))))) & 131071)] * fTemp131)))) - (0.5000000000000000 * (fTemp133 * obj[dsp.fVec33 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp129, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec85 + 1]));
	obj[dsp.fVec34 + (obj[dsp.IOTA0] & 1023)] = fTemp135;
	obj[dsp.fRec85 + 0] = obj[dsp.fVec34 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst38])) & 1023)];
	fRec86 = (0.6000000238418579 * fTemp135);
	obj[dsp.fRec94 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec94 + 1]) - (obj[dsp.fRec6 + 1] + obj[dsp.fRec6 + 2]))));
	obj[dsp.fRec95 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec95 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec6 + 1] - obj[dsp.fRec6 + 2])))));
	fTemp136 = (obj[dsp.fRec95 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec94 + 0]));
	obj[dsp.fVec35 + 0] = fTemp136;
	obj[dsp.fRec93 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec93 + 1]) - (obj[dsp.fSlow6] * (fTemp136 - obj[dsp.fVec35 + 1])))));
	obj[dsp.fRec96 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec96 + 1]) - (fTemp136 + obj[dsp.fVec35 + 1]))));
	fTemp137 = ((obj[dsp.fRec96 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec93 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst39] / fTemp7))));
	obj[dsp.fVec36 + (obj[dsp.IOTA0] & 131071)] = fTemp137;
	fTemp138 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst40] - fTemp40)));
	fTemp139 = (fTemp138 + -0.9999949932098389);
	iTemp140 = int32(ftoi32(fTemp139));
	fTemp141 = floor(fTemp139);
	fTemp142 = (fTemp138 + (-1.0000000000000000 - fTemp141));
	fTemp143 = (fTemp138 - fTemp141);
	fTemp144 = (fTemp143 * fTemp142);
	fTemp145 = (fTemp138 + (-2.0000000000000000 - fTemp141));
	fTemp146 = (((0.1666666716337204 * ((fTemp144 * fTemp145) * obj[dsp.fVec36 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp140, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp138 + (-3.0000000000000000 - fTemp141)) * ((fTemp145 * ((0.5000000000000000 * (fTemp143 * obj[dsp.fVec36 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp140, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec36 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp140))))))) & 131071)] * fTemp142)))) - (0.5000000000000000 * (fTemp144 * obj[dsp.fVec36 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp140, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec91 + 1]));
	obj[dsp.fVec37 + (obj[dsp.IOTA0] & 1023)] = fTemp146;
	obj[dsp.fRec91 + 0] = obj[dsp.fVec37 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst41])) & 1023)];
	fRec92 = (0.6000000238418579 * fTemp146);
	obj[dsp.fRec100 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec100 + 1]) - (obj[dsp.fRec10 + 1] + obj[dsp.fRec10 + 2]))));
	obj[dsp.fRec101 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec101 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec10 + 1] - obj[dsp.fRec10 + 2])))));
	fTemp147 = (obj[dsp.fRec101 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec100 + 0]));
	obj[dsp.fVec38 + 0] = fTemp147;
	obj[dsp.fRec99 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec99 + 1]) - (obj[dsp.fSlow6] * (fTemp147 - obj[dsp.fVec38 + 1])))));
	obj[dsp.fRec102 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec102 + 1]) - (fTemp147 + obj[dsp.fVec38 + 1]))));
	fTemp148 = ((obj[dsp.fRec102 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec99 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst42] / fTemp7))));
	obj[dsp.fVec39 + (obj[dsp.IOTA0] & 131071)] = fTemp148;
	fTemp149 = ((iTemp10 != 0) ? 0.1250000000000000 : (obj[dsp.fSlow10] + obj[dsp.fRec103 + 1]));
	obj[dsp.fRec103 + 0] = (fTemp149 - floor(fTemp149));
	fTemp150 = (obj[dsp.fSlow11] * sin((6.2831854820251465 * obj[dsp.fRec103 + 0])));
	fTemp151 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst43] + fTemp150)));
	fTemp152 = (fTemp151 + -0.9999949932098389);
	iTemp153 = int32(ftoi32(fTemp152));
	fTemp154 = floor(fTemp152);
	fTemp155 = (fTemp151 + (-1.0000000000000000 - fTemp154));
	fTemp156 = (fTemp151 - fTemp154);
	fTemp157 = (fTemp156 * fTemp155);
	fTemp158 = (fTemp151 + (-2.0000000000000000 - fTemp154));
	fTemp159 = (((0.1666666716337204 * ((fTemp157 * fTemp158) * obj[dsp.fVec39 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp153, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp151 + (-3.0000000000000000 - fTemp154)) * ((fTemp158 * ((0.5000000000000000 * (fTemp156 * obj[dsp.fVec39 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp153, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec39 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp153))))))) & 131071)] * fTemp155)))) - (0.5000000000000000 * (fTemp157 * obj[dsp.fVec39 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp153, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec97 + 1]));
	obj[dsp.fVec40 + (obj[dsp.IOTA0] & 1023)] = fTemp159;
	obj[dsp.fRec97 + 0] = obj[dsp.fVec40 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst44])) & 1023)];
	fRec98 = (0.6000000238418579 * fTemp159);
	obj[dsp.fRec107 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec107 + 1]) - (obj[dsp.fRec14 + 1] + obj[dsp.fRec14 + 2]))));
	obj[dsp.fRec108 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec108 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec14 + 1] - obj[dsp.fRec14 + 2])))));
	fTemp160 = (obj[dsp.fRec108 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec107 + 0]));
	obj[dsp.fVec41 + 0] = fTemp160;
	obj[dsp.fRec106 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec106 + 1]) - (obj[dsp.fSlow6] * (fTemp160 - obj[dsp.fVec41 + 1])))));
	obj[dsp.fRec109 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec109 + 1]) - (fTemp160 + obj[dsp.fVec41 + 1]))));
	fTemp161 = ((obj[dsp.fRec109 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec106 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst45] / fTemp7))));
	obj[dsp.fVec42 + (obj[dsp.IOTA0] & 131071)] = fTemp161;
	fTemp162 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst46] - fTemp150)));
	fTemp163 = (fTemp162 + -0.9999949932098389);
	iTemp164 = int32(ftoi32(fTemp163));
	fTemp165 = floor(fTemp163);
	fTemp166 = (fTemp162 + (-1.0000000000000000 - fTemp165));
	fTemp167 = (fTemp162 - fTemp165);
	fTemp168 = (fTemp167 * fTemp166);
	fTemp169 = (fTemp162 + (-2.0000000000000000 - fTemp165));
	fTemp170 = (((0.1666666716337204 * ((fTemp168 * fTemp169) * obj[dsp.fVec42 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp164, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp162 + (-3.0000000000000000 - fTemp165)) * ((fTemp169 * ((0.5000000000000000 * (fTemp167 * obj[dsp.fVec42 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp164, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec42 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp164))))))) & 131071)] * fTemp166)))) - (0.5000000000000000 * (fTemp168 * obj[dsp.fVec42 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp164, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec104 + 1]));
	obj[dsp.fVec43 + (obj[dsp.IOTA0] & 1023)] = fTemp170;
	obj[dsp.fRec104 + 0] = obj[dsp.fVec43 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst47])) & 1023)];
	fRec105 = (0.6000000238418579 * fTemp170);
	obj[dsp.fRec113 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec113 + 1]) - (obj[dsp.fRec7 + 1] + obj[dsp.fRec7 + 2]))));
	obj[dsp.fRec114 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec114 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec7 + 1] - obj[dsp.fRec7 + 2])))));
	fTemp171 = (obj[dsp.fRec114 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec113 + 0]));
	obj[dsp.fVec44 + 0] = fTemp171;
	obj[dsp.fRec112 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec112 + 1]) - (obj[dsp.fSlow6] * (fTemp171 - obj[dsp.fVec44 + 1])))));
	obj[dsp.fRec115 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec115 + 1]) - (fTemp171 + obj[dsp.fVec44 + 1]))));
	fTemp172 = ((obj[dsp.fRec115 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec112 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst48] / fTemp7))));
	obj[dsp.fVec45 + (obj[dsp.IOTA0] & 131071)] = fTemp172;
	fTemp173 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst49] - fTemp53)));
	fTemp174 = (fTemp173 + -0.9999949932098389);
	iTemp175 = int32(ftoi32(fTemp174));
	fTemp176 = floor(fTemp174);
	fTemp177 = (fTemp173 + (-1.0000000000000000 - fTemp176));
	fTemp178 = (fTemp173 - fTemp176);
	fTemp179 = (fTemp178 * fTemp177);
	fTemp180 = (fTemp173 + (-2.0000000000000000 - fTemp176));
	fTemp181 = (((0.1666666716337204 * ((fTemp179 * fTemp180) * obj[dsp.fVec45 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp175, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp173 + (-3.0000000000000000 - fTemp176)) * ((fTemp180 * ((0.5000000000000000 * (fTemp178 * obj[dsp.fVec45 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp175, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec45 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp175))))))) & 131071)] * fTemp177)))) - (0.5000000000000000 * (fTemp179 * obj[dsp.fVec45 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp175, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec110 + 1]));
	obj[dsp.fVec46 + (obj[dsp.IOTA0] & 1023)] = fTemp181;
	obj[dsp.fRec110 + 0] = obj[dsp.fVec46 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst50])) & 1023)];
	fRec111 = (0.6000000238418579 * fTemp181);
	obj[dsp.fRec119 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec119 + 1]) - (obj[dsp.fRec11 + 1] + obj[dsp.fRec11 + 2]))));
	obj[dsp.fRec120 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec120 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec11 + 1] - obj[dsp.fRec11 + 2])))));
	fTemp182 = (obj[dsp.fRec120 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec119 + 0]));
	obj[dsp.fVec47 + 0] = fTemp182;
	obj[dsp.fRec118 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec118 + 1]) - (obj[dsp.fSlow6] * (fTemp182 - obj[dsp.fVec47 + 1])))));
	obj[dsp.fRec121 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec121 + 1]) - (fTemp182 + obj[dsp.fVec47 + 1]))));
	fTemp183 = ((obj[dsp.fRec121 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec118 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst51] / fTemp7))));
	obj[dsp.fVec48 + (obj[dsp.IOTA0] & 131071)] = fTemp183;
	fTemp184 = ((iTemp10 != 0) ? 0.1875000000000000 : (obj[dsp.fSlow10] + obj[dsp.fRec122 + 1]));
	obj[dsp.fRec122 + 0] = (fTemp184 - floor(fTemp184));
	fTemp185 = (obj[dsp.fSlow11] * sin((6.2831854820251465 * obj[dsp.fRec122 + 0])));
	fTemp186 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst52] + fTemp185)));
	fTemp187 = (fTemp186 + -0.9999949932098389);
	iTemp188 = int32(ftoi32(fTemp187));
	fTemp189 = floor(fTemp187);
	fTemp190 = (fTemp186 + (-1.0000000000000000 - fTemp189));
	fTemp191 = (fTemp186 - fTemp189);
	fTemp192 = (fTemp191 * fTemp190);
	fTemp193 = (fTemp186 + (-2.0000000000000000 - fTemp189));
	fTemp194 = (((0.1666666716337204 * ((fTemp192 * fTemp193) * obj[dsp.fVec48 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp188, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp186 + (-3.0000000000000000 - fTemp189)) * ((fTemp193 * ((0.5000000000000000 * (fTemp191 * obj[dsp.fVec48 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp188, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec48 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp188))))))) & 131071)] * fTemp190)))) - (0.5000000000000000 * (fTemp192 * obj[dsp.fVec48 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp188, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec116 + 1]));
	obj[dsp.fVec49 + (obj[dsp.IOTA0] & 1023)] = fTemp194;
	obj[dsp.fRec116 + 0] = obj[dsp.fVec49 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst53])) & 1023)];
	fRec117 = (0.6000000238418579 * fTemp194);
	obj[dsp.fRec126 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec126 + 1]) - (obj[dsp.fRec15 + 1] + obj[dsp.fRec15 + 2]))));
	obj[dsp.fRec127 + 0] = -((obj[dsp.fSlow4] * ((obj[dsp.fSlow3] * obj[dsp.fRec127 + 1]) - (obj[dsp.fSlow2] * (obj[dsp.fRec15 + 1] - obj[dsp.fRec15 + 2])))));
	fTemp195 = (obj[dsp.fRec127 + 0] + (obj[dsp.fSlow5] * obj[dsp.fRec126 + 0]));
	obj[dsp.fVec50 + 0] = fTemp195;
	obj[dsp.fRec125 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec125 + 1]) - (obj[dsp.fSlow6] * (fTemp195 - obj[dsp.fVec50 + 1])))));
	obj[dsp.fRec128 + 0] = -((obj[dsp.fSlow8] * ((obj[dsp.fSlow7] * obj[dsp.fRec128 + 1]) - (fTemp195 + obj[dsp.fVec50 + 1]))));
	fTemp196 = ((obj[dsp.fRec128 + 0] + (obj[dsp.fSlow9] * obj[dsp.fRec125 + 0])) * pow(0.0010000000474975, (obj[dsp.fSlow1] * (obj[dsp.fConst54] / fTemp7))));
	obj[dsp.fVec51 + (obj[dsp.IOTA0] & 131071)] = fTemp196;
	fTemp197 = max(1.0000000000000000, (obj[dsp.fSlow12] * (obj[dsp.fConst55] - fTemp185)));
	fTemp198 = (fTemp197 + -0.9999949932098389);
	iTemp199 = int32(ftoi32(fTemp198));
	fTemp200 = floor(fTemp198);
	fTemp201 = (fTemp197 + (-1.0000000000000000 - fTemp200));
	fTemp202 = (fTemp197 - fTemp200);
	fTemp203 = (fTemp202 * fTemp201);
	fTemp204 = (fTemp197 + (-2.0000000000000000 - fTemp200));
	fTemp205 = (((0.1666666716337204 * ((fTemp203 * fTemp204) * obj[dsp.fVec51 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp199, 3))))))))) & 131071)])) + (fTemp22 + ((fTemp197 + (-3.0000000000000000 - fTemp200)) * ((fTemp204 * ((0.5000000000000000 * (fTemp202 * obj[dsp.fVec51 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp199, 1))))))))) & 131071)])) - (0.1666666716337204 * (obj[dsp.fVec51 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, iTemp199))))))) & 131071)] * fTemp201)))) - (0.5000000000000000 * (fTemp203 * obj[dsp.fVec51 + (int32(sub32(obj[dsp.IOTA0], int32(ftoi32(min(obj[dsp.fConst7], (max(0, int32(add32(iTemp199, 2))))))))) & 131071)])))))) - (0.6000000238418579 * obj[dsp.fRec123 + 1]));
	obj[dsp.fVec52 + (obj[dsp.IOTA0] & 1023)] = fTemp205;
	obj[dsp.fRec123 + 0] = obj[dsp.fVec52 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst56])) & 1023)];
	fRec124 = (0.6000000238418579 * fTemp205);
	fTemp206 = (0.2500000000000000 * (obj[dsp.fRec123 + 1] + (obj[dsp.fRec116 + 1] + (obj[dsp.fRec110 + 1] + (obj[dsp.fRec46 + 1] + (obj[dsp.fRec104 + 1] + (obj[dsp.fRec97 + 1] + (obj[dsp.fRec91 + 1] + (obj[dsp.fRec39 + 1] + (obj[dsp.fRec85 + 1] + (obj[dsp.fRec78 + 1] + (obj[dsp.fRec72 + 1] + (obj[dsp.fRec16 + 1] + (obj[dsp.fRec66 + 1] + (obj[dsp.fRec59 + 1] + (obj[dsp.fRec53 + 1] + (obj[dsp.fRec32 + 1] + (fRec124 + (fRec117 + (fRec111 + (fRec47 + (fRec105 + (fRec98 + (fRec92 + (fRec40 + (fRec86 + (fRec79 + (fRec73 + (fRec17 + fTemp99)))))))))))))))))))))))))))));
	obj[dsp.fRec0 + 0] = (((fRec33 + obj[dsp.fRec32 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp100 + fTemp63)));
	fTemp207 = (obj[dsp.fRec85 + 1] + (obj[dsp.fRec78 + 1] + (obj[dsp.fRec72 + 1] + (obj[dsp.fRec16 + 1] + (fRec86 + (fRec79 + (fRec17 + fRec73)))))));
	obj[dsp.fRec1 + 0] = (((fRec17 + obj[dsp.fRec16 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp207 + fTemp63)));
	fTemp208 = (obj[dsp.fRec104 + 1] + (obj[dsp.fRec97 + 1] + (obj[dsp.fRec91 + 1] + (obj[dsp.fRec39 + 1] + (fRec105 + (fRec98 + (fRec40 + fRec92)))))));
	obj[dsp.fRec2 + 0] = (((fRec40 + obj[dsp.fRec39 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp208 + fTemp63)));
	fTemp209 = (obj[dsp.fRec123 + 1] + (obj[dsp.fRec116 + 1] + (obj[dsp.fRec110 + 1] + (obj[dsp.fRec46 + 1] + (fRec124 + (fRec117 + (fRec47 + fRec111)))))));
	obj[dsp.fRec3 + 0] = (((fRec47 + obj[dsp.fRec46 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp209 + fTemp63)));
	fTemp210 = (obj[dsp.fRec110 + 1] + (obj[dsp.fRec91 + 1] + (obj[dsp.fRec72 + 1] + (obj[dsp.fRec53 + 1] + (fRec111 + (fRec92 + (fRec54 + fRec73)))))));
	obj[dsp.fRec4 + 0] = (((fRec54 + obj[dsp.fRec53 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp100 + fTemp210)));
	obj[dsp.fRec5 + 0] = (((fRec73 + obj[dsp.fRec72 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp207 + fTemp210)));
	obj[dsp.fRec6 + 0] = (((fRec92 + obj[dsp.fRec91 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp208 + fTemp210)));
	obj[dsp.fRec7 + 0] = (((fRec111 + obj[dsp.fRec110 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp209 + fTemp210)));
	fTemp211 = (obj[dsp.fRec116 + 1] + (obj[dsp.fRec97 + 1] + (obj[dsp.fRec78 + 1] + (obj[dsp.fRec59 + 1] + (fRec117 + (fRec98 + (fRec60 + fRec79)))))));
	obj[dsp.fRec8 + 0] = (((fRec60 + obj[dsp.fRec59 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp100 + fTemp211)));
	obj[dsp.fRec9 + 0] = (((fRec79 + obj[dsp.fRec78 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp207 + fTemp211)));
	obj[dsp.fRec10 + 0] = (((fRec98 + obj[dsp.fRec97 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp208 + fTemp211)));
	obj[dsp.fRec11 + 0] = (((fRec117 + obj[dsp.fRec116 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp209 + fTemp211)));
	fTemp212 = (obj[dsp.fRec123 + 1] + (obj[dsp.fRec104 + 1] + (obj[dsp.fRec85 + 1] + (obj[dsp.fRec66 + 1] + (fRec124 + (fRec105 + (fRec67 + fRec86)))))));
	obj[dsp.fRec12 + 0] = (((fRec67 + obj[dsp.fRec66 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp100 + fTemp212)));
	obj[dsp.fRec13 + 0] = (((fRec86 + obj[dsp.fRec85 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp207 + fTemp212)));
	obj[dsp.fRec14 + 0] = (((fRec105 + obj[dsp.fRec104 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp208 + fTemp212)));
	obj[dsp.fRec15 + 0] = (((fRec124 + obj[dsp.fRec123 + 1]) + fTemp206) - (0.5000000000000000 * (fTemp209 + fTemp212)));
	obj[dsp.output0] = (0.5000000000000000 * (((((((obj[dsp.fRec1 + 0] + obj[dsp.fRec3 + 0]) + obj[dsp.fRec5 + 0]) + obj[dsp.fRec7 + 0]) + obj[dsp.fRec9 + 0]) + obj[dsp.fRec11 + 0]) + obj[dsp.fRec13 + 0]) + obj[dsp.fRec15 + 0]));
	obj[dsp.output1] = (0.5000000000000000 * (((((((obj[dsp.fRec0 + 0] + obj[dsp.fRec2 + 0]) + obj[dsp.fRec4 + 0]) + obj[dsp.fRec6 + 0]) + obj[dsp.fRec8 + 0]) + obj[dsp.fRec10 + 0]) + obj[dsp.fRec12 + 0]) + obj[dsp.fRec14 + 0]));
	obj[dsp.IOTA0] = int32(add32(obj[dsp.IOTA0], 1));
	obj[dsp.iVec1 + 1] = obj[dsp.iVec1 + 0];
	obj[dsp.iRec21 + 1] = obj[dsp.iRec21 + 0];
	obj[dsp.fVec2 + 1] = obj[dsp.fVec2 + 0];
	obj[dsp.fRec23 + 1] = obj[dsp.fRec23 + 0];
	obj[dsp.fRec24 + 1] = obj[dsp.fRec24 + 0];
	obj[dsp.fRec22 + 1] = obj[dsp.fRec22 + 0];
	obj[dsp.fRec20 + 1] = obj[dsp.fRec20 + 0];
	obj[dsp.fVec3 + 1] = obj[dsp.fVec3 + 0];
	obj[dsp.fRec18 + 1] = obj[dsp.fRec18 + 0];
	obj[dsp.fRec19 + 1] = obj[dsp.fRec19 + 0];
	obj[dsp.fRec26 + 1] = obj[dsp.fRec26 + 0];
	obj[dsp.fRec27 + 1] = obj[dsp.fRec27 + 0];
	obj[dsp.fVec4 + 1] = obj[dsp.fVec4 + 0];
	obj[dsp.fRec25 + 1] = obj[dsp.fRec25 + 0];
	obj[dsp.fRec28 + 1] = obj[dsp.fRec28 + 0];
	obj[dsp.fRec29 + 1] = obj[dsp.fRec29 + 0];
	obj[dsp.fVec6 + 1] = obj[dsp.fVec6 + 0];
	obj[dsp.fRec31 + 1] = obj[dsp.fRec31 + 0];
	obj[dsp.fRec30 + 1] = obj[dsp.fRec30 + 0];
	obj[dsp.fRec16 + 1] = obj[dsp.fRec16 + 0];
	obj[dsp.fRec35 + 1] = obj[dsp.fRec35 + 0];
	obj[dsp.fRec36 + 1] = obj[dsp.fRec36 + 0];
	obj[dsp.fVec8 + 1] = obj[dsp.fVec8 + 0];
	obj[dsp.fRec34 + 1] = obj[dsp.fRec34 + 0];
	obj[dsp.fRec37 + 1] = obj[dsp.fRec37 + 0];
	obj[dsp.fRec38 + 1] = obj[dsp.fRec38 + 0];
	obj[dsp.fRec32 + 1] = obj[dsp.fRec32 + 0];
	obj[dsp.fRec42 + 1] = obj[dsp.fRec42 + 0];
	obj[dsp.fRec43 + 1] = obj[dsp.fRec43 + 0];
	obj[dsp.fVec11 + 1] = obj[dsp.fVec11 + 0];
	obj[dsp.fRec41 + 1] = obj[dsp.fRec41 + 0];
	obj[dsp.fRec44 + 1] = obj[dsp.fRec44 + 0];
	obj[dsp.fRec45 + 1] = obj[dsp.fRec45 + 0];
	obj[dsp.fRec39 + 1] = obj[dsp.fRec39 + 0];
	obj[dsp.fRec49 + 1] = obj[dsp.fRec49 + 0];
	obj[dsp.fRec50 + 1] = obj[dsp.fRec50 + 0];
	obj[dsp.fVec14 + 1] = obj[dsp.fVec14 + 0];
	obj[dsp.fRec48 + 1] = obj[dsp.fRec48 + 0];
	obj[dsp.fRec51 + 1] = obj[dsp.fRec51 + 0];
	obj[dsp.fRec52 + 1] = obj[dsp.fRec52 + 0];
	obj[dsp.fRec46 + 1] = obj[dsp.fRec46 + 0];
	obj[dsp.fRec56 + 1] = obj[dsp.fRec56 + 0];
	obj[dsp.fRec57 + 1] = obj[dsp.fRec57 + 0];
	obj[dsp.fVec17 + 1] = obj[dsp.fVec17 + 0];
	obj[dsp.fRec55 + 1] = obj[dsp.fRec55 + 0];
	obj[dsp.fRec58 + 1] = obj[dsp.fRec58 + 0];
	obj[dsp.fRec53 + 1] = obj[dsp.fRec53 + 0];
	obj[dsp.fRec62 + 1] = obj[dsp.fRec62 + 0];
	obj[dsp.fRec63 + 1] = obj[dsp.fRec63 + 0];
	obj[dsp.fVec20 + 1] = obj[dsp.fVec20 + 0];
	obj[dsp.fRec61 + 1] = obj[dsp.fRec61 + 0];
	obj[dsp.fRec64 + 1] = obj[dsp.fRec64 + 0];
	obj[dsp.fRec65 + 1] = obj[dsp.fRec65 + 0];
	obj[dsp.fRec59 + 1] = obj[dsp.fRec59 + 0];
	obj[dsp.fRec69 + 1] = obj[dsp.fRec69 + 0];
	obj[dsp.fRec70 + 1] = obj[dsp.fRec70 + 0];
	obj[dsp.fVec23 + 1] = obj[dsp.fVec23 + 0];
	obj[dsp.fRec68 + 1] = obj[dsp.fRec68 + 0];
	obj[dsp.fRec71 + 1] = obj[dsp.fRec71 + 0];
	obj[dsp.fRec66 + 1] = obj[dsp.fRec66 + 0];
	obj[dsp.fRec75 + 1] = obj[dsp.fRec75 + 0];
	obj[dsp.fRec76 + 1] = obj[dsp.fRec76 + 0];
	obj[dsp.fVec26 + 1] = obj[dsp.fVec26 + 0];
	obj[dsp.fRec74 + 1] = obj[dsp.fRec74 + 0];
	obj[dsp.fRec77 + 1] = obj[dsp.fRec77 + 0];
	obj[dsp.fRec72 + 1] = obj[dsp.fRec72 + 0];
	obj[dsp.fRec81 + 1] = obj[dsp.fRec81 + 0];
	obj[dsp.fRec82 + 1] = obj[dsp.fRec82 + 0];
	obj[dsp.fVec29 + 1] = obj[dsp.fVec29 + 0];
	obj[dsp.fRec80 + 1] = obj[dsp.fRec80 + 0];
	obj[dsp.fRec83 + 1] = obj[dsp.fRec83 + 0];
	obj[dsp.fRec84 + 1] = obj[dsp.fRec84 + 0];
	obj[dsp.fRec78 + 1] = obj[dsp.fRec78 + 0];
	obj[dsp.fRec88 + 1] = obj[dsp.fRec88 + 0];
	obj[dsp.fRec89 + 1] = obj[dsp.fRec89 + 0];
	obj[dsp.fVec32 + 1] = obj[dsp.fVec32 + 0];
	obj[dsp.fRec87 + 1] = obj[dsp.fRec87 + 0];
	obj[dsp.fRec90 + 1] = obj[dsp.fRec90 + 0];
	obj[dsp.fRec85 + 1] = obj[dsp.fRec85 + 0];
	obj[dsp.fRec94 + 1] = obj[dsp.fRec94 + 0];
	obj[dsp.fRec95 + 1] = obj[dsp.fRec95 + 0];
	obj[dsp.fVec35 + 1] = obj[dsp.fVec35 + 0];
	obj[dsp.fRec93 + 1] = obj[dsp.fRec93 + 0];
	obj[dsp.fRec96 + 1] = obj[dsp.fRec96 + 0];
	obj[dsp.fRec91 + 1] = obj[dsp.fRec91 + 0];
	obj[dsp.fRec100 + 1] = obj[dsp.fRec100 + 0];
	obj[dsp.fRec101 + 1] = obj[dsp.fRec101 + 0];
	obj[dsp.fVec38 + 1] = obj[dsp.fVec38 + 0];
	obj[dsp.fRec99 + 1] = obj[dsp.fRec99 + 0];
	obj[dsp.fRec102 + 1] = obj[dsp.fRec102 + 0];
	obj[dsp.fRec103 + 1] = obj[dsp.fRec103 + 0];
	obj[dsp.fRec97 + 1] = obj[dsp.fRec97 + 0];
	obj[dsp.fRec107 + 1] = obj[dsp.fRec107 + 0];
	obj[dsp.fRec108 + 1] = obj[dsp.fRec108 + 0];
	obj[dsp.fVec41 + 1] = obj[dsp.fVec41 + 0];
	obj[dsp.fRec106 + 1] = obj[dsp.fRec106 + 0];
	obj[dsp.fRec109 + 1] = obj[dsp.fRec109 + 0];
	obj[dsp.fRec104 + 1] = obj[dsp.fRec104 + 0];
	obj[dsp.fRec113 + 1] = obj[dsp.fRec113 + 0];
	obj[dsp.fRec114 + 1] = obj[dsp.fRec114 + 0];
	obj[dsp.fVec44 + 1] = obj[dsp.fVec44 + 0];
	obj[dsp.fRec112 + 1] = obj[dsp.fRec112 + 0];
	obj[dsp.fRec115 + 1] = obj[dsp.fRec115 + 0];
	obj[dsp.fRec110 + 1] = obj[dsp.fRec110 + 0];
	obj[dsp.fRec119 + 1] = obj[dsp.fRec119 + 0];
	obj[dsp.fRec120 + 1] = obj[dsp.fRec120 + 0];
	obj[dsp.fVec47 + 1] = obj[dsp.fVec47 + 0];
	obj[dsp.fRec118 + 1] = obj[dsp.fRec118 + 0];
	obj[dsp.fRec121 + 1] = obj[dsp.fRec121 + 0];
	obj[dsp.fRec122 + 1] = obj[dsp.fRec122 + 0];
	obj[dsp.fRec116 + 1] = obj[dsp.fRec116 + 0];
	obj[dsp.fRec126 + 1] = obj[dsp.fRec126 + 0];
	obj[dsp.fRec127 + 1] = obj[dsp.fRec127 + 0];
	obj[dsp.fVec50 + 1] = obj[dsp.fVec50 + 0];
	obj[dsp.fRec125 + 1] = obj[dsp.fRec125 + 0];
	obj[dsp.fRec128 + 1] = obj[dsp.fRec128 + 0];
	obj[dsp.fRec123 + 1] = obj[dsp.fRec123 + 0];
	obj[dsp.fRec0 + 2] = obj[dsp.fRec0 + 1];
	obj[dsp.fRec0 + 1] = obj[dsp.fRec0 + 0];
	obj[dsp.fRec1 + 2] = obj[dsp.fRec1 + 1];
	obj[dsp.fRec1 + 1] = obj[dsp.fRec1 + 0];
	obj[dsp.fRec2 + 2] = obj[dsp.fRec2 + 1];
	obj[dsp.fRec2 + 1] = obj[dsp.fRec2 + 0];
	obj[dsp.fRec3 + 2] = obj[dsp.fRec3 + 1];
	obj[dsp.fRec3 + 1] = obj[dsp.fRec3 + 0];
	obj[dsp.fRec4 + 2] = obj[dsp.fRec4 + 1];
	obj[dsp.fRec4 + 1] = obj[dsp.fRec4 + 0];
	obj[dsp.fRec5 + 2] = obj[dsp.fRec5 + 1];
	obj[dsp.fRec5 + 1] = obj[dsp.fRec5 + 0];
	obj[dsp.fRec6 + 2] = obj[dsp.fRec6 + 1];
	obj[dsp.fRec6 + 1] = obj[dsp.fRec6 + 0];
	obj[dsp.fRec7 + 2] = obj[dsp.fRec7 + 1];
	obj[dsp.fRec7 + 1] = obj[dsp.fRec7 + 0];
	obj[dsp.fRec8 + 2] = obj[dsp.fRec8 + 1];
	obj[dsp.fRec8 + 1] = obj[dsp.fRec8 + 0];
	obj[dsp.fRec9 + 2] = obj[dsp.fRec9 + 1];
	obj[dsp.fRec9 + 1] = obj[dsp.fRec9 + 0];
	obj[dsp.fRec10 + 2] = obj[dsp.fRec10 + 1];
	obj[dsp.fRec10 + 1] = obj[dsp.fRec10 + 0];
	obj[dsp.fRec11 + 2] = obj[dsp.fRec11 + 1];
	obj[dsp.fRec11 + 1] = obj[dsp.fRec11 + 0];
	obj[dsp.fRec12 + 2] = obj[dsp.fRec12 + 1];
	obj[dsp.fRec12 + 1] = obj[dsp.fRec12 + 0];
	obj[dsp.fRec13 + 2] = obj[dsp.fRec13 + 1];
	obj[dsp.fRec13 + 1] = obj[dsp.fRec13 + 0];
	obj[dsp.fRec14 + 2] = obj[dsp.fRec14 + 1];
	obj[dsp.fRec14 + 1] = obj[dsp.fRec14 + 0];
	obj[dsp.fRec15 + 2] = obj[dsp.fRec15 + 1];
	obj[dsp.fRec15 + 1] = obj[dsp.fRec15 + 0];
	voice_idx += 1;
);
spl0 = get_dsp(0)[dsp.output0];
spl1 = get_dsp(0)[dsp.output1];

