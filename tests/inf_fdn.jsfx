/*
 * Generated by 'faust -lang jsfx -inpl -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0'
 */
desc: Effect mydsp
desc: aanl.lib/name "Faust Antialiased Nonlinearities"
desc: aanl.lib/version "1.3.0"
desc: analyzers.lib/name "Faust Analyzer Library"
desc: analyzers.lib/version "1.2.0"
desc: basics.lib/name "Faust Basic Element Library"
desc: basics.lib/sAndH:author "Romain Michon"
desc: basics.lib/tabulateNd "Copyright (C) 2023 Bart Brouns <bart@magnetophon.nl>"
desc: basics.lib/version "1.17.1"
desc: compile_options "-lang jsfx -inpl -ct 1 -es 1 -mcd 16 -mdd 1024 -mdy 33 -single -ftz 0"
desc: delays.lib/name "Faust Delay Library"
desc: delays.lib/version "1.1.0"
desc: filename "verb_inf_fdn.dsp"
desc: filters.lib/filterbank:author "Julius O. Smith III"
desc: filters.lib/filterbank:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/filterbank:license "MIT-style STK-4.3 license"
desc: filters.lib/fir:author "Julius O. Smith III"
desc: filters.lib/fir:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/fir:license "MIT-style STK-4.3 license"
desc: filters.lib/highpass:author "Julius O. Smith III"
desc: filters.lib/highpass:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/iir:author "Julius O. Smith III"
desc: filters.lib/iir:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/iir:license "MIT-style STK-4.3 license"
desc: filters.lib/lowpass0_highpass1 "MIT-style STK-4.3 license"
desc: contributor "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/lowpass0_highpass1:author "Julius O. Smith III"
desc: filters.lib/lowpass:author "Julius O. Smith III"
desc: filters.lib/lowpass:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/lowpass:license "MIT-style STK-4.3 license"
desc: filters.lib/name "Faust Filters Library"
desc: filters.lib/tf1:author "Julius O. Smith III"
desc: filters.lib/tf1:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/tf1:license "MIT-style STK-4.3 license"
desc: filters.lib/tf1s:author "Julius O. Smith III"
desc: filters.lib/tf1s:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/tf1s:license "MIT-style STK-4.3 license"
desc: filters.lib/tf2:author "Julius O. Smith III"
desc: filters.lib/tf2:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/tf2:license "MIT-style STK-4.3 license"
desc: filters.lib/tf2s:author "Julius O. Smith III"
desc: filters.lib/tf2s:copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>"
desc: filters.lib/tf2s:license "MIT-style STK-4.3 license"
desc: filters.lib/version "1.3.0"
desc: maths.lib/author "GRAME"
desc: maths.lib/copyright "GRAME"
desc: maths.lib/license "LGPL with exception"
desc: maths.lib/name "Faust Math Library"
desc: maths.lib/version "2.8.0"
desc: name "verb_inf_fdn"
desc: platform.lib/name "Generic Platform Library"
desc: platform.lib/version "1.3.0"
desc: reverbs.lib/name "Faust Reverb Library"
desc: reverbs.lib/version "1.3.0"
desc: signals.lib/name "Faust Signal Routing Library"
desc: signals.lib/version "1.5.0"


slider1:fHslider1=0<-70,12,0.001>hslider_ingain0 
slider2:fHslider2=0.3<0,1,0.001>hslider_mix0 
slider3:fHslider0=0<-70,12,0.001>hslider_outgain0 

in_pin:input0
in_pin:input1
out_pin:output0
out_pin:output1

@init

// GLOBAL Functions 

/*
 * Initialise memory allocator 
 */
function init_memory() instance(index) (
 index = 0;
);
/*
 *Allocate memory 
 */
function alloc_memory(amount) instance(index) local(i) (
 i = index; 
 index += amount; 
 i;
);
MEMORY.init_memory();

function zeros(address, amount) (
 i = 0;
 loop(amount, address[i] = 0; i+=1;);
 address;
);
function int32(x) ( 
 x >= 2147483648 ? x - 4294967296 : x; 
); 
function uint32(x) ( 
 x < 0 ? x + 4294967296 : x; 
); 
function add32(x, y) ( 
 (x += y) >= 4294967296 ? x - 4294967296 : x; 
); 
function sub32(x, y) ( 
 (x -= y) < 0 ? x + 4294967296 : x; 
); 
function mul32(x, y) local(a, b) ( 
 x = uint32(x); 
 y = uint32(y); 
 a = x & 0xFFFF; 
 b = y & 0xFFFF; 
 y = ((((y / 65536)|0) * a + ((x / 65536)|0) * b) & 0xFFFF) * 65536 + a * b; 
 y >= 4294967296 ? y - 4294967296 : y; 
); 
function ftoi32(x) ( 
 x <= -1 ? ((min(max(-2147483648, x), -1)|0) + 4294967296;) : (min(max(0, x), 4294967295)|0;); 
);function limit(x, min, max) (
   (x < min) ? min : (x > max) ? max : x; 
);
function midi_scale(x, min, max, step) (
   diff = (max - min);
   min + (diff * (x / 127));
);
function mtof(mid) (
   440 * exp(0.0577622645 * (mid - 69));
);
/*
 * Mathematical functions 
 */
function exp2(arg) (pow(2, n)); 
function exp10(arg) (pow(10, n)); 
function log2(x) (log(x) / log(2)); 
function round(N) (0|(N+sign(N)*0.5)); 
function rint(x) (round(int32(x))); 
function mod(a,b) (a%b); 
function remainder(x,y) (
 x - (round(x/y)*y);
);
function fmod(x,y) ( 
 y = abs(y); 
 res = remainder(abs(x), y); 
 (res < 0) ? res += y; 
 (x < 0) ? -res : res; 
);
/* 
 * MIDI Constants 
 */ 
CC = 0xB0; 
NOTE_ON = 0x90; 
NOTE_OFF = 0x80; 

num_inputs = 2;
num_outputs = 2;

nvoices = 1;
voice_idx = 0; 

function get_dsp(index) (
  dsp.memory + dsp.size * index 
);

// DSP struct memory layout 
dsp.memory = MEMORY.alloc_memory(0);
dsp.size = 443074;
dsp.fSampleRate = 0;
dsp.fConst1 = 1;
dsp.fConst2 = 2;
dsp.fHslider0 = 3;
dsp.fRec0 = 4;
dsp.fHslider1 = 6;
dsp.fRec1 = 7;
dsp.fHslider2 = 9;
dsp.iRec21 = 10;
dsp.fConst3 = 12;
dsp.fConst4 = 13;
dsp.fVec0 = 14;
dsp.fConst5 = 16;
dsp.fRec23 = 17;
dsp.fRec24 = 19;
dsp.fRec22 = 21;
dsp.fRec20 = 23;
dsp.fVec1 = 25;
dsp.fConst6 = 27;
dsp.fRec18 = 28;
dsp.fRec19 = 30;
dsp.fConst9 = 32;
dsp.fConst10 = 33;
dsp.fConst11 = 34;
dsp.fConst12 = 35;
dsp.fConst14 = 36;
dsp.fConst15 = 37;
dsp.fConst17 = 38;
dsp.fConst18 = 39;
dsp.fConst19 = 40;
dsp.fRec27 = 41;
dsp.fRec26 = 43;
dsp.fConst20 = 46;
dsp.fRec25 = 47;
dsp.fRec30 = 50;
dsp.fRec29 = 52;
dsp.fRec28 = 55;
dsp.fRec33 = 58;
dsp.fRec32 = 60;
dsp.fRec31 = 63;
dsp.fRec36 = 66;
dsp.fRec35 = 68;
dsp.fRec34 = 71;
dsp.fRec39 = 74;
dsp.fRec38 = 76;
dsp.fRec37 = 79;
dsp.fRec42 = 82;
dsp.fRec41 = 84;
dsp.fRec40 = 87;
dsp.fRec45 = 90;
dsp.fRec44 = 92;
dsp.fRec43 = 95;
dsp.fRec48 = 98;
dsp.fRec47 = 100;
dsp.fRec46 = 103;
dsp.fRec51 = 106;
dsp.fRec50 = 108;
dsp.fRec49 = 111;
dsp.fRec54 = 114;
dsp.fRec53 = 116;
dsp.fRec52 = 119;
dsp.fRec57 = 122;
dsp.fRec56 = 124;
dsp.fRec55 = 127;
dsp.fRec60 = 130;
dsp.fRec59 = 132;
dsp.fRec58 = 135;
dsp.fRec63 = 138;
dsp.fRec62 = 140;
dsp.fRec61 = 143;
dsp.fRec66 = 146;
dsp.fRec65 = 148;
dsp.fRec64 = 151;
dsp.fRec69 = 154;
dsp.fRec68 = 156;
dsp.fRec67 = 159;
dsp.fRec72 = 162;
dsp.fRec71 = 164;
dsp.fRec70 = 167;
dsp.fRec75 = 170;
dsp.fRec74 = 172;
dsp.fRec73 = 175;
dsp.fRec78 = 178;
dsp.fRec77 = 180;
dsp.fRec76 = 183;
dsp.fRec81 = 186;
dsp.fRec80 = 188;
dsp.fRec79 = 191;
dsp.fRec84 = 194;
dsp.fRec83 = 196;
dsp.fRec82 = 199;
dsp.fRec87 = 202;
dsp.fRec86 = 204;
dsp.fRec85 = 207;
dsp.fRec90 = 210;
dsp.fRec89 = 212;
dsp.fRec88 = 215;
dsp.fRec93 = 218;
dsp.fRec92 = 220;
dsp.fRec91 = 223;
dsp.fRec96 = 226;
dsp.fRec95 = 228;
dsp.fRec94 = 231;
dsp.fRec99 = 234;
dsp.fRec98 = 236;
dsp.fRec97 = 239;
dsp.fRec102 = 242;
dsp.fRec101 = 244;
dsp.fRec100 = 247;
dsp.fRec105 = 250;
dsp.fRec104 = 252;
dsp.fRec103 = 255;
dsp.fRec108 = 258;
dsp.fRec107 = 260;
dsp.fRec106 = 263;
dsp.fRec111 = 266;
dsp.fRec110 = 268;
dsp.fRec109 = 271;
dsp.fRec114 = 274;
dsp.fRec113 = 276;
dsp.fRec112 = 279;
dsp.fRec117 = 282;
dsp.fRec116 = 284;
dsp.fRec115 = 287;
dsp.fRec120 = 290;
dsp.fRec119 = 292;
dsp.fRec118 = 295;
dsp.fConst21 = 298;
dsp.IOTA0 = 299;
dsp.fVec2 = 300;
dsp.iConst22 = 8492;
dsp.fRec2 = 8493;
dsp.fVec3 = 8496;
dsp.iConst23 = 16688;
dsp.fRec3 = 16689;
dsp.fVec4 = 16692;
dsp.iConst24 = 24884;
dsp.fRec4 = 24885;
dsp.fVec5 = 24888;
dsp.iConst25 = 33080;
dsp.fRec5 = 33081;
dsp.fVec6 = 33084;
dsp.iConst26 = 41276;
dsp.fRec6 = 41277;
dsp.fVec7 = 41280;
dsp.iConst27 = 49472;
dsp.fRec7 = 49473;
dsp.fVec8 = 49476;
dsp.iConst28 = 57668;
dsp.fRec8 = 57669;
dsp.fVec9 = 57672;
dsp.iConst29 = 74056;
dsp.fRec9 = 74057;
dsp.fVec10 = 74060;
dsp.iConst30 = 90444;
dsp.fRec10 = 90445;
dsp.fVec11 = 90448;
dsp.iConst31 = 106832;
dsp.fRec11 = 106833;
dsp.fVec12 = 106836;
dsp.iConst32 = 123220;
dsp.fRec12 = 123221;
dsp.fVec13 = 123224;
dsp.iConst33 = 139608;
dsp.fRec13 = 139609;
dsp.fVec14 = 139612;
dsp.iConst34 = 155996;
dsp.fRec14 = 155997;
dsp.fVec15 = 156000;
dsp.iConst35 = 172384;
dsp.fRec15 = 172385;
dsp.fVec16 = 172388;
dsp.iConst36 = 188772;
dsp.fRec16 = 188773;
dsp.fVec17 = 188776;
dsp.iConst37 = 205160;
dsp.fRec17 = 205161;
dsp.fVec18 = 205164;
dsp.fRec141 = 205166;
dsp.fRec142 = 205168;
dsp.fRec140 = 205170;
dsp.fRec139 = 205172;
dsp.fVec19 = 205174;
dsp.fRec137 = 205176;
dsp.fRec138 = 205178;
dsp.fRec145 = 205180;
dsp.fRec144 = 205182;
dsp.fRec143 = 205185;
dsp.fRec148 = 205188;
dsp.fRec147 = 205190;
dsp.fRec146 = 205193;
dsp.fRec151 = 205196;
dsp.fRec150 = 205198;
dsp.fRec149 = 205201;
dsp.fRec154 = 205204;
dsp.fRec153 = 205206;
dsp.fRec152 = 205209;
dsp.fRec157 = 205212;
dsp.fRec156 = 205214;
dsp.fRec155 = 205217;
dsp.fRec160 = 205220;
dsp.fRec159 = 205222;
dsp.fRec158 = 205225;
dsp.fRec163 = 205228;
dsp.fRec162 = 205230;
dsp.fRec161 = 205233;
dsp.fRec166 = 205236;
dsp.fRec165 = 205238;
dsp.fRec164 = 205241;
dsp.fRec169 = 205244;
dsp.fRec168 = 205246;
dsp.fRec167 = 205249;
dsp.fRec172 = 205252;
dsp.fRec171 = 205254;
dsp.fRec170 = 205257;
dsp.fRec175 = 205260;
dsp.fRec174 = 205262;
dsp.fRec173 = 205265;
dsp.fRec178 = 205268;
dsp.fRec177 = 205270;
dsp.fRec176 = 205273;
dsp.fRec181 = 205276;
dsp.fRec180 = 205278;
dsp.fRec179 = 205281;
dsp.fRec184 = 205284;
dsp.fRec183 = 205286;
dsp.fRec182 = 205289;
dsp.fRec187 = 205292;
dsp.fRec186 = 205294;
dsp.fRec185 = 205297;
dsp.fRec190 = 205300;
dsp.fRec189 = 205302;
dsp.fRec188 = 205305;
dsp.fRec193 = 205308;
dsp.fRec192 = 205310;
dsp.fRec191 = 205313;
dsp.fRec196 = 205316;
dsp.fRec195 = 205318;
dsp.fRec194 = 205321;
dsp.fRec199 = 205324;
dsp.fRec198 = 205326;
dsp.fRec197 = 205329;
dsp.fRec202 = 205332;
dsp.fRec201 = 205334;
dsp.fRec200 = 205337;
dsp.fRec205 = 205340;
dsp.fRec204 = 205342;
dsp.fRec203 = 205345;
dsp.fRec208 = 205348;
dsp.fRec207 = 205350;
dsp.fRec206 = 205353;
dsp.fRec211 = 205356;
dsp.fRec210 = 205358;
dsp.fRec209 = 205361;
dsp.fRec214 = 205364;
dsp.fRec213 = 205366;
dsp.fRec212 = 205369;
dsp.fRec217 = 205372;
dsp.fRec216 = 205374;
dsp.fRec215 = 205377;
dsp.fRec220 = 205380;
dsp.fRec219 = 205382;
dsp.fRec218 = 205385;
dsp.fRec223 = 205388;
dsp.fRec222 = 205390;
dsp.fRec221 = 205393;
dsp.fRec226 = 205396;
dsp.fRec225 = 205398;
dsp.fRec224 = 205401;
dsp.fRec229 = 205404;
dsp.fRec228 = 205406;
dsp.fRec227 = 205409;
dsp.fRec232 = 205412;
dsp.fRec231 = 205414;
dsp.fRec230 = 205417;
dsp.fRec235 = 205420;
dsp.fRec234 = 205422;
dsp.fRec233 = 205425;
dsp.fRec238 = 205428;
dsp.fRec237 = 205430;
dsp.fRec236 = 205433;
dsp.fVec20 = 205436;
dsp.iConst38 = 213628;
dsp.fRec121 = 213629;
dsp.fVec21 = 213632;
dsp.iConst39 = 221824;
dsp.fRec122 = 221825;
dsp.fVec22 = 221828;
dsp.iConst40 = 230020;
dsp.fRec123 = 230021;
dsp.fVec23 = 230024;
dsp.iConst41 = 246408;
dsp.fRec124 = 246409;
dsp.fVec24 = 246412;
dsp.iConst42 = 262796;
dsp.fRec125 = 262797;
dsp.fVec25 = 262800;
dsp.iConst43 = 279184;
dsp.fRec126 = 279185;
dsp.fVec26 = 279188;
dsp.iConst44 = 295572;
dsp.fRec127 = 295573;
dsp.fVec27 = 295576;
dsp.iConst45 = 311960;
dsp.fRec128 = 311961;
dsp.fVec28 = 311964;
dsp.iConst46 = 328348;
dsp.fRec129 = 328349;
dsp.fVec29 = 328352;
dsp.iConst47 = 344736;
dsp.fRec130 = 344737;
dsp.fVec30 = 344740;
dsp.iConst48 = 361124;
dsp.fRec131 = 361125;
dsp.fVec31 = 361128;
dsp.iConst49 = 377512;
dsp.fRec132 = 377513;
dsp.fVec32 = 377516;
dsp.iConst50 = 393900;
dsp.fRec133 = 393901;
dsp.fVec33 = 393904;
dsp.iConst51 = 410288;
dsp.fRec134 = 410289;
dsp.fVec34 = 410292;
dsp.iConst52 = 426676;
dsp.fRec135 = 426677;
dsp.fVec35 = 426680;
dsp.iConst53 = 443064;
dsp.fRec136 = 443065;
dsp.fSlow0 = 443068;
dsp.fSlow1 = 443069;
dsp.fSlow2 = 443070;
dsp.fSlow3 = 443071;
dsp.output0 = 443072; 
dsp.output1 = 443073; 

function create_instances() (
	voice_idx = 0;
	while(voice_idx < nvoices) (
		obj = MEMORY.alloc_memory(dsp.size);
		memset( obj + dsp.fRec0, 0, 2);
		memset( obj + dsp.fRec1, 0, 2);
		memset( obj + dsp.iRec21, 0, 2);
		memset( obj + dsp.fVec0, 0, 2);
		memset( obj + dsp.fRec23, 0, 2);
		memset( obj + dsp.fRec24, 0, 2);
		memset( obj + dsp.fRec22, 0, 2);
		memset( obj + dsp.fRec20, 0, 2);
		memset( obj + dsp.fVec1, 0, 2);
		memset( obj + dsp.fRec18, 0, 2);
		memset( obj + dsp.fRec19, 0, 2);
		memset( obj + dsp.fRec27, 0, 2);
		memset( obj + dsp.fRec26, 0, 3);
		memset( obj + dsp.fRec25, 0, 3);
		memset( obj + dsp.fRec30, 0, 2);
		memset( obj + dsp.fRec29, 0, 3);
		memset( obj + dsp.fRec28, 0, 3);
		memset( obj + dsp.fRec33, 0, 2);
		memset( obj + dsp.fRec32, 0, 3);
		memset( obj + dsp.fRec31, 0, 3);
		memset( obj + dsp.fRec36, 0, 2);
		memset( obj + dsp.fRec35, 0, 3);
		memset( obj + dsp.fRec34, 0, 3);
		memset( obj + dsp.fRec39, 0, 2);
		memset( obj + dsp.fRec38, 0, 3);
		memset( obj + dsp.fRec37, 0, 3);
		memset( obj + dsp.fRec42, 0, 2);
		memset( obj + dsp.fRec41, 0, 3);
		memset( obj + dsp.fRec40, 0, 3);
		memset( obj + dsp.fRec45, 0, 2);
		memset( obj + dsp.fRec44, 0, 3);
		memset( obj + dsp.fRec43, 0, 3);
		memset( obj + dsp.fRec48, 0, 2);
		memset( obj + dsp.fRec47, 0, 3);
		memset( obj + dsp.fRec46, 0, 3);
		memset( obj + dsp.fRec51, 0, 2);
		memset( obj + dsp.fRec50, 0, 3);
		memset( obj + dsp.fRec49, 0, 3);
		memset( obj + dsp.fRec54, 0, 2);
		memset( obj + dsp.fRec53, 0, 3);
		memset( obj + dsp.fRec52, 0, 3);
		memset( obj + dsp.fRec57, 0, 2);
		memset( obj + dsp.fRec56, 0, 3);
		memset( obj + dsp.fRec55, 0, 3);
		memset( obj + dsp.fRec60, 0, 2);
		memset( obj + dsp.fRec59, 0, 3);
		memset( obj + dsp.fRec58, 0, 3);
		memset( obj + dsp.fRec63, 0, 2);
		memset( obj + dsp.fRec62, 0, 3);
		memset( obj + dsp.fRec61, 0, 3);
		memset( obj + dsp.fRec66, 0, 2);
		memset( obj + dsp.fRec65, 0, 3);
		memset( obj + dsp.fRec64, 0, 3);
		memset( obj + dsp.fRec69, 0, 2);
		memset( obj + dsp.fRec68, 0, 3);
		memset( obj + dsp.fRec67, 0, 3);
		memset( obj + dsp.fRec72, 0, 2);
		memset( obj + dsp.fRec71, 0, 3);
		memset( obj + dsp.fRec70, 0, 3);
		memset( obj + dsp.fRec75, 0, 2);
		memset( obj + dsp.fRec74, 0, 3);
		memset( obj + dsp.fRec73, 0, 3);
		memset( obj + dsp.fRec78, 0, 2);
		memset( obj + dsp.fRec77, 0, 3);
		memset( obj + dsp.fRec76, 0, 3);
		memset( obj + dsp.fRec81, 0, 2);
		memset( obj + dsp.fRec80, 0, 3);
		memset( obj + dsp.fRec79, 0, 3);
		memset( obj + dsp.fRec84, 0, 2);
		memset( obj + dsp.fRec83, 0, 3);
		memset( obj + dsp.fRec82, 0, 3);
		memset( obj + dsp.fRec87, 0, 2);
		memset( obj + dsp.fRec86, 0, 3);
		memset( obj + dsp.fRec85, 0, 3);
		memset( obj + dsp.fRec90, 0, 2);
		memset( obj + dsp.fRec89, 0, 3);
		memset( obj + dsp.fRec88, 0, 3);
		memset( obj + dsp.fRec93, 0, 2);
		memset( obj + dsp.fRec92, 0, 3);
		memset( obj + dsp.fRec91, 0, 3);
		memset( obj + dsp.fRec96, 0, 2);
		memset( obj + dsp.fRec95, 0, 3);
		memset( obj + dsp.fRec94, 0, 3);
		memset( obj + dsp.fRec99, 0, 2);
		memset( obj + dsp.fRec98, 0, 3);
		memset( obj + dsp.fRec97, 0, 3);
		memset( obj + dsp.fRec102, 0, 2);
		memset( obj + dsp.fRec101, 0, 3);
		memset( obj + dsp.fRec100, 0, 3);
		memset( obj + dsp.fRec105, 0, 2);
		memset( obj + dsp.fRec104, 0, 3);
		memset( obj + dsp.fRec103, 0, 3);
		memset( obj + dsp.fRec108, 0, 2);
		memset( obj + dsp.fRec107, 0, 3);
		memset( obj + dsp.fRec106, 0, 3);
		memset( obj + dsp.fRec111, 0, 2);
		memset( obj + dsp.fRec110, 0, 3);
		memset( obj + dsp.fRec109, 0, 3);
		memset( obj + dsp.fRec114, 0, 2);
		memset( obj + dsp.fRec113, 0, 3);
		memset( obj + dsp.fRec112, 0, 3);
		memset( obj + dsp.fRec117, 0, 2);
		memset( obj + dsp.fRec116, 0, 3);
		memset( obj + dsp.fRec115, 0, 3);
		memset( obj + dsp.fRec120, 0, 2);
		memset( obj + dsp.fRec119, 0, 3);
		memset( obj + dsp.fRec118, 0, 3);
		memset( obj + dsp.fVec2, 0, 8192);
		memset( obj + dsp.fRec2, 0, 3);
		memset( obj + dsp.fVec3, 0, 8192);
		memset( obj + dsp.fRec3, 0, 3);
		memset( obj + dsp.fVec4, 0, 8192);
		memset( obj + dsp.fRec4, 0, 3);
		memset( obj + dsp.fVec5, 0, 8192);
		memset( obj + dsp.fRec5, 0, 3);
		memset( obj + dsp.fVec6, 0, 8192);
		memset( obj + dsp.fRec6, 0, 3);
		memset( obj + dsp.fVec7, 0, 8192);
		memset( obj + dsp.fRec7, 0, 3);
		memset( obj + dsp.fVec8, 0, 8192);
		memset( obj + dsp.fRec8, 0, 3);
		memset( obj + dsp.fVec9, 0, 16384);
		memset( obj + dsp.fRec9, 0, 3);
		memset( obj + dsp.fVec10, 0, 16384);
		memset( obj + dsp.fRec10, 0, 3);
		memset( obj + dsp.fVec11, 0, 16384);
		memset( obj + dsp.fRec11, 0, 3);
		memset( obj + dsp.fVec12, 0, 16384);
		memset( obj + dsp.fRec12, 0, 3);
		memset( obj + dsp.fVec13, 0, 16384);
		memset( obj + dsp.fRec13, 0, 3);
		memset( obj + dsp.fVec14, 0, 16384);
		memset( obj + dsp.fRec14, 0, 3);
		memset( obj + dsp.fVec15, 0, 16384);
		memset( obj + dsp.fRec15, 0, 3);
		memset( obj + dsp.fVec16, 0, 16384);
		memset( obj + dsp.fRec16, 0, 3);
		memset( obj + dsp.fVec17, 0, 16384);
		memset( obj + dsp.fRec17, 0, 3);
		memset( obj + dsp.fVec18, 0, 2);
		memset( obj + dsp.fRec141, 0, 2);
		memset( obj + dsp.fRec142, 0, 2);
		memset( obj + dsp.fRec140, 0, 2);
		memset( obj + dsp.fRec139, 0, 2);
		memset( obj + dsp.fVec19, 0, 2);
		memset( obj + dsp.fRec137, 0, 2);
		memset( obj + dsp.fRec138, 0, 2);
		memset( obj + dsp.fRec145, 0, 2);
		memset( obj + dsp.fRec144, 0, 3);
		memset( obj + dsp.fRec143, 0, 3);
		memset( obj + dsp.fRec148, 0, 2);
		memset( obj + dsp.fRec147, 0, 3);
		memset( obj + dsp.fRec146, 0, 3);
		memset( obj + dsp.fRec151, 0, 2);
		memset( obj + dsp.fRec150, 0, 3);
		memset( obj + dsp.fRec149, 0, 3);
		memset( obj + dsp.fRec154, 0, 2);
		memset( obj + dsp.fRec153, 0, 3);
		memset( obj + dsp.fRec152, 0, 3);
		memset( obj + dsp.fRec157, 0, 2);
		memset( obj + dsp.fRec156, 0, 3);
		memset( obj + dsp.fRec155, 0, 3);
		memset( obj + dsp.fRec160, 0, 2);
		memset( obj + dsp.fRec159, 0, 3);
		memset( obj + dsp.fRec158, 0, 3);
		memset( obj + dsp.fRec163, 0, 2);
		memset( obj + dsp.fRec162, 0, 3);
		memset( obj + dsp.fRec161, 0, 3);
		memset( obj + dsp.fRec166, 0, 2);
		memset( obj + dsp.fRec165, 0, 3);
		memset( obj + dsp.fRec164, 0, 3);
		memset( obj + dsp.fRec169, 0, 2);
		memset( obj + dsp.fRec168, 0, 3);
		memset( obj + dsp.fRec167, 0, 3);
		memset( obj + dsp.fRec172, 0, 2);
		memset( obj + dsp.fRec171, 0, 3);
		memset( obj + dsp.fRec170, 0, 3);
		memset( obj + dsp.fRec175, 0, 2);
		memset( obj + dsp.fRec174, 0, 3);
		memset( obj + dsp.fRec173, 0, 3);
		memset( obj + dsp.fRec178, 0, 2);
		memset( obj + dsp.fRec177, 0, 3);
		memset( obj + dsp.fRec176, 0, 3);
		memset( obj + dsp.fRec181, 0, 2);
		memset( obj + dsp.fRec180, 0, 3);
		memset( obj + dsp.fRec179, 0, 3);
		memset( obj + dsp.fRec184, 0, 2);
		memset( obj + dsp.fRec183, 0, 3);
		memset( obj + dsp.fRec182, 0, 3);
		memset( obj + dsp.fRec187, 0, 2);
		memset( obj + dsp.fRec186, 0, 3);
		memset( obj + dsp.fRec185, 0, 3);
		memset( obj + dsp.fRec190, 0, 2);
		memset( obj + dsp.fRec189, 0, 3);
		memset( obj + dsp.fRec188, 0, 3);
		memset( obj + dsp.fRec193, 0, 2);
		memset( obj + dsp.fRec192, 0, 3);
		memset( obj + dsp.fRec191, 0, 3);
		memset( obj + dsp.fRec196, 0, 2);
		memset( obj + dsp.fRec195, 0, 3);
		memset( obj + dsp.fRec194, 0, 3);
		memset( obj + dsp.fRec199, 0, 2);
		memset( obj + dsp.fRec198, 0, 3);
		memset( obj + dsp.fRec197, 0, 3);
		memset( obj + dsp.fRec202, 0, 2);
		memset( obj + dsp.fRec201, 0, 3);
		memset( obj + dsp.fRec200, 0, 3);
		memset( obj + dsp.fRec205, 0, 2);
		memset( obj + dsp.fRec204, 0, 3);
		memset( obj + dsp.fRec203, 0, 3);
		memset( obj + dsp.fRec208, 0, 2);
		memset( obj + dsp.fRec207, 0, 3);
		memset( obj + dsp.fRec206, 0, 3);
		memset( obj + dsp.fRec211, 0, 2);
		memset( obj + dsp.fRec210, 0, 3);
		memset( obj + dsp.fRec209, 0, 3);
		memset( obj + dsp.fRec214, 0, 2);
		memset( obj + dsp.fRec213, 0, 3);
		memset( obj + dsp.fRec212, 0, 3);
		memset( obj + dsp.fRec217, 0, 2);
		memset( obj + dsp.fRec216, 0, 3);
		memset( obj + dsp.fRec215, 0, 3);
		memset( obj + dsp.fRec220, 0, 2);
		memset( obj + dsp.fRec219, 0, 3);
		memset( obj + dsp.fRec218, 0, 3);
		memset( obj + dsp.fRec223, 0, 2);
		memset( obj + dsp.fRec222, 0, 3);
		memset( obj + dsp.fRec221, 0, 3);
		memset( obj + dsp.fRec226, 0, 2);
		memset( obj + dsp.fRec225, 0, 3);
		memset( obj + dsp.fRec224, 0, 3);
		memset( obj + dsp.fRec229, 0, 2);
		memset( obj + dsp.fRec228, 0, 3);
		memset( obj + dsp.fRec227, 0, 3);
		memset( obj + dsp.fRec232, 0, 2);
		memset( obj + dsp.fRec231, 0, 3);
		memset( obj + dsp.fRec230, 0, 3);
		memset( obj + dsp.fRec235, 0, 2);
		memset( obj + dsp.fRec234, 0, 3);
		memset( obj + dsp.fRec233, 0, 3);
		memset( obj + dsp.fRec238, 0, 2);
		memset( obj + dsp.fRec237, 0, 3);
		memset( obj + dsp.fRec236, 0, 3);
		memset( obj + dsp.fVec20, 0, 8192);
		memset( obj + dsp.fRec121, 0, 3);
		memset( obj + dsp.fVec21, 0, 8192);
		memset( obj + dsp.fRec122, 0, 3);
		memset( obj + dsp.fVec22, 0, 8192);
		memset( obj + dsp.fRec123, 0, 3);
		memset( obj + dsp.fVec23, 0, 16384);
		memset( obj + dsp.fRec124, 0, 3);
		memset( obj + dsp.fVec24, 0, 16384);
		memset( obj + dsp.fRec125, 0, 3);
		memset( obj + dsp.fVec25, 0, 16384);
		memset( obj + dsp.fRec126, 0, 3);
		memset( obj + dsp.fVec26, 0, 16384);
		memset( obj + dsp.fRec127, 0, 3);
		memset( obj + dsp.fVec27, 0, 16384);
		memset( obj + dsp.fRec128, 0, 3);
		memset( obj + dsp.fVec28, 0, 16384);
		memset( obj + dsp.fRec129, 0, 3);
		memset( obj + dsp.fVec29, 0, 16384);
		memset( obj + dsp.fRec130, 0, 3);
		memset( obj + dsp.fVec30, 0, 16384);
		memset( obj + dsp.fRec131, 0, 3);
		memset( obj + dsp.fVec31, 0, 16384);
		memset( obj + dsp.fRec132, 0, 3);
		memset( obj + dsp.fVec32, 0, 16384);
		memset( obj + dsp.fRec133, 0, 3);
		memset( obj + dsp.fVec33, 0, 16384);
		memset( obj + dsp.fRec134, 0, 3);
		memset( obj + dsp.fVec34, 0, 16384);
		memset( obj + dsp.fRec135, 0, 3);
		memset( obj + dsp.fVec35, 0, 16384);
		memset( obj + dsp.fRec136, 0, 3);
		voice_idx += 1; 
	);
);

function init_instances() (
	voice_idx = 0; 
	while(voice_idx < nvoices) ( 
		obj = dsp.memory + dsp.size * voice_idx;
		
		l0 = 0;
		
		while(l0 < 2)
		(
			obj[dsp.fRec0 + l0] = 0.0000000000000000;
			l0 = int32(add32(l0, 1));
		
		);
		l1 = 0;
		
		while(l1 < 2)
		(
			obj[dsp.fRec1 + l1] = 0.0000000000000000;
			l1 = int32(add32(l1, 1));
		
		);
		l2 = 0;
		
		while(l2 < 2)
		(
			obj[dsp.iRec21 + l2] = 0;
			l2 = int32(add32(l2, 1));
		
		);
		l3 = 0;
		
		while(l3 < 2)
		(
			obj[dsp.fVec0 + l3] = 0.0000000000000000;
			l3 = int32(add32(l3, 1));
		
		);
		l4 = 0;
		
		while(l4 < 2)
		(
			obj[dsp.fRec23 + l4] = 0.0000000000000000;
			l4 = int32(add32(l4, 1));
		
		);
		l5 = 0;
		
		while(l5 < 2)
		(
			obj[dsp.fRec24 + l5] = 0.0000000000000000;
			l5 = int32(add32(l5, 1));
		
		);
		l6 = 0;
		
		while(l6 < 2)
		(
			obj[dsp.fRec22 + l6] = 0.0000000000000000;
			l6 = int32(add32(l6, 1));
		
		);
		l7 = 0;
		
		while(l7 < 2)
		(
			obj[dsp.fRec20 + l7] = 0.0000000000000000;
			l7 = int32(add32(l7, 1));
		
		);
		l8 = 0;
		
		while(l8 < 2)
		(
			obj[dsp.fVec1 + l8] = 0.0000000000000000;
			l8 = int32(add32(l8, 1));
		
		);
		l9 = 0;
		
		while(l9 < 2)
		(
			obj[dsp.fRec18 + l9] = 0.0000000000000000;
			l9 = int32(add32(l9, 1));
		
		);
		l10 = 0;
		
		while(l10 < 2)
		(
			obj[dsp.fRec19 + l10] = 0.0000000000000000;
			l10 = int32(add32(l10, 1));
		
		);
		l11 = 0;
		
		while(l11 < 2)
		(
			obj[dsp.fRec27 + l11] = 0.0000000000000000;
			l11 = int32(add32(l11, 1));
		
		);
		l12 = 0;
		
		while(l12 < 3)
		(
			obj[dsp.fRec26 + l12] = 0.0000000000000000;
			l12 = int32(add32(l12, 1));
		
		);
		l13 = 0;
		
		while(l13 < 3)
		(
			obj[dsp.fRec25 + l13] = 0.0000000000000000;
			l13 = int32(add32(l13, 1));
		
		);
		l14 = 0;
		
		while(l14 < 2)
		(
			obj[dsp.fRec30 + l14] = 0.0000000000000000;
			l14 = int32(add32(l14, 1));
		
		);
		l15 = 0;
		
		while(l15 < 3)
		(
			obj[dsp.fRec29 + l15] = 0.0000000000000000;
			l15 = int32(add32(l15, 1));
		
		);
		l16 = 0;
		
		while(l16 < 3)
		(
			obj[dsp.fRec28 + l16] = 0.0000000000000000;
			l16 = int32(add32(l16, 1));
		
		);
		l17 = 0;
		
		while(l17 < 2)
		(
			obj[dsp.fRec33 + l17] = 0.0000000000000000;
			l17 = int32(add32(l17, 1));
		
		);
		l18 = 0;
		
		while(l18 < 3)
		(
			obj[dsp.fRec32 + l18] = 0.0000000000000000;
			l18 = int32(add32(l18, 1));
		
		);
		l19 = 0;
		
		while(l19 < 3)
		(
			obj[dsp.fRec31 + l19] = 0.0000000000000000;
			l19 = int32(add32(l19, 1));
		
		);
		l20 = 0;
		
		while(l20 < 2)
		(
			obj[dsp.fRec36 + l20] = 0.0000000000000000;
			l20 = int32(add32(l20, 1));
		
		);
		l21 = 0;
		
		while(l21 < 3)
		(
			obj[dsp.fRec35 + l21] = 0.0000000000000000;
			l21 = int32(add32(l21, 1));
		
		);
		l22 = 0;
		
		while(l22 < 3)
		(
			obj[dsp.fRec34 + l22] = 0.0000000000000000;
			l22 = int32(add32(l22, 1));
		
		);
		l23 = 0;
		
		while(l23 < 2)
		(
			obj[dsp.fRec39 + l23] = 0.0000000000000000;
			l23 = int32(add32(l23, 1));
		
		);
		l24 = 0;
		
		while(l24 < 3)
		(
			obj[dsp.fRec38 + l24] = 0.0000000000000000;
			l24 = int32(add32(l24, 1));
		
		);
		l25 = 0;
		
		while(l25 < 3)
		(
			obj[dsp.fRec37 + l25] = 0.0000000000000000;
			l25 = int32(add32(l25, 1));
		
		);
		l26 = 0;
		
		while(l26 < 2)
		(
			obj[dsp.fRec42 + l26] = 0.0000000000000000;
			l26 = int32(add32(l26, 1));
		
		);
		l27 = 0;
		
		while(l27 < 3)
		(
			obj[dsp.fRec41 + l27] = 0.0000000000000000;
			l27 = int32(add32(l27, 1));
		
		);
		l28 = 0;
		
		while(l28 < 3)
		(
			obj[dsp.fRec40 + l28] = 0.0000000000000000;
			l28 = int32(add32(l28, 1));
		
		);
		l29 = 0;
		
		while(l29 < 2)
		(
			obj[dsp.fRec45 + l29] = 0.0000000000000000;
			l29 = int32(add32(l29, 1));
		
		);
		l30 = 0;
		
		while(l30 < 3)
		(
			obj[dsp.fRec44 + l30] = 0.0000000000000000;
			l30 = int32(add32(l30, 1));
		
		);
		l31 = 0;
		
		while(l31 < 3)
		(
			obj[dsp.fRec43 + l31] = 0.0000000000000000;
			l31 = int32(add32(l31, 1));
		
		);
		l32 = 0;
		
		while(l32 < 2)
		(
			obj[dsp.fRec48 + l32] = 0.0000000000000000;
			l32 = int32(add32(l32, 1));
		
		);
		l33 = 0;
		
		while(l33 < 3)
		(
			obj[dsp.fRec47 + l33] = 0.0000000000000000;
			l33 = int32(add32(l33, 1));
		
		);
		l34 = 0;
		
		while(l34 < 3)
		(
			obj[dsp.fRec46 + l34] = 0.0000000000000000;
			l34 = int32(add32(l34, 1));
		
		);
		l35 = 0;
		
		while(l35 < 2)
		(
			obj[dsp.fRec51 + l35] = 0.0000000000000000;
			l35 = int32(add32(l35, 1));
		
		);
		l36 = 0;
		
		while(l36 < 3)
		(
			obj[dsp.fRec50 + l36] = 0.0000000000000000;
			l36 = int32(add32(l36, 1));
		
		);
		l37 = 0;
		
		while(l37 < 3)
		(
			obj[dsp.fRec49 + l37] = 0.0000000000000000;
			l37 = int32(add32(l37, 1));
		
		);
		l38 = 0;
		
		while(l38 < 2)
		(
			obj[dsp.fRec54 + l38] = 0.0000000000000000;
			l38 = int32(add32(l38, 1));
		
		);
		l39 = 0;
		
		while(l39 < 3)
		(
			obj[dsp.fRec53 + l39] = 0.0000000000000000;
			l39 = int32(add32(l39, 1));
		
		);
		l40 = 0;
		
		while(l40 < 3)
		(
			obj[dsp.fRec52 + l40] = 0.0000000000000000;
			l40 = int32(add32(l40, 1));
		
		);
		l41 = 0;
		
		while(l41 < 2)
		(
			obj[dsp.fRec57 + l41] = 0.0000000000000000;
			l41 = int32(add32(l41, 1));
		
		);
		l42 = 0;
		
		while(l42 < 3)
		(
			obj[dsp.fRec56 + l42] = 0.0000000000000000;
			l42 = int32(add32(l42, 1));
		
		);
		l43 = 0;
		
		while(l43 < 3)
		(
			obj[dsp.fRec55 + l43] = 0.0000000000000000;
			l43 = int32(add32(l43, 1));
		
		);
		l44 = 0;
		
		while(l44 < 2)
		(
			obj[dsp.fRec60 + l44] = 0.0000000000000000;
			l44 = int32(add32(l44, 1));
		
		);
		l45 = 0;
		
		while(l45 < 3)
		(
			obj[dsp.fRec59 + l45] = 0.0000000000000000;
			l45 = int32(add32(l45, 1));
		
		);
		l46 = 0;
		
		while(l46 < 3)
		(
			obj[dsp.fRec58 + l46] = 0.0000000000000000;
			l46 = int32(add32(l46, 1));
		
		);
		l47 = 0;
		
		while(l47 < 2)
		(
			obj[dsp.fRec63 + l47] = 0.0000000000000000;
			l47 = int32(add32(l47, 1));
		
		);
		l48 = 0;
		
		while(l48 < 3)
		(
			obj[dsp.fRec62 + l48] = 0.0000000000000000;
			l48 = int32(add32(l48, 1));
		
		);
		l49 = 0;
		
		while(l49 < 3)
		(
			obj[dsp.fRec61 + l49] = 0.0000000000000000;
			l49 = int32(add32(l49, 1));
		
		);
		l50 = 0;
		
		while(l50 < 2)
		(
			obj[dsp.fRec66 + l50] = 0.0000000000000000;
			l50 = int32(add32(l50, 1));
		
		);
		l51 = 0;
		
		while(l51 < 3)
		(
			obj[dsp.fRec65 + l51] = 0.0000000000000000;
			l51 = int32(add32(l51, 1));
		
		);
		l52 = 0;
		
		while(l52 < 3)
		(
			obj[dsp.fRec64 + l52] = 0.0000000000000000;
			l52 = int32(add32(l52, 1));
		
		);
		l53 = 0;
		
		while(l53 < 2)
		(
			obj[dsp.fRec69 + l53] = 0.0000000000000000;
			l53 = int32(add32(l53, 1));
		
		);
		l54 = 0;
		
		while(l54 < 3)
		(
			obj[dsp.fRec68 + l54] = 0.0000000000000000;
			l54 = int32(add32(l54, 1));
		
		);
		l55 = 0;
		
		while(l55 < 3)
		(
			obj[dsp.fRec67 + l55] = 0.0000000000000000;
			l55 = int32(add32(l55, 1));
		
		);
		l56 = 0;
		
		while(l56 < 2)
		(
			obj[dsp.fRec72 + l56] = 0.0000000000000000;
			l56 = int32(add32(l56, 1));
		
		);
		l57 = 0;
		
		while(l57 < 3)
		(
			obj[dsp.fRec71 + l57] = 0.0000000000000000;
			l57 = int32(add32(l57, 1));
		
		);
		l58 = 0;
		
		while(l58 < 3)
		(
			obj[dsp.fRec70 + l58] = 0.0000000000000000;
			l58 = int32(add32(l58, 1));
		
		);
		l59 = 0;
		
		while(l59 < 2)
		(
			obj[dsp.fRec75 + l59] = 0.0000000000000000;
			l59 = int32(add32(l59, 1));
		
		);
		l60 = 0;
		
		while(l60 < 3)
		(
			obj[dsp.fRec74 + l60] = 0.0000000000000000;
			l60 = int32(add32(l60, 1));
		
		);
		l61 = 0;
		
		while(l61 < 3)
		(
			obj[dsp.fRec73 + l61] = 0.0000000000000000;
			l61 = int32(add32(l61, 1));
		
		);
		l62 = 0;
		
		while(l62 < 2)
		(
			obj[dsp.fRec78 + l62] = 0.0000000000000000;
			l62 = int32(add32(l62, 1));
		
		);
		l63 = 0;
		
		while(l63 < 3)
		(
			obj[dsp.fRec77 + l63] = 0.0000000000000000;
			l63 = int32(add32(l63, 1));
		
		);
		l64 = 0;
		
		while(l64 < 3)
		(
			obj[dsp.fRec76 + l64] = 0.0000000000000000;
			l64 = int32(add32(l64, 1));
		
		);
		l65 = 0;
		
		while(l65 < 2)
		(
			obj[dsp.fRec81 + l65] = 0.0000000000000000;
			l65 = int32(add32(l65, 1));
		
		);
		l66 = 0;
		
		while(l66 < 3)
		(
			obj[dsp.fRec80 + l66] = 0.0000000000000000;
			l66 = int32(add32(l66, 1));
		
		);
		l67 = 0;
		
		while(l67 < 3)
		(
			obj[dsp.fRec79 + l67] = 0.0000000000000000;
			l67 = int32(add32(l67, 1));
		
		);
		l68 = 0;
		
		while(l68 < 2)
		(
			obj[dsp.fRec84 + l68] = 0.0000000000000000;
			l68 = int32(add32(l68, 1));
		
		);
		l69 = 0;
		
		while(l69 < 3)
		(
			obj[dsp.fRec83 + l69] = 0.0000000000000000;
			l69 = int32(add32(l69, 1));
		
		);
		l70 = 0;
		
		while(l70 < 3)
		(
			obj[dsp.fRec82 + l70] = 0.0000000000000000;
			l70 = int32(add32(l70, 1));
		
		);
		l71 = 0;
		
		while(l71 < 2)
		(
			obj[dsp.fRec87 + l71] = 0.0000000000000000;
			l71 = int32(add32(l71, 1));
		
		);
		l72 = 0;
		
		while(l72 < 3)
		(
			obj[dsp.fRec86 + l72] = 0.0000000000000000;
			l72 = int32(add32(l72, 1));
		
		);
		l73 = 0;
		
		while(l73 < 3)
		(
			obj[dsp.fRec85 + l73] = 0.0000000000000000;
			l73 = int32(add32(l73, 1));
		
		);
		l74 = 0;
		
		while(l74 < 2)
		(
			obj[dsp.fRec90 + l74] = 0.0000000000000000;
			l74 = int32(add32(l74, 1));
		
		);
		l75 = 0;
		
		while(l75 < 3)
		(
			obj[dsp.fRec89 + l75] = 0.0000000000000000;
			l75 = int32(add32(l75, 1));
		
		);
		l76 = 0;
		
		while(l76 < 3)
		(
			obj[dsp.fRec88 + l76] = 0.0000000000000000;
			l76 = int32(add32(l76, 1));
		
		);
		l77 = 0;
		
		while(l77 < 2)
		(
			obj[dsp.fRec93 + l77] = 0.0000000000000000;
			l77 = int32(add32(l77, 1));
		
		);
		l78 = 0;
		
		while(l78 < 3)
		(
			obj[dsp.fRec92 + l78] = 0.0000000000000000;
			l78 = int32(add32(l78, 1));
		
		);
		l79 = 0;
		
		while(l79 < 3)
		(
			obj[dsp.fRec91 + l79] = 0.0000000000000000;
			l79 = int32(add32(l79, 1));
		
		);
		l80 = 0;
		
		while(l80 < 2)
		(
			obj[dsp.fRec96 + l80] = 0.0000000000000000;
			l80 = int32(add32(l80, 1));
		
		);
		l81 = 0;
		
		while(l81 < 3)
		(
			obj[dsp.fRec95 + l81] = 0.0000000000000000;
			l81 = int32(add32(l81, 1));
		
		);
		l82 = 0;
		
		while(l82 < 3)
		(
			obj[dsp.fRec94 + l82] = 0.0000000000000000;
			l82 = int32(add32(l82, 1));
		
		);
		l83 = 0;
		
		while(l83 < 2)
		(
			obj[dsp.fRec99 + l83] = 0.0000000000000000;
			l83 = int32(add32(l83, 1));
		
		);
		l84 = 0;
		
		while(l84 < 3)
		(
			obj[dsp.fRec98 + l84] = 0.0000000000000000;
			l84 = int32(add32(l84, 1));
		
		);
		l85 = 0;
		
		while(l85 < 3)
		(
			obj[dsp.fRec97 + l85] = 0.0000000000000000;
			l85 = int32(add32(l85, 1));
		
		);
		l86 = 0;
		
		while(l86 < 2)
		(
			obj[dsp.fRec102 + l86] = 0.0000000000000000;
			l86 = int32(add32(l86, 1));
		
		);
		l87 = 0;
		
		while(l87 < 3)
		(
			obj[dsp.fRec101 + l87] = 0.0000000000000000;
			l87 = int32(add32(l87, 1));
		
		);
		l88 = 0;
		
		while(l88 < 3)
		(
			obj[dsp.fRec100 + l88] = 0.0000000000000000;
			l88 = int32(add32(l88, 1));
		
		);
		l89 = 0;
		
		while(l89 < 2)
		(
			obj[dsp.fRec105 + l89] = 0.0000000000000000;
			l89 = int32(add32(l89, 1));
		
		);
		l90 = 0;
		
		while(l90 < 3)
		(
			obj[dsp.fRec104 + l90] = 0.0000000000000000;
			l90 = int32(add32(l90, 1));
		
		);
		l91 = 0;
		
		while(l91 < 3)
		(
			obj[dsp.fRec103 + l91] = 0.0000000000000000;
			l91 = int32(add32(l91, 1));
		
		);
		l92 = 0;
		
		while(l92 < 2)
		(
			obj[dsp.fRec108 + l92] = 0.0000000000000000;
			l92 = int32(add32(l92, 1));
		
		);
		l93 = 0;
		
		while(l93 < 3)
		(
			obj[dsp.fRec107 + l93] = 0.0000000000000000;
			l93 = int32(add32(l93, 1));
		
		);
		l94 = 0;
		
		while(l94 < 3)
		(
			obj[dsp.fRec106 + l94] = 0.0000000000000000;
			l94 = int32(add32(l94, 1));
		
		);
		l95 = 0;
		
		while(l95 < 2)
		(
			obj[dsp.fRec111 + l95] = 0.0000000000000000;
			l95 = int32(add32(l95, 1));
		
		);
		l96 = 0;
		
		while(l96 < 3)
		(
			obj[dsp.fRec110 + l96] = 0.0000000000000000;
			l96 = int32(add32(l96, 1));
		
		);
		l97 = 0;
		
		while(l97 < 3)
		(
			obj[dsp.fRec109 + l97] = 0.0000000000000000;
			l97 = int32(add32(l97, 1));
		
		);
		l98 = 0;
		
		while(l98 < 2)
		(
			obj[dsp.fRec114 + l98] = 0.0000000000000000;
			l98 = int32(add32(l98, 1));
		
		);
		l99 = 0;
		
		while(l99 < 3)
		(
			obj[dsp.fRec113 + l99] = 0.0000000000000000;
			l99 = int32(add32(l99, 1));
		
		);
		l100 = 0;
		
		while(l100 < 3)
		(
			obj[dsp.fRec112 + l100] = 0.0000000000000000;
			l100 = int32(add32(l100, 1));
		
		);
		l101 = 0;
		
		while(l101 < 2)
		(
			obj[dsp.fRec117 + l101] = 0.0000000000000000;
			l101 = int32(add32(l101, 1));
		
		);
		l102 = 0;
		
		while(l102 < 3)
		(
			obj[dsp.fRec116 + l102] = 0.0000000000000000;
			l102 = int32(add32(l102, 1));
		
		);
		l103 = 0;
		
		while(l103 < 3)
		(
			obj[dsp.fRec115 + l103] = 0.0000000000000000;
			l103 = int32(add32(l103, 1));
		
		);
		l104 = 0;
		
		while(l104 < 2)
		(
			obj[dsp.fRec120 + l104] = 0.0000000000000000;
			l104 = int32(add32(l104, 1));
		
		);
		l105 = 0;
		
		while(l105 < 3)
		(
			obj[dsp.fRec119 + l105] = 0.0000000000000000;
			l105 = int32(add32(l105, 1));
		
		);
		l106 = 0;
		
		while(l106 < 3)
		(
			obj[dsp.fRec118 + l106] = 0.0000000000000000;
			l106 = int32(add32(l106, 1));
		
		);obj[dsp.IOTA0] = 0;
		
		l107 = 0;
		
		while(l107 < 8192)
		(
			obj[dsp.fVec2 + l107] = 0.0000000000000000;
			l107 = int32(add32(l107, 1));
		
		);
		l108 = 0;
		
		while(l108 < 3)
		(
			obj[dsp.fRec2 + l108] = 0.0000000000000000;
			l108 = int32(add32(l108, 1));
		
		);
		l109 = 0;
		
		while(l109 < 8192)
		(
			obj[dsp.fVec3 + l109] = 0.0000000000000000;
			l109 = int32(add32(l109, 1));
		
		);
		l110 = 0;
		
		while(l110 < 3)
		(
			obj[dsp.fRec3 + l110] = 0.0000000000000000;
			l110 = int32(add32(l110, 1));
		
		);
		l111 = 0;
		
		while(l111 < 8192)
		(
			obj[dsp.fVec4 + l111] = 0.0000000000000000;
			l111 = int32(add32(l111, 1));
		
		);
		l112 = 0;
		
		while(l112 < 3)
		(
			obj[dsp.fRec4 + l112] = 0.0000000000000000;
			l112 = int32(add32(l112, 1));
		
		);
		l113 = 0;
		
		while(l113 < 8192)
		(
			obj[dsp.fVec5 + l113] = 0.0000000000000000;
			l113 = int32(add32(l113, 1));
		
		);
		l114 = 0;
		
		while(l114 < 3)
		(
			obj[dsp.fRec5 + l114] = 0.0000000000000000;
			l114 = int32(add32(l114, 1));
		
		);
		l115 = 0;
		
		while(l115 < 8192)
		(
			obj[dsp.fVec6 + l115] = 0.0000000000000000;
			l115 = int32(add32(l115, 1));
		
		);
		l116 = 0;
		
		while(l116 < 3)
		(
			obj[dsp.fRec6 + l116] = 0.0000000000000000;
			l116 = int32(add32(l116, 1));
		
		);
		l117 = 0;
		
		while(l117 < 8192)
		(
			obj[dsp.fVec7 + l117] = 0.0000000000000000;
			l117 = int32(add32(l117, 1));
		
		);
		l118 = 0;
		
		while(l118 < 3)
		(
			obj[dsp.fRec7 + l118] = 0.0000000000000000;
			l118 = int32(add32(l118, 1));
		
		);
		l119 = 0;
		
		while(l119 < 8192)
		(
			obj[dsp.fVec8 + l119] = 0.0000000000000000;
			l119 = int32(add32(l119, 1));
		
		);
		l120 = 0;
		
		while(l120 < 3)
		(
			obj[dsp.fRec8 + l120] = 0.0000000000000000;
			l120 = int32(add32(l120, 1));
		
		);
		l121 = 0;
		
		while(l121 < 16384)
		(
			obj[dsp.fVec9 + l121] = 0.0000000000000000;
			l121 = int32(add32(l121, 1));
		
		);
		l122 = 0;
		
		while(l122 < 3)
		(
			obj[dsp.fRec9 + l122] = 0.0000000000000000;
			l122 = int32(add32(l122, 1));
		
		);
		l123 = 0;
		
		while(l123 < 16384)
		(
			obj[dsp.fVec10 + l123] = 0.0000000000000000;
			l123 = int32(add32(l123, 1));
		
		);
		l124 = 0;
		
		while(l124 < 3)
		(
			obj[dsp.fRec10 + l124] = 0.0000000000000000;
			l124 = int32(add32(l124, 1));
		
		);
		l125 = 0;
		
		while(l125 < 16384)
		(
			obj[dsp.fVec11 + l125] = 0.0000000000000000;
			l125 = int32(add32(l125, 1));
		
		);
		l126 = 0;
		
		while(l126 < 3)
		(
			obj[dsp.fRec11 + l126] = 0.0000000000000000;
			l126 = int32(add32(l126, 1));
		
		);
		l127 = 0;
		
		while(l127 < 16384)
		(
			obj[dsp.fVec12 + l127] = 0.0000000000000000;
			l127 = int32(add32(l127, 1));
		
		);
		l128 = 0;
		
		while(l128 < 3)
		(
			obj[dsp.fRec12 + l128] = 0.0000000000000000;
			l128 = int32(add32(l128, 1));
		
		);
		l129 = 0;
		
		while(l129 < 16384)
		(
			obj[dsp.fVec13 + l129] = 0.0000000000000000;
			l129 = int32(add32(l129, 1));
		
		);
		l130 = 0;
		
		while(l130 < 3)
		(
			obj[dsp.fRec13 + l130] = 0.0000000000000000;
			l130 = int32(add32(l130, 1));
		
		);
		l131 = 0;
		
		while(l131 < 16384)
		(
			obj[dsp.fVec14 + l131] = 0.0000000000000000;
			l131 = int32(add32(l131, 1));
		
		);
		l132 = 0;
		
		while(l132 < 3)
		(
			obj[dsp.fRec14 + l132] = 0.0000000000000000;
			l132 = int32(add32(l132, 1));
		
		);
		l133 = 0;
		
		while(l133 < 16384)
		(
			obj[dsp.fVec15 + l133] = 0.0000000000000000;
			l133 = int32(add32(l133, 1));
		
		);
		l134 = 0;
		
		while(l134 < 3)
		(
			obj[dsp.fRec15 + l134] = 0.0000000000000000;
			l134 = int32(add32(l134, 1));
		
		);
		l135 = 0;
		
		while(l135 < 16384)
		(
			obj[dsp.fVec16 + l135] = 0.0000000000000000;
			l135 = int32(add32(l135, 1));
		
		);
		l136 = 0;
		
		while(l136 < 3)
		(
			obj[dsp.fRec16 + l136] = 0.0000000000000000;
			l136 = int32(add32(l136, 1));
		
		);
		l137 = 0;
		
		while(l137 < 16384)
		(
			obj[dsp.fVec17 + l137] = 0.0000000000000000;
			l137 = int32(add32(l137, 1));
		
		);
		l138 = 0;
		
		while(l138 < 3)
		(
			obj[dsp.fRec17 + l138] = 0.0000000000000000;
			l138 = int32(add32(l138, 1));
		
		);
		l139 = 0;
		
		while(l139 < 2)
		(
			obj[dsp.fVec18 + l139] = 0.0000000000000000;
			l139 = int32(add32(l139, 1));
		
		);
		l140 = 0;
		
		while(l140 < 2)
		(
			obj[dsp.fRec141 + l140] = 0.0000000000000000;
			l140 = int32(add32(l140, 1));
		
		);
		l141 = 0;
		
		while(l141 < 2)
		(
			obj[dsp.fRec142 + l141] = 0.0000000000000000;
			l141 = int32(add32(l141, 1));
		
		);
		l142 = 0;
		
		while(l142 < 2)
		(
			obj[dsp.fRec140 + l142] = 0.0000000000000000;
			l142 = int32(add32(l142, 1));
		
		);
		l143 = 0;
		
		while(l143 < 2)
		(
			obj[dsp.fRec139 + l143] = 0.0000000000000000;
			l143 = int32(add32(l143, 1));
		
		);
		l144 = 0;
		
		while(l144 < 2)
		(
			obj[dsp.fVec19 + l144] = 0.0000000000000000;
			l144 = int32(add32(l144, 1));
		
		);
		l145 = 0;
		
		while(l145 < 2)
		(
			obj[dsp.fRec137 + l145] = 0.0000000000000000;
			l145 = int32(add32(l145, 1));
		
		);
		l146 = 0;
		
		while(l146 < 2)
		(
			obj[dsp.fRec138 + l146] = 0.0000000000000000;
			l146 = int32(add32(l146, 1));
		
		);
		l147 = 0;
		
		while(l147 < 2)
		(
			obj[dsp.fRec145 + l147] = 0.0000000000000000;
			l147 = int32(add32(l147, 1));
		
		);
		l148 = 0;
		
		while(l148 < 3)
		(
			obj[dsp.fRec144 + l148] = 0.0000000000000000;
			l148 = int32(add32(l148, 1));
		
		);
		l149 = 0;
		
		while(l149 < 3)
		(
			obj[dsp.fRec143 + l149] = 0.0000000000000000;
			l149 = int32(add32(l149, 1));
		
		);
		l150 = 0;
		
		while(l150 < 2)
		(
			obj[dsp.fRec148 + l150] = 0.0000000000000000;
			l150 = int32(add32(l150, 1));
		
		);
		l151 = 0;
		
		while(l151 < 3)
		(
			obj[dsp.fRec147 + l151] = 0.0000000000000000;
			l151 = int32(add32(l151, 1));
		
		);
		l152 = 0;
		
		while(l152 < 3)
		(
			obj[dsp.fRec146 + l152] = 0.0000000000000000;
			l152 = int32(add32(l152, 1));
		
		);
		l153 = 0;
		
		while(l153 < 2)
		(
			obj[dsp.fRec151 + l153] = 0.0000000000000000;
			l153 = int32(add32(l153, 1));
		
		);
		l154 = 0;
		
		while(l154 < 3)
		(
			obj[dsp.fRec150 + l154] = 0.0000000000000000;
			l154 = int32(add32(l154, 1));
		
		);
		l155 = 0;
		
		while(l155 < 3)
		(
			obj[dsp.fRec149 + l155] = 0.0000000000000000;
			l155 = int32(add32(l155, 1));
		
		);
		l156 = 0;
		
		while(l156 < 2)
		(
			obj[dsp.fRec154 + l156] = 0.0000000000000000;
			l156 = int32(add32(l156, 1));
		
		);
		l157 = 0;
		
		while(l157 < 3)
		(
			obj[dsp.fRec153 + l157] = 0.0000000000000000;
			l157 = int32(add32(l157, 1));
		
		);
		l158 = 0;
		
		while(l158 < 3)
		(
			obj[dsp.fRec152 + l158] = 0.0000000000000000;
			l158 = int32(add32(l158, 1));
		
		);
		l159 = 0;
		
		while(l159 < 2)
		(
			obj[dsp.fRec157 + l159] = 0.0000000000000000;
			l159 = int32(add32(l159, 1));
		
		);
		l160 = 0;
		
		while(l160 < 3)
		(
			obj[dsp.fRec156 + l160] = 0.0000000000000000;
			l160 = int32(add32(l160, 1));
		
		);
		l161 = 0;
		
		while(l161 < 3)
		(
			obj[dsp.fRec155 + l161] = 0.0000000000000000;
			l161 = int32(add32(l161, 1));
		
		);
		l162 = 0;
		
		while(l162 < 2)
		(
			obj[dsp.fRec160 + l162] = 0.0000000000000000;
			l162 = int32(add32(l162, 1));
		
		);
		l163 = 0;
		
		while(l163 < 3)
		(
			obj[dsp.fRec159 + l163] = 0.0000000000000000;
			l163 = int32(add32(l163, 1));
		
		);
		l164 = 0;
		
		while(l164 < 3)
		(
			obj[dsp.fRec158 + l164] = 0.0000000000000000;
			l164 = int32(add32(l164, 1));
		
		);
		l165 = 0;
		
		while(l165 < 2)
		(
			obj[dsp.fRec163 + l165] = 0.0000000000000000;
			l165 = int32(add32(l165, 1));
		
		);
		l166 = 0;
		
		while(l166 < 3)
		(
			obj[dsp.fRec162 + l166] = 0.0000000000000000;
			l166 = int32(add32(l166, 1));
		
		);
		l167 = 0;
		
		while(l167 < 3)
		(
			obj[dsp.fRec161 + l167] = 0.0000000000000000;
			l167 = int32(add32(l167, 1));
		
		);
		l168 = 0;
		
		while(l168 < 2)
		(
			obj[dsp.fRec166 + l168] = 0.0000000000000000;
			l168 = int32(add32(l168, 1));
		
		);
		l169 = 0;
		
		while(l169 < 3)
		(
			obj[dsp.fRec165 + l169] = 0.0000000000000000;
			l169 = int32(add32(l169, 1));
		
		);
		l170 = 0;
		
		while(l170 < 3)
		(
			obj[dsp.fRec164 + l170] = 0.0000000000000000;
			l170 = int32(add32(l170, 1));
		
		);
		l171 = 0;
		
		while(l171 < 2)
		(
			obj[dsp.fRec169 + l171] = 0.0000000000000000;
			l171 = int32(add32(l171, 1));
		
		);
		l172 = 0;
		
		while(l172 < 3)
		(
			obj[dsp.fRec168 + l172] = 0.0000000000000000;
			l172 = int32(add32(l172, 1));
		
		);
		l173 = 0;
		
		while(l173 < 3)
		(
			obj[dsp.fRec167 + l173] = 0.0000000000000000;
			l173 = int32(add32(l173, 1));
		
		);
		l174 = 0;
		
		while(l174 < 2)
		(
			obj[dsp.fRec172 + l174] = 0.0000000000000000;
			l174 = int32(add32(l174, 1));
		
		);
		l175 = 0;
		
		while(l175 < 3)
		(
			obj[dsp.fRec171 + l175] = 0.0000000000000000;
			l175 = int32(add32(l175, 1));
		
		);
		l176 = 0;
		
		while(l176 < 3)
		(
			obj[dsp.fRec170 + l176] = 0.0000000000000000;
			l176 = int32(add32(l176, 1));
		
		);
		l177 = 0;
		
		while(l177 < 2)
		(
			obj[dsp.fRec175 + l177] = 0.0000000000000000;
			l177 = int32(add32(l177, 1));
		
		);
		l178 = 0;
		
		while(l178 < 3)
		(
			obj[dsp.fRec174 + l178] = 0.0000000000000000;
			l178 = int32(add32(l178, 1));
		
		);
		l179 = 0;
		
		while(l179 < 3)
		(
			obj[dsp.fRec173 + l179] = 0.0000000000000000;
			l179 = int32(add32(l179, 1));
		
		);
		l180 = 0;
		
		while(l180 < 2)
		(
			obj[dsp.fRec178 + l180] = 0.0000000000000000;
			l180 = int32(add32(l180, 1));
		
		);
		l181 = 0;
		
		while(l181 < 3)
		(
			obj[dsp.fRec177 + l181] = 0.0000000000000000;
			l181 = int32(add32(l181, 1));
		
		);
		l182 = 0;
		
		while(l182 < 3)
		(
			obj[dsp.fRec176 + l182] = 0.0000000000000000;
			l182 = int32(add32(l182, 1));
		
		);
		l183 = 0;
		
		while(l183 < 2)
		(
			obj[dsp.fRec181 + l183] = 0.0000000000000000;
			l183 = int32(add32(l183, 1));
		
		);
		l184 = 0;
		
		while(l184 < 3)
		(
			obj[dsp.fRec180 + l184] = 0.0000000000000000;
			l184 = int32(add32(l184, 1));
		
		);
		l185 = 0;
		
		while(l185 < 3)
		(
			obj[dsp.fRec179 + l185] = 0.0000000000000000;
			l185 = int32(add32(l185, 1));
		
		);
		l186 = 0;
		
		while(l186 < 2)
		(
			obj[dsp.fRec184 + l186] = 0.0000000000000000;
			l186 = int32(add32(l186, 1));
		
		);
		l187 = 0;
		
		while(l187 < 3)
		(
			obj[dsp.fRec183 + l187] = 0.0000000000000000;
			l187 = int32(add32(l187, 1));
		
		);
		l188 = 0;
		
		while(l188 < 3)
		(
			obj[dsp.fRec182 + l188] = 0.0000000000000000;
			l188 = int32(add32(l188, 1));
		
		);
		l189 = 0;
		
		while(l189 < 2)
		(
			obj[dsp.fRec187 + l189] = 0.0000000000000000;
			l189 = int32(add32(l189, 1));
		
		);
		l190 = 0;
		
		while(l190 < 3)
		(
			obj[dsp.fRec186 + l190] = 0.0000000000000000;
			l190 = int32(add32(l190, 1));
		
		);
		l191 = 0;
		
		while(l191 < 3)
		(
			obj[dsp.fRec185 + l191] = 0.0000000000000000;
			l191 = int32(add32(l191, 1));
		
		);
		l192 = 0;
		
		while(l192 < 2)
		(
			obj[dsp.fRec190 + l192] = 0.0000000000000000;
			l192 = int32(add32(l192, 1));
		
		);
		l193 = 0;
		
		while(l193 < 3)
		(
			obj[dsp.fRec189 + l193] = 0.0000000000000000;
			l193 = int32(add32(l193, 1));
		
		);
		l194 = 0;
		
		while(l194 < 3)
		(
			obj[dsp.fRec188 + l194] = 0.0000000000000000;
			l194 = int32(add32(l194, 1));
		
		);
		l195 = 0;
		
		while(l195 < 2)
		(
			obj[dsp.fRec193 + l195] = 0.0000000000000000;
			l195 = int32(add32(l195, 1));
		
		);
		l196 = 0;
		
		while(l196 < 3)
		(
			obj[dsp.fRec192 + l196] = 0.0000000000000000;
			l196 = int32(add32(l196, 1));
		
		);
		l197 = 0;
		
		while(l197 < 3)
		(
			obj[dsp.fRec191 + l197] = 0.0000000000000000;
			l197 = int32(add32(l197, 1));
		
		);
		l198 = 0;
		
		while(l198 < 2)
		(
			obj[dsp.fRec196 + l198] = 0.0000000000000000;
			l198 = int32(add32(l198, 1));
		
		);
		l199 = 0;
		
		while(l199 < 3)
		(
			obj[dsp.fRec195 + l199] = 0.0000000000000000;
			l199 = int32(add32(l199, 1));
		
		);
		l200 = 0;
		
		while(l200 < 3)
		(
			obj[dsp.fRec194 + l200] = 0.0000000000000000;
			l200 = int32(add32(l200, 1));
		
		);
		l201 = 0;
		
		while(l201 < 2)
		(
			obj[dsp.fRec199 + l201] = 0.0000000000000000;
			l201 = int32(add32(l201, 1));
		
		);
		l202 = 0;
		
		while(l202 < 3)
		(
			obj[dsp.fRec198 + l202] = 0.0000000000000000;
			l202 = int32(add32(l202, 1));
		
		);
		l203 = 0;
		
		while(l203 < 3)
		(
			obj[dsp.fRec197 + l203] = 0.0000000000000000;
			l203 = int32(add32(l203, 1));
		
		);
		l204 = 0;
		
		while(l204 < 2)
		(
			obj[dsp.fRec202 + l204] = 0.0000000000000000;
			l204 = int32(add32(l204, 1));
		
		);
		l205 = 0;
		
		while(l205 < 3)
		(
			obj[dsp.fRec201 + l205] = 0.0000000000000000;
			l205 = int32(add32(l205, 1));
		
		);
		l206 = 0;
		
		while(l206 < 3)
		(
			obj[dsp.fRec200 + l206] = 0.0000000000000000;
			l206 = int32(add32(l206, 1));
		
		);
		l207 = 0;
		
		while(l207 < 2)
		(
			obj[dsp.fRec205 + l207] = 0.0000000000000000;
			l207 = int32(add32(l207, 1));
		
		);
		l208 = 0;
		
		while(l208 < 3)
		(
			obj[dsp.fRec204 + l208] = 0.0000000000000000;
			l208 = int32(add32(l208, 1));
		
		);
		l209 = 0;
		
		while(l209 < 3)
		(
			obj[dsp.fRec203 + l209] = 0.0000000000000000;
			l209 = int32(add32(l209, 1));
		
		);
		l210 = 0;
		
		while(l210 < 2)
		(
			obj[dsp.fRec208 + l210] = 0.0000000000000000;
			l210 = int32(add32(l210, 1));
		
		);
		l211 = 0;
		
		while(l211 < 3)
		(
			obj[dsp.fRec207 + l211] = 0.0000000000000000;
			l211 = int32(add32(l211, 1));
		
		);
		l212 = 0;
		
		while(l212 < 3)
		(
			obj[dsp.fRec206 + l212] = 0.0000000000000000;
			l212 = int32(add32(l212, 1));
		
		);
		l213 = 0;
		
		while(l213 < 2)
		(
			obj[dsp.fRec211 + l213] = 0.0000000000000000;
			l213 = int32(add32(l213, 1));
		
		);
		l214 = 0;
		
		while(l214 < 3)
		(
			obj[dsp.fRec210 + l214] = 0.0000000000000000;
			l214 = int32(add32(l214, 1));
		
		);
		l215 = 0;
		
		while(l215 < 3)
		(
			obj[dsp.fRec209 + l215] = 0.0000000000000000;
			l215 = int32(add32(l215, 1));
		
		);
		l216 = 0;
		
		while(l216 < 2)
		(
			obj[dsp.fRec214 + l216] = 0.0000000000000000;
			l216 = int32(add32(l216, 1));
		
		);
		l217 = 0;
		
		while(l217 < 3)
		(
			obj[dsp.fRec213 + l217] = 0.0000000000000000;
			l217 = int32(add32(l217, 1));
		
		);
		l218 = 0;
		
		while(l218 < 3)
		(
			obj[dsp.fRec212 + l218] = 0.0000000000000000;
			l218 = int32(add32(l218, 1));
		
		);
		l219 = 0;
		
		while(l219 < 2)
		(
			obj[dsp.fRec217 + l219] = 0.0000000000000000;
			l219 = int32(add32(l219, 1));
		
		);
		l220 = 0;
		
		while(l220 < 3)
		(
			obj[dsp.fRec216 + l220] = 0.0000000000000000;
			l220 = int32(add32(l220, 1));
		
		);
		l221 = 0;
		
		while(l221 < 3)
		(
			obj[dsp.fRec215 + l221] = 0.0000000000000000;
			l221 = int32(add32(l221, 1));
		
		);
		l222 = 0;
		
		while(l222 < 2)
		(
			obj[dsp.fRec220 + l222] = 0.0000000000000000;
			l222 = int32(add32(l222, 1));
		
		);
		l223 = 0;
		
		while(l223 < 3)
		(
			obj[dsp.fRec219 + l223] = 0.0000000000000000;
			l223 = int32(add32(l223, 1));
		
		);
		l224 = 0;
		
		while(l224 < 3)
		(
			obj[dsp.fRec218 + l224] = 0.0000000000000000;
			l224 = int32(add32(l224, 1));
		
		);
		l225 = 0;
		
		while(l225 < 2)
		(
			obj[dsp.fRec223 + l225] = 0.0000000000000000;
			l225 = int32(add32(l225, 1));
		
		);
		l226 = 0;
		
		while(l226 < 3)
		(
			obj[dsp.fRec222 + l226] = 0.0000000000000000;
			l226 = int32(add32(l226, 1));
		
		);
		l227 = 0;
		
		while(l227 < 3)
		(
			obj[dsp.fRec221 + l227] = 0.0000000000000000;
			l227 = int32(add32(l227, 1));
		
		);
		l228 = 0;
		
		while(l228 < 2)
		(
			obj[dsp.fRec226 + l228] = 0.0000000000000000;
			l228 = int32(add32(l228, 1));
		
		);
		l229 = 0;
		
		while(l229 < 3)
		(
			obj[dsp.fRec225 + l229] = 0.0000000000000000;
			l229 = int32(add32(l229, 1));
		
		);
		l230 = 0;
		
		while(l230 < 3)
		(
			obj[dsp.fRec224 + l230] = 0.0000000000000000;
			l230 = int32(add32(l230, 1));
		
		);
		l231 = 0;
		
		while(l231 < 2)
		(
			obj[dsp.fRec229 + l231] = 0.0000000000000000;
			l231 = int32(add32(l231, 1));
		
		);
		l232 = 0;
		
		while(l232 < 3)
		(
			obj[dsp.fRec228 + l232] = 0.0000000000000000;
			l232 = int32(add32(l232, 1));
		
		);
		l233 = 0;
		
		while(l233 < 3)
		(
			obj[dsp.fRec227 + l233] = 0.0000000000000000;
			l233 = int32(add32(l233, 1));
		
		);
		l234 = 0;
		
		while(l234 < 2)
		(
			obj[dsp.fRec232 + l234] = 0.0000000000000000;
			l234 = int32(add32(l234, 1));
		
		);
		l235 = 0;
		
		while(l235 < 3)
		(
			obj[dsp.fRec231 + l235] = 0.0000000000000000;
			l235 = int32(add32(l235, 1));
		
		);
		l236 = 0;
		
		while(l236 < 3)
		(
			obj[dsp.fRec230 + l236] = 0.0000000000000000;
			l236 = int32(add32(l236, 1));
		
		);
		l237 = 0;
		
		while(l237 < 2)
		(
			obj[dsp.fRec235 + l237] = 0.0000000000000000;
			l237 = int32(add32(l237, 1));
		
		);
		l238 = 0;
		
		while(l238 < 3)
		(
			obj[dsp.fRec234 + l238] = 0.0000000000000000;
			l238 = int32(add32(l238, 1));
		
		);
		l239 = 0;
		
		while(l239 < 3)
		(
			obj[dsp.fRec233 + l239] = 0.0000000000000000;
			l239 = int32(add32(l239, 1));
		
		);
		l240 = 0;
		
		while(l240 < 2)
		(
			obj[dsp.fRec238 + l240] = 0.0000000000000000;
			l240 = int32(add32(l240, 1));
		
		);
		l241 = 0;
		
		while(l241 < 3)
		(
			obj[dsp.fRec237 + l241] = 0.0000000000000000;
			l241 = int32(add32(l241, 1));
		
		);
		l242 = 0;
		
		while(l242 < 3)
		(
			obj[dsp.fRec236 + l242] = 0.0000000000000000;
			l242 = int32(add32(l242, 1));
		
		);
		l243 = 0;
		
		while(l243 < 8192)
		(
			obj[dsp.fVec20 + l243] = 0.0000000000000000;
			l243 = int32(add32(l243, 1));
		
		);
		l244 = 0;
		
		while(l244 < 3)
		(
			obj[dsp.fRec121 + l244] = 0.0000000000000000;
			l244 = int32(add32(l244, 1));
		
		);
		l245 = 0;
		
		while(l245 < 8192)
		(
			obj[dsp.fVec21 + l245] = 0.0000000000000000;
			l245 = int32(add32(l245, 1));
		
		);
		l246 = 0;
		
		while(l246 < 3)
		(
			obj[dsp.fRec122 + l246] = 0.0000000000000000;
			l246 = int32(add32(l246, 1));
		
		);
		l247 = 0;
		
		while(l247 < 8192)
		(
			obj[dsp.fVec22 + l247] = 0.0000000000000000;
			l247 = int32(add32(l247, 1));
		
		);
		l248 = 0;
		
		while(l248 < 3)
		(
			obj[dsp.fRec123 + l248] = 0.0000000000000000;
			l248 = int32(add32(l248, 1));
		
		);
		l249 = 0;
		
		while(l249 < 16384)
		(
			obj[dsp.fVec23 + l249] = 0.0000000000000000;
			l249 = int32(add32(l249, 1));
		
		);
		l250 = 0;
		
		while(l250 < 3)
		(
			obj[dsp.fRec124 + l250] = 0.0000000000000000;
			l250 = int32(add32(l250, 1));
		
		);
		l251 = 0;
		
		while(l251 < 16384)
		(
			obj[dsp.fVec24 + l251] = 0.0000000000000000;
			l251 = int32(add32(l251, 1));
		
		);
		l252 = 0;
		
		while(l252 < 3)
		(
			obj[dsp.fRec125 + l252] = 0.0000000000000000;
			l252 = int32(add32(l252, 1));
		
		);
		l253 = 0;
		
		while(l253 < 16384)
		(
			obj[dsp.fVec25 + l253] = 0.0000000000000000;
			l253 = int32(add32(l253, 1));
		
		);
		l254 = 0;
		
		while(l254 < 3)
		(
			obj[dsp.fRec126 + l254] = 0.0000000000000000;
			l254 = int32(add32(l254, 1));
		
		);
		l255 = 0;
		
		while(l255 < 16384)
		(
			obj[dsp.fVec26 + l255] = 0.0000000000000000;
			l255 = int32(add32(l255, 1));
		
		);
		l256 = 0;
		
		while(l256 < 3)
		(
			obj[dsp.fRec127 + l256] = 0.0000000000000000;
			l256 = int32(add32(l256, 1));
		
		);
		l257 = 0;
		
		while(l257 < 16384)
		(
			obj[dsp.fVec27 + l257] = 0.0000000000000000;
			l257 = int32(add32(l257, 1));
		
		);
		l258 = 0;
		
		while(l258 < 3)
		(
			obj[dsp.fRec128 + l258] = 0.0000000000000000;
			l258 = int32(add32(l258, 1));
		
		);
		l259 = 0;
		
		while(l259 < 16384)
		(
			obj[dsp.fVec28 + l259] = 0.0000000000000000;
			l259 = int32(add32(l259, 1));
		
		);
		l260 = 0;
		
		while(l260 < 3)
		(
			obj[dsp.fRec129 + l260] = 0.0000000000000000;
			l260 = int32(add32(l260, 1));
		
		);
		l261 = 0;
		
		while(l261 < 16384)
		(
			obj[dsp.fVec29 + l261] = 0.0000000000000000;
			l261 = int32(add32(l261, 1));
		
		);
		l262 = 0;
		
		while(l262 < 3)
		(
			obj[dsp.fRec130 + l262] = 0.0000000000000000;
			l262 = int32(add32(l262, 1));
		
		);
		l263 = 0;
		
		while(l263 < 16384)
		(
			obj[dsp.fVec30 + l263] = 0.0000000000000000;
			l263 = int32(add32(l263, 1));
		
		);
		l264 = 0;
		
		while(l264 < 3)
		(
			obj[dsp.fRec131 + l264] = 0.0000000000000000;
			l264 = int32(add32(l264, 1));
		
		);
		l265 = 0;
		
		while(l265 < 16384)
		(
			obj[dsp.fVec31 + l265] = 0.0000000000000000;
			l265 = int32(add32(l265, 1));
		
		);
		l266 = 0;
		
		while(l266 < 3)
		(
			obj[dsp.fRec132 + l266] = 0.0000000000000000;
			l266 = int32(add32(l266, 1));
		
		);
		l267 = 0;
		
		while(l267 < 16384)
		(
			obj[dsp.fVec32 + l267] = 0.0000000000000000;
			l267 = int32(add32(l267, 1));
		
		);
		l268 = 0;
		
		while(l268 < 3)
		(
			obj[dsp.fRec133 + l268] = 0.0000000000000000;
			l268 = int32(add32(l268, 1));
		
		);
		l269 = 0;
		
		while(l269 < 16384)
		(
			obj[dsp.fVec33 + l269] = 0.0000000000000000;
			l269 = int32(add32(l269, 1));
		
		);
		l270 = 0;
		
		while(l270 < 3)
		(
			obj[dsp.fRec134 + l270] = 0.0000000000000000;
			l270 = int32(add32(l270, 1));
		
		);
		l271 = 0;
		
		while(l271 < 16384)
		(
			obj[dsp.fVec34 + l271] = 0.0000000000000000;
			l271 = int32(add32(l271, 1));
		
		);
		l272 = 0;
		
		while(l272 < 3)
		(
			obj[dsp.fRec135 + l272] = 0.0000000000000000;
			l272 = int32(add32(l272, 1));
		
		);
		l273 = 0;
		
		while(l273 < 16384)
		(
			obj[dsp.fVec35 + l273] = 0.0000000000000000;
			l273 = int32(add32(l273, 1));
		
		);
		l274 = 0;
		
		while(l274 < 3)
		(
			obj[dsp.fRec136 + l274] = 0.0000000000000000;
			l274 = int32(add32(l274, 1));
		
		);
		fSampleRate = srate;
		fConst0 = min(192000.0000000000000000, max(1.0000000000000000, (fSampleRate)));
		obj[dsp.fConst1] = (44.0999984741210938 / fConst0);
		obj[dsp.fConst2] = (1.0000000000000000 - obj[dsp.fConst1]);
		obj[dsp.fConst3] = (0.0199999995529652 * fConst0);
		obj[dsp.fConst4] = (0.0049999998882413 * fConst0);
		obj[dsp.fConst5] = (0.0299999993294477 * fConst0);
		obj[dsp.fConst6] = (0.5000000000000000 * fConst0);
		fConst7 = tan((1570.7963867187500000 / fConst0));
		fConst8 = pow(fConst7, 2.0000000000000000);
		obj[dsp.fConst9] = (1.0000000000000000 / fConst8);
		obj[dsp.fConst10] = (2.0000000000000000 * (1.0000000000000000 - obj[dsp.fConst9]));
		obj[dsp.fConst11] = (1.0000000000000000 / fConst7);
		obj[dsp.fConst12] = (((obj[dsp.fConst11] + -0.6180340051651001) / fConst7) + 1.0000000000000000);
		fConst13 = (((obj[dsp.fConst11] + 0.6180340051651001) / fConst7) + 1.0000000000000000);
		obj[dsp.fConst14] = (1.0000000000000000 / fConst13);
		obj[dsp.fConst15] = (((obj[dsp.fConst11] + -1.6180340051651001) / fConst7) + 1.0000000000000000);
		fConst16 = (((obj[dsp.fConst11] + 1.6180340051651001) / fConst7) + 1.0000000000000000);
		obj[dsp.fConst17] = (1.0000000000000000 / fConst16);
		obj[dsp.fConst18] = (1.0000000000000000 - obj[dsp.fConst11]);
		obj[dsp.fConst19] = (1.0000000000000000 / (obj[dsp.fConst11] + 1.0000000000000000));
		obj[dsp.fConst20] = (1.0000000000000000 / (fConst8 * fConst16));
		obj[dsp.fConst21] = (0.2475000023841858 / fConst13);
		obj[dsp.iConst22] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0237499997019768 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst23] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0238125007599592 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst24] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0335625000298023 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst25] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0340625010430813 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst26] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0341250002384186 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst27] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0413125008344650 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst28] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0413750000298023 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst29] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0524374991655350 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst30] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0524999983608723 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst31] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0538125000894070 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst32] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0576249994337559 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst33] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0576874986290932 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst34] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0585624985396862 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst35] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0620624981820583 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst36] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0621250011026859 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst37] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0698750019073486 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst38] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0314375013113022 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst39] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0396250002086163 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst40] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0396874994039536 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst41] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0456250011920929 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst42] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0515000000596046 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst43] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0515624992549419 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst44] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0561250001192093 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst45] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0561874993145466 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst46] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0574375018477440 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst47] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0610000006854534 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst48] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0610624998807907 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst49] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0649375021457672 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst50] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0691874995827675 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst51] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0726249963045120 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst52] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0726874992251396 * fConst0) + -1.0000000000000000)))));
		obj[dsp.iConst53] = int32(ftoi32(min(48000.0000000000000000, max(0.0000000000000000, ((0.0736249983310699 * fConst0) + -1.0000000000000000)))));
		voice_idx += 1;
	); 
);

create_instances();
init_instances();

function control() (
	voice_idx = 0;
	while(voice_idx < nvoices) (
		obj = dsp.memory + dsp.size * voice_idx;
		obj[dsp.fSlow0] = (obj[dsp.fConst1] * fHslider0);
		obj[dsp.fSlow1] = (obj[dsp.fConst1] * fHslider1);
		obj[dsp.fSlow2] = fHslider2;
		obj[dsp.fSlow3] = (1.0000000000000000 - obj[dsp.fSlow2]);
		voice_idx += 1;
	);
);

@slider
control();

@sample
voice_idx = 0;
while(voice_idx < nvoices) (
	obj = dsp.memory + dsp.size * voice_idx;
	fTemp0 = spl0;
	fTemp1 = spl1;
	obj[dsp.fRec0 + 0] = (obj[dsp.fSlow0] + (obj[dsp.fConst2] * obj[dsp.fRec0 + 1]));
	fTemp2 = pow(10.0000000000000000, (0.0500000007450581 * obj[dsp.fRec0 + 0]));
	obj[dsp.fRec1 + 0] = (obj[dsp.fSlow1] + (obj[dsp.fConst2] * obj[dsp.fRec1 + 1]));
	fTemp3 = pow(10.0000000000000000, (0.0500000007450581 * obj[dsp.fRec1 + 0]));
	fTemp4 = (fTemp0 * fTemp3);
	obj[dsp.iRec21 + 0] = int32(add32(obj[dsp.iRec21 + 1], 1));
	fTemp5 = (obj[dsp.iRec21 + 0]);
	iTemp6 = (fmod(fTemp5, obj[dsp.fConst3]) == 0.0000000000000000);
	iTemp7 = (fmod(fTemp5, obj[dsp.fConst4]) == 0.0000000000000000);
	fTemp8 = pow((10.0000000000000000 * fTemp4), 2.0000000000000000);
	obj[dsp.fVec0 + 0] = fTemp8;
	fTemp9 = (((fTemp8 != obj[dsp.fVec0 + 1]) != 0) ? obj[dsp.fConst5] : (obj[dsp.fRec23 + 1] + -1.0000000000000000));
	obj[dsp.fRec23 + 0] = fTemp9;
	obj[dsp.fRec24 + 0] = (((fTemp9 > 0.0000000000000000) != 0) ? (obj[dsp.fRec24 + 1] + ((fTemp8 - obj[dsp.fRec24 + 1]) / fTemp9)) : fTemp8);
	obj[dsp.fRec22 + 0] = ((iTemp7 != 0) ? obj[dsp.fRec24 + 0] : obj[dsp.fRec22 + 1]);
	obj[dsp.fRec20 + 0] = ((iTemp6 != 0) ? (20.0000000000000000 * log10(max(0.0000000000000000, obj[dsp.fRec22 + 0]))) : obj[dsp.fRec20 + 1]);
	fTemp10 = (max(-30.0000000000000000, min(0.0000000000000000, obj[dsp.fRec20 + 0])) + 30.0000000000000000);
	obj[dsp.fVec1 + 0] = fTemp10;
	fTemp11 = (0.0333333350718021 * fTemp10);
	fTemp12 = (((fTemp11 != (0.0333333350718021 * obj[dsp.fVec1 + 1])) != 0) ? obj[dsp.fConst6] : (obj[dsp.fRec18 + 1] + -1.0000000000000000));
	obj[dsp.fRec18 + 0] = fTemp12;
	obj[dsp.fRec19 + 0] = (((fTemp12 > 0.0000000000000000) != 0) ? (obj[dsp.fRec19 + 1] + ((fTemp11 - obj[dsp.fRec19 + 1]) / fTemp12)) : fTemp11);
	fTemp13 = max(5.0000000000000000, min(90.0000000000000000, (90.0000000000000000 - (85.0000000000000000 * pow(obj[dsp.fRec19 + 0], 0.1000000014901161)))));
	obj[dsp.fRec27 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec27 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec17 + 1] - obj[dsp.fRec17 + 2])))));
	obj[dsp.fRec26 + 0] = (obj[dsp.fRec27 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec26 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec26 + 1]))));
	obj[dsp.fRec25 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec26 + 2] + (obj[dsp.fRec26 + 0] - (2.0000000000000000 * obj[dsp.fRec26 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec25 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec25 + 1]))));
	obj[dsp.fRec30 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec30 + 1]) - (obj[dsp.fRec17 + 1] + obj[dsp.fRec17 + 2]))));
	obj[dsp.fRec29 + 0] = (obj[dsp.fRec30 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec29 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec29 + 1]))));
	obj[dsp.fRec28 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec29 + 2] + (obj[dsp.fRec29 + 0] + (2.0000000000000000 * obj[dsp.fRec29 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec28 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec28 + 1]))));
	fTemp14 = (((obj[dsp.fRec28 + 2] + (obj[dsp.fRec28 + 0] + (2.0000000000000000 * obj[dsp.fRec28 + 1]))) * exp(-((0.4826793968677521 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec25 + 2] + (obj[dsp.fRec25 + 0] - (2.0000000000000000 * obj[dsp.fRec25 + 1]))) * exp(-((0.9653587937355042 / fTemp13))))));
	obj[dsp.fRec33 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec33 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec9 + 1] - obj[dsp.fRec9 + 2])))));
	obj[dsp.fRec32 + 0] = (obj[dsp.fRec33 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec32 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec32 + 1]))));
	obj[dsp.fRec31 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec32 + 2] + (obj[dsp.fRec32 + 0] - (2.0000000000000000 * obj[dsp.fRec32 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec31 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec31 + 1]))));
	obj[dsp.fRec36 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec36 + 1]) - (obj[dsp.fRec9 + 1] + obj[dsp.fRec9 + 2]))));
	obj[dsp.fRec35 + 0] = (obj[dsp.fRec36 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec35 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec35 + 1]))));
	obj[dsp.fRec34 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec35 + 2] + (obj[dsp.fRec35 + 0] + (2.0000000000000000 * obj[dsp.fRec35 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec34 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec34 + 1]))));
	fTemp15 = (((obj[dsp.fRec34 + 2] + (obj[dsp.fRec34 + 0] + (2.0000000000000000 * obj[dsp.fRec34 + 1]))) * exp(-((0.3622254133224487 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec31 + 2] + (obj[dsp.fRec31 + 0] - (2.0000000000000000 * obj[dsp.fRec31 + 1]))) * exp(-((0.7244508266448975 / fTemp13))))));
	fTemp16 = (fTemp15 + fTemp14);
	obj[dsp.fRec39 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec39 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec13 + 1] - obj[dsp.fRec13 + 2])))));
	obj[dsp.fRec38 + 0] = (obj[dsp.fRec39 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec38 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec38 + 1]))));
	obj[dsp.fRec37 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec38 + 2] + (obj[dsp.fRec38 + 0] - (2.0000000000000000 * obj[dsp.fRec38 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec37 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec37 + 1]))));
	obj[dsp.fRec42 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec42 + 1]) - (obj[dsp.fRec13 + 1] + obj[dsp.fRec13 + 2]))));
	obj[dsp.fRec41 + 0] = (obj[dsp.fRec42 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec41 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec41 + 1]))));
	obj[dsp.fRec40 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec41 + 2] + (obj[dsp.fRec41 + 0] + (2.0000000000000000 * obj[dsp.fRec41 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec40 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec40 + 1]))));
	fTemp17 = (((obj[dsp.fRec40 + 2] + (obj[dsp.fRec40 + 0] + (2.0000000000000000 * obj[dsp.fRec40 + 1]))) * exp(-((0.3984911441802979 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec37 + 2] + (obj[dsp.fRec37 + 0] - (2.0000000000000000 * obj[dsp.fRec37 + 1]))) * exp(-((0.7969822883605957 / fTemp13))))));
	obj[dsp.fRec45 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec45 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec5 + 1] - obj[dsp.fRec5 + 2])))));
	obj[dsp.fRec44 + 0] = (obj[dsp.fRec45 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec44 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec44 + 1]))));
	obj[dsp.fRec43 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec44 + 2] + (obj[dsp.fRec44 + 0] - (2.0000000000000000 * obj[dsp.fRec44 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec43 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec43 + 1]))));
	obj[dsp.fRec48 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec48 + 1]) - (obj[dsp.fRec5 + 1] + obj[dsp.fRec5 + 2]))));
	obj[dsp.fRec47 + 0] = (obj[dsp.fRec48 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec47 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec47 + 1]))));
	obj[dsp.fRec46 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec47 + 2] + (obj[dsp.fRec47 + 0] + (2.0000000000000000 * obj[dsp.fRec47 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec46 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec46 + 1]))));
	fTemp18 = (((obj[dsp.fRec46 + 2] + (obj[dsp.fRec46 + 0] + (2.0000000000000000 * obj[dsp.fRec46 + 1]))) * exp(-((0.2352954149246216 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec43 + 2] + (obj[dsp.fRec43 + 0] - (2.0000000000000000 * obj[dsp.fRec43 + 1]))) * exp(-((0.4705908298492432 / fTemp13))))));
	fTemp19 = (fTemp18 + fTemp17);
	fTemp20 = (fTemp19 + fTemp16);
	obj[dsp.fRec51 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec51 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec15 + 1] - obj[dsp.fRec15 + 2])))));
	obj[dsp.fRec50 + 0] = (obj[dsp.fRec51 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec50 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec50 + 1]))));
	obj[dsp.fRec49 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec50 + 2] + (obj[dsp.fRec50 + 0] - (2.0000000000000000 * obj[dsp.fRec50 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec49 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec49 + 1]))));
	obj[dsp.fRec54 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec54 + 1]) - (obj[dsp.fRec15 + 1] + obj[dsp.fRec15 + 2]))));
	obj[dsp.fRec53 + 0] = (obj[dsp.fRec54 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec53 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec53 + 1]))));
	obj[dsp.fRec52 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec53 + 2] + (obj[dsp.fRec53 + 0] + (2.0000000000000000 * obj[dsp.fRec53 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec52 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec52 + 1]))));
	fTemp21 = (((obj[dsp.fRec52 + 2] + (obj[dsp.fRec52 + 0] + (2.0000000000000000 * obj[dsp.fRec52 + 1]))) * exp(-((0.4287125766277313 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec49 + 2] + (obj[dsp.fRec49 + 0] - (2.0000000000000000 * obj[dsp.fRec49 + 1]))) * exp(-((0.8574251532554626 / fTemp13))))));
	obj[dsp.fRec57 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec57 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec7 + 1] - obj[dsp.fRec7 + 2])))));
	obj[dsp.fRec56 + 0] = (obj[dsp.fRec57 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec56 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec56 + 1]))));
	obj[dsp.fRec55 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec56 + 2] + (obj[dsp.fRec56 + 0] - (2.0000000000000000 * obj[dsp.fRec56 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec55 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec55 + 1]))));
	obj[dsp.fRec60 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec60 + 1]) - (obj[dsp.fRec7 + 1] + obj[dsp.fRec7 + 2]))));
	obj[dsp.fRec59 + 0] = (obj[dsp.fRec60 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec59 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec59 + 1]))));
	obj[dsp.fRec58 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec59 + 2] + (obj[dsp.fRec59 + 0] + (2.0000000000000000 * obj[dsp.fRec59 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec58 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec58 + 1]))));
	fTemp22 = (((obj[dsp.fRec58 + 2] + (obj[dsp.fRec58 + 0] + (2.0000000000000000 * obj[dsp.fRec58 + 1]))) * exp(-((0.2853766381740570 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec55 + 2] + (obj[dsp.fRec55 + 0] - (2.0000000000000000 * obj[dsp.fRec55 + 1]))) * exp(-((0.5707532763481140 / fTemp13))))));
	fTemp23 = (fTemp22 + fTemp21);
	obj[dsp.fRec63 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec63 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec11 + 1] - obj[dsp.fRec11 + 2])))));
	obj[dsp.fRec62 + 0] = (obj[dsp.fRec63 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec62 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec62 + 1]))));
	obj[dsp.fRec61 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec62 + 2] + (obj[dsp.fRec62 + 0] - (2.0000000000000000 * obj[dsp.fRec62 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec61 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec61 + 1]))));
	obj[dsp.fRec66 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec66 + 1]) - (obj[dsp.fRec11 + 1] + obj[dsp.fRec11 + 2]))));
	obj[dsp.fRec65 + 0] = (obj[dsp.fRec66 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec65 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec65 + 1]))));
	obj[dsp.fRec64 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec65 + 2] + (obj[dsp.fRec65 + 0] + (2.0000000000000000 * obj[dsp.fRec65 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec64 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec64 + 1]))));
	fTemp24 = (((obj[dsp.fRec64 + 2] + (obj[dsp.fRec64 + 0] + (2.0000000000000000 * obj[dsp.fRec64 + 1]))) * exp(-((0.3717235922813416 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec61 + 2] + (obj[dsp.fRec61 + 0] - (2.0000000000000000 * obj[dsp.fRec61 + 1]))) * exp(-((0.7434471845626831 / fTemp13))))));
	obj[dsp.fRec69 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec69 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec3 + 1] - obj[dsp.fRec3 + 2])))));
	obj[dsp.fRec68 + 0] = (obj[dsp.fRec69 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec68 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec68 + 1]))));
	obj[dsp.fRec67 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec68 + 2] + (obj[dsp.fRec68 + 0] - (2.0000000000000000 * obj[dsp.fRec68 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec67 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec67 + 1]))));
	obj[dsp.fRec72 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec72 + 1]) - (obj[dsp.fRec3 + 1] + obj[dsp.fRec3 + 2]))));
	obj[dsp.fRec71 + 0] = (obj[dsp.fRec72 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec71 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec71 + 1]))));
	obj[dsp.fRec70 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec71 + 2] + (obj[dsp.fRec71 + 0] + (2.0000000000000000 * obj[dsp.fRec71 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec70 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec70 + 1]))));
	fTemp25 = (((obj[dsp.fRec70 + 2] + (obj[dsp.fRec70 + 0] + (2.0000000000000000 * obj[dsp.fRec70 + 1]))) * exp(-((0.1644909232854843 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec67 + 2] + (obj[dsp.fRec67 + 0] - (2.0000000000000000 * obj[dsp.fRec67 + 1]))) * exp(-((0.3289818465709686 / fTemp13))))));
	fTemp26 = (fTemp25 + fTemp24);
	fTemp27 = (fTemp26 + fTemp23);
	fTemp28 = (fTemp27 + fTemp20);
	obj[dsp.fRec75 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec75 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec16 + 1] - obj[dsp.fRec16 + 2])))));
	obj[dsp.fRec74 + 0] = (obj[dsp.fRec75 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec74 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec74 + 1]))));
	obj[dsp.fRec73 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec74 + 2] + (obj[dsp.fRec74 + 0] - (2.0000000000000000 * obj[dsp.fRec74 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec73 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec73 + 1]))));
	obj[dsp.fRec78 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec78 + 1]) - (obj[dsp.fRec16 + 1] + obj[dsp.fRec16 + 2]))));
	obj[dsp.fRec77 + 0] = (obj[dsp.fRec78 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec77 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec77 + 1]))));
	obj[dsp.fRec76 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec77 + 2] + (obj[dsp.fRec77 + 0] + (2.0000000000000000 * obj[dsp.fRec77 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec76 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec76 + 1]))));
	fTemp29 = (((obj[dsp.fRec76 + 2] + (obj[dsp.fRec76 + 0] + (2.0000000000000000 * obj[dsp.fRec76 + 1]))) * exp(-((0.4291442930698395 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec73 + 2] + (obj[dsp.fRec73 + 0] - (2.0000000000000000 * obj[dsp.fRec73 + 1]))) * exp(-((0.8582885861396790 / fTemp13))))));
	obj[dsp.fRec81 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec81 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec8 + 1] - obj[dsp.fRec8 + 2])))));
	obj[dsp.fRec80 + 0] = (obj[dsp.fRec81 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec80 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec80 + 1]))));
	obj[dsp.fRec79 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec80 + 2] + (obj[dsp.fRec80 + 0] - (2.0000000000000000 * obj[dsp.fRec80 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec79 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec79 + 1]))));
	obj[dsp.fRec84 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec84 + 1]) - (obj[dsp.fRec8 + 1] + obj[dsp.fRec8 + 2]))));
	obj[dsp.fRec83 + 0] = (obj[dsp.fRec84 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec83 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec83 + 1]))));
	obj[dsp.fRec82 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec83 + 2] + (obj[dsp.fRec83 + 0] + (2.0000000000000000 * obj[dsp.fRec83 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec82 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec82 + 1]))));
	fTemp30 = (((obj[dsp.fRec82 + 2] + (obj[dsp.fRec82 + 0] + (2.0000000000000000 * obj[dsp.fRec82 + 1]))) * exp(-((0.2858083844184875 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec79 + 2] + (obj[dsp.fRec79 + 0] - (2.0000000000000000 * obj[dsp.fRec79 + 1]))) * exp(-((0.5716167688369751 / fTemp13))))));
	fTemp31 = (fTemp30 + fTemp29);
	obj[dsp.fRec87 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec87 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec12 + 1] - obj[dsp.fRec12 + 2])))));
	obj[dsp.fRec86 + 0] = (obj[dsp.fRec87 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec86 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec86 + 1]))));
	obj[dsp.fRec85 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec86 + 2] + (obj[dsp.fRec86 + 0] - (2.0000000000000000 * obj[dsp.fRec86 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec85 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec85 + 1]))));
	obj[dsp.fRec90 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec90 + 1]) - (obj[dsp.fRec12 + 1] + obj[dsp.fRec12 + 2]))));
	obj[dsp.fRec89 + 0] = (obj[dsp.fRec90 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec89 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec89 + 1]))));
	obj[dsp.fRec88 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec89 + 2] + (obj[dsp.fRec89 + 0] + (2.0000000000000000 * obj[dsp.fRec89 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec88 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec88 + 1]))));
	fTemp32 = (((obj[dsp.fRec88 + 2] + (obj[dsp.fRec88 + 0] + (2.0000000000000000 * obj[dsp.fRec88 + 1]))) * exp(-((0.3980593979358673 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec85 + 2] + (obj[dsp.fRec85 + 0] - (2.0000000000000000 * obj[dsp.fRec85 + 1]))) * exp(-((0.7961187958717346 / fTemp13))))));
	obj[dsp.fRec93 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec93 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec4 + 1] - obj[dsp.fRec4 + 2])))));
	obj[dsp.fRec92 + 0] = (obj[dsp.fRec93 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec92 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec92 + 1]))));
	obj[dsp.fRec91 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec92 + 2] + (obj[dsp.fRec92 + 0] - (2.0000000000000000 * obj[dsp.fRec92 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec91 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec91 + 1]))));
	obj[dsp.fRec96 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec96 + 1]) - (obj[dsp.fRec4 + 1] + obj[dsp.fRec4 + 2]))));
	obj[dsp.fRec95 + 0] = (obj[dsp.fRec96 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec95 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec95 + 1]))));
	obj[dsp.fRec94 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec95 + 2] + (obj[dsp.fRec95 + 0] + (2.0000000000000000 * obj[dsp.fRec95 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec94 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec94 + 1]))));
	fTemp33 = (((obj[dsp.fRec94 + 2] + (obj[dsp.fRec94 + 0] + (2.0000000000000000 * obj[dsp.fRec94 + 1]))) * exp(-((0.2318415343761444 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec91 + 2] + (obj[dsp.fRec91 + 0] - (2.0000000000000000 * obj[dsp.fRec91 + 1]))) * exp(-((0.4636830687522888 / fTemp13))))));
	fTemp34 = (fTemp33 + fTemp32);
	fTemp35 = (fTemp34 + fTemp31);
	obj[dsp.fRec99 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec99 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec14 + 1] - obj[dsp.fRec14 + 2])))));
	obj[dsp.fRec98 + 0] = (obj[dsp.fRec99 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec98 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec98 + 1]))));
	obj[dsp.fRec97 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec98 + 2] + (obj[dsp.fRec98 + 0] - (2.0000000000000000 * obj[dsp.fRec98 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec97 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec97 + 1]))));
	obj[dsp.fRec102 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec102 + 1]) - (obj[dsp.fRec14 + 1] + obj[dsp.fRec14 + 2]))));
	obj[dsp.fRec101 + 0] = (obj[dsp.fRec102 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec101 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec101 + 1]))));
	obj[dsp.fRec100 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec101 + 2] + (obj[dsp.fRec101 + 0] + (2.0000000000000000 * obj[dsp.fRec101 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec100 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec100 + 1]))));
	fTemp36 = (((obj[dsp.fRec100 + 2] + (obj[dsp.fRec100 + 0] + (2.0000000000000000 * obj[dsp.fRec100 + 1]))) * exp(-((0.4045354127883911 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec97 + 2] + (obj[dsp.fRec97 + 0] - (2.0000000000000000 * obj[dsp.fRec97 + 1]))) * exp(-((0.8090708255767822 / fTemp13))))));
	obj[dsp.fRec105 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec105 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec6 + 1] - obj[dsp.fRec6 + 2])))));
	obj[dsp.fRec104 + 0] = (obj[dsp.fRec105 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec104 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec104 + 1]))));
	obj[dsp.fRec103 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec104 + 2] + (obj[dsp.fRec104 + 0] - (2.0000000000000000 * obj[dsp.fRec104 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec103 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec103 + 1]))));
	obj[dsp.fRec108 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec108 + 1]) - (obj[dsp.fRec6 + 1] + obj[dsp.fRec6 + 2]))));
	obj[dsp.fRec107 + 0] = (obj[dsp.fRec108 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec107 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec107 + 1]))));
	obj[dsp.fRec106 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec107 + 2] + (obj[dsp.fRec107 + 0] + (2.0000000000000000 * obj[dsp.fRec107 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec106 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec106 + 1]))));
	fTemp37 = (((obj[dsp.fRec106 + 2] + (obj[dsp.fRec106 + 0] + (2.0000000000000000 * obj[dsp.fRec106 + 1]))) * exp(-((0.2357271462678909 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec103 + 2] + (obj[dsp.fRec103 + 0] - (2.0000000000000000 * obj[dsp.fRec103 + 1]))) * exp(-((0.4714542925357819 / fTemp13))))));
	fTemp38 = (fTemp37 + fTemp36);
	obj[dsp.fRec111 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec111 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec10 + 1] - obj[dsp.fRec10 + 2])))));
	obj[dsp.fRec110 + 0] = (obj[dsp.fRec111 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec110 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec110 + 1]))));
	obj[dsp.fRec109 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec110 + 2] + (obj[dsp.fRec110 + 0] - (2.0000000000000000 * obj[dsp.fRec110 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec109 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec109 + 1]))));
	obj[dsp.fRec114 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec114 + 1]) - (obj[dsp.fRec10 + 1] + obj[dsp.fRec10 + 2]))));
	obj[dsp.fRec113 + 0] = (obj[dsp.fRec114 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec113 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec113 + 1]))));
	obj[dsp.fRec112 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec113 + 2] + (obj[dsp.fRec113 + 0] + (2.0000000000000000 * obj[dsp.fRec113 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec112 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec112 + 1]))));
	fTemp39 = (((obj[dsp.fRec112 + 2] + (obj[dsp.fRec112 + 0] + (2.0000000000000000 * obj[dsp.fRec112 + 1]))) * exp(-((0.3626571595668793 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec109 + 2] + (obj[dsp.fRec109 + 0] - (2.0000000000000000 * obj[dsp.fRec109 + 1]))) * exp(-((0.7253143191337585 / fTemp13))))));
	obj[dsp.fRec117 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec117 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec2 + 1] - obj[dsp.fRec2 + 2])))));
	obj[dsp.fRec116 + 0] = (obj[dsp.fRec117 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec116 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec116 + 1]))));
	obj[dsp.fRec115 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec116 + 2] + (obj[dsp.fRec116 + 0] - (2.0000000000000000 * obj[dsp.fRec116 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec115 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec115 + 1]))));
	obj[dsp.fRec120 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec120 + 1]) - (obj[dsp.fRec2 + 1] + obj[dsp.fRec2 + 2]))));
	obj[dsp.fRec119 + 0] = (obj[dsp.fRec120 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec119 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec119 + 1]))));
	obj[dsp.fRec118 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec119 + 2] + (obj[dsp.fRec119 + 0] + (2.0000000000000000 * obj[dsp.fRec119 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec118 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec118 + 1]))));
	fTemp40 = (((obj[dsp.fRec118 + 2] + (obj[dsp.fRec118 + 0] + (2.0000000000000000 * obj[dsp.fRec118 + 1]))) * exp(-((0.1640591919422150 / fTemp13)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec115 + 2] + (obj[dsp.fRec115 + 0] - (2.0000000000000000 * obj[dsp.fRec115 + 1]))) * exp(-((0.3281183838844299 / fTemp13))))));
	fTemp41 = (fTemp40 + fTemp39);
	fTemp42 = (fTemp41 + fTemp38);
	fTemp43 = (fTemp42 + fTemp35);
	obj[dsp.fVec2 + (obj[dsp.IOTA0] & 8191)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp43 + fTemp28)));
	obj[dsp.fRec2 + 0] = obj[dsp.fVec2 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst22])) & 8191)];
	obj[dsp.fVec3 + (obj[dsp.IOTA0] & 8191)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp43 - fTemp28)));
	obj[dsp.fRec3 + 0] = obj[dsp.fVec3 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst23])) & 8191)];
	fTemp44 = (fTemp27 - fTemp20);
	fTemp45 = (fTemp42 - fTemp35);
	obj[dsp.fVec4 + (obj[dsp.IOTA0] & 8191)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp45 + fTemp44)));
	obj[dsp.fRec4 + 0] = obj[dsp.fVec4 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst24])) & 8191)];
	obj[dsp.fVec5 + (obj[dsp.IOTA0] & 8191)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp45 - fTemp44)));
	obj[dsp.fRec5 + 0] = obj[dsp.fVec5 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst25])) & 8191)];
	fTemp46 = (fTemp19 - fTemp16);
	fTemp47 = (fTemp26 - fTemp23);
	fTemp48 = (fTemp47 + fTemp46);
	fTemp49 = (fTemp34 - fTemp31);
	fTemp50 = (fTemp41 - fTemp38);
	fTemp51 = (fTemp50 + fTemp49);
	obj[dsp.fVec6 + (obj[dsp.IOTA0] & 8191)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp51 + fTemp48)));
	obj[dsp.fRec6 + 0] = obj[dsp.fVec6 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst26])) & 8191)];
	obj[dsp.fVec7 + (obj[dsp.IOTA0] & 8191)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp51 - fTemp48)));
	obj[dsp.fRec7 + 0] = obj[dsp.fVec7 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst27])) & 8191)];
	fTemp52 = (fTemp47 - fTemp46);
	fTemp53 = (fTemp50 - fTemp49);
	obj[dsp.fVec8 + (obj[dsp.IOTA0] & 8191)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp53 + fTemp52)));
	obj[dsp.fRec8 + 0] = obj[dsp.fVec8 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst28])) & 8191)];
	obj[dsp.fVec9 + (obj[dsp.IOTA0] & 16383)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp53 - fTemp52)));
	obj[dsp.fRec9 + 0] = obj[dsp.fVec9 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst29])) & 16383)];
	fTemp54 = (fTemp15 - fTemp14);
	fTemp55 = (fTemp18 - fTemp17);
	fTemp56 = (fTemp55 + fTemp54);
	fTemp57 = (fTemp22 - fTemp21);
	fTemp58 = (fTemp25 - fTemp24);
	fTemp59 = (fTemp58 + fTemp57);
	fTemp60 = (fTemp59 + fTemp56);
	fTemp61 = (fTemp30 - fTemp29);
	fTemp62 = (fTemp33 - fTemp32);
	fTemp63 = (fTemp62 + fTemp61);
	fTemp64 = (fTemp37 - fTemp36);
	fTemp65 = (fTemp40 - fTemp39);
	fTemp66 = (fTemp65 + fTemp64);
	fTemp67 = (fTemp66 + fTemp63);
	obj[dsp.fVec10 + (obj[dsp.IOTA0] & 16383)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp67 + fTemp60)));
	obj[dsp.fRec10 + 0] = obj[dsp.fVec10 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst30])) & 16383)];
	obj[dsp.fVec11 + (obj[dsp.IOTA0] & 16383)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp67 - fTemp60)));
	obj[dsp.fRec11 + 0] = obj[dsp.fVec11 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst31])) & 16383)];
	fTemp68 = (fTemp59 - fTemp56);
	fTemp69 = (fTemp66 - fTemp63);
	obj[dsp.fVec12 + (obj[dsp.IOTA0] & 16383)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp69 + fTemp68)));
	obj[dsp.fRec12 + 0] = obj[dsp.fVec12 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst32])) & 16383)];
	obj[dsp.fVec13 + (obj[dsp.IOTA0] & 16383)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp69 - fTemp68)));
	obj[dsp.fRec13 + 0] = obj[dsp.fVec13 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst33])) & 16383)];
	fTemp70 = (fTemp55 - fTemp54);
	fTemp71 = (fTemp58 - fTemp57);
	fTemp72 = (fTemp71 + fTemp70);
	fTemp73 = (fTemp62 - fTemp61);
	fTemp74 = (fTemp65 - fTemp64);
	fTemp75 = (fTemp74 + fTemp73);
	obj[dsp.fVec14 + (obj[dsp.IOTA0] & 16383)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp75 + fTemp72)));
	obj[dsp.fRec14 + 0] = obj[dsp.fVec14 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst34])) & 16383)];
	obj[dsp.fVec15 + (obj[dsp.IOTA0] & 16383)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp75 - fTemp72)));
	obj[dsp.fRec15 + 0] = obj[dsp.fVec15 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst35])) & 16383)];
	fTemp76 = (fTemp71 - fTemp70);
	fTemp77 = (fTemp74 - fTemp73);
	obj[dsp.fVec16 + (obj[dsp.IOTA0] & 16383)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp77 + fTemp76)));
	obj[dsp.fRec16 + 0] = obj[dsp.fVec16 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst36])) & 16383)];
	obj[dsp.fVec17 + (obj[dsp.IOTA0] & 16383)] = (fTemp4 + (obj[dsp.fConst21] * (fTemp77 - fTemp76)));
	obj[dsp.fRec17 + 0] = obj[dsp.fVec17 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst37])) & 16383)];
	obj[dsp.output0] = (((obj[dsp.fSlow2] * (((((((((((((((obj[dsp.fRec2 + 0] + obj[dsp.fRec3 + 0]) + obj[dsp.fRec4 + 0]) + obj[dsp.fRec5 + 0]) + obj[dsp.fRec6 + 0]) + obj[dsp.fRec7 + 0]) + obj[dsp.fRec8 + 0]) + obj[dsp.fRec9 + 0]) + obj[dsp.fRec10 + 0]) + obj[dsp.fRec11 + 0]) + obj[dsp.fRec12 + 0]) + obj[dsp.fRec13 + 0]) + obj[dsp.fRec14 + 0]) + obj[dsp.fRec15 + 0]) + obj[dsp.fRec16 + 0]) + obj[dsp.fRec17 + 0])) + (obj[dsp.fSlow3] * fTemp4)) * fTemp2);
	fTemp78 = (fTemp1 * fTemp3);
	fTemp79 = pow((10.0000000000000000 * fTemp78), 2.0000000000000000);
	obj[dsp.fVec18 + 0] = fTemp79;
	fTemp80 = (((fTemp79 != obj[dsp.fVec18 + 1]) != 0) ? obj[dsp.fConst5] : (obj[dsp.fRec141 + 1] + -1.0000000000000000));
	obj[dsp.fRec141 + 0] = fTemp80;
	obj[dsp.fRec142 + 0] = (((fTemp80 > 0.0000000000000000) != 0) ? (obj[dsp.fRec142 + 1] + ((fTemp79 - obj[dsp.fRec142 + 1]) / fTemp80)) : fTemp79);
	obj[dsp.fRec140 + 0] = ((iTemp7 != 0) ? obj[dsp.fRec142 + 0] : obj[dsp.fRec140 + 1]);
	obj[dsp.fRec139 + 0] = ((iTemp6 != 0) ? (20.0000000000000000 * log10(max(0.0000000000000000, obj[dsp.fRec140 + 0]))) : obj[dsp.fRec139 + 1]);
	fTemp81 = (max(-30.0000000000000000, min(0.0000000000000000, obj[dsp.fRec139 + 0])) + 30.0000000000000000);
	obj[dsp.fVec19 + 0] = fTemp81;
	fTemp82 = (0.0333333350718021 * fTemp81);
	fTemp83 = (((fTemp82 != (0.0333333350718021 * obj[dsp.fVec19 + 1])) != 0) ? obj[dsp.fConst6] : (obj[dsp.fRec137 + 1] + -1.0000000000000000));
	obj[dsp.fRec137 + 0] = fTemp83;
	obj[dsp.fRec138 + 0] = (((fTemp83 > 0.0000000000000000) != 0) ? (obj[dsp.fRec138 + 1] + ((fTemp82 - obj[dsp.fRec138 + 1]) / fTemp83)) : fTemp82);
	fTemp84 = max(5.0000000000000000, min(90.0000000000000000, (90.0000000000000000 - (85.0000000000000000 * pow(obj[dsp.fRec138 + 0], 0.1000000014901161)))));
	obj[dsp.fRec145 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec145 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec136 + 1] - obj[dsp.fRec136 + 2])))));
	obj[dsp.fRec144 + 0] = (obj[dsp.fRec145 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec144 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec144 + 1]))));
	obj[dsp.fRec143 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec144 + 2] + (obj[dsp.fRec144 + 0] - (2.0000000000000000 * obj[dsp.fRec144 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec143 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec143 + 1]))));
	obj[dsp.fRec148 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec148 + 1]) - (obj[dsp.fRec136 + 1] + obj[dsp.fRec136 + 2]))));
	obj[dsp.fRec147 + 0] = (obj[dsp.fRec148 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec147 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec147 + 1]))));
	obj[dsp.fRec146 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec147 + 2] + (obj[dsp.fRec147 + 0] + (2.0000000000000000 * obj[dsp.fRec147 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec146 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec146 + 1]))));
	fTemp85 = (((obj[dsp.fRec146 + 2] + (obj[dsp.fRec146 + 0] + (2.0000000000000000 * obj[dsp.fRec146 + 1]))) * exp(-((0.5085834860801697 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec143 + 2] + (obj[dsp.fRec143 + 0] - (2.0000000000000000 * obj[dsp.fRec143 + 1]))) * exp(-((1.0171669721603394 / fTemp84))))));
	obj[dsp.fRec151 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec151 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec128 + 1] - obj[dsp.fRec128 + 2])))));
	obj[dsp.fRec150 + 0] = (obj[dsp.fRec151 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec150 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec150 + 1]))));
	obj[dsp.fRec149 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec150 + 2] + (obj[dsp.fRec150 + 0] - (2.0000000000000000 * obj[dsp.fRec150 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec149 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec149 + 1]))));
	obj[dsp.fRec154 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec154 + 1]) - (obj[dsp.fRec128 + 1] + obj[dsp.fRec128 + 2]))));
	obj[dsp.fRec153 + 0] = (obj[dsp.fRec154 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec153 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec153 + 1]))));
	obj[dsp.fRec152 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec153 + 2] + (obj[dsp.fRec153 + 0] + (2.0000000000000000 * obj[dsp.fRec153 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec152 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec152 + 1]))));
	fTemp86 = (((obj[dsp.fRec152 + 2] + (obj[dsp.fRec152 + 0] + (2.0000000000000000 * obj[dsp.fRec152 + 1]))) * exp(-((0.3881295025348663 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec149 + 2] + (obj[dsp.fRec149 + 0] - (2.0000000000000000 * obj[dsp.fRec149 + 1]))) * exp(-((0.7762590050697327 / fTemp84))))));
	fTemp87 = (fTemp86 + fTemp85);
	obj[dsp.fRec157 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec157 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec132 + 1] - obj[dsp.fRec132 + 2])))));
	obj[dsp.fRec156 + 0] = (obj[dsp.fRec157 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec156 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec156 + 1]))));
	obj[dsp.fRec155 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec156 + 2] + (obj[dsp.fRec156 + 0] - (2.0000000000000000 * obj[dsp.fRec156 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec155 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec155 + 1]))));
	obj[dsp.fRec160 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec160 + 1]) - (obj[dsp.fRec132 + 1] + obj[dsp.fRec132 + 2]))));
	obj[dsp.fRec159 + 0] = (obj[dsp.fRec160 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec159 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec159 + 1]))));
	obj[dsp.fRec158 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec159 + 2] + (obj[dsp.fRec159 + 0] + (2.0000000000000000 * obj[dsp.fRec159 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec158 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec158 + 1]))));
	fTemp88 = (((obj[dsp.fRec158 + 2] + (obj[dsp.fRec158 + 0] + (2.0000000000000000 * obj[dsp.fRec158 + 1]))) * exp(-((0.4485723674297333 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec155 + 2] + (obj[dsp.fRec155 + 0] - (2.0000000000000000 * obj[dsp.fRec155 + 1]))) * exp(-((0.8971447348594666 / fTemp84))))));
	obj[dsp.fRec163 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec163 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec124 + 1] - obj[dsp.fRec124 + 2])))));
	obj[dsp.fRec162 + 0] = (obj[dsp.fRec163 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec162 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec162 + 1]))));
	obj[dsp.fRec161 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec162 + 2] + (obj[dsp.fRec162 + 0] - (2.0000000000000000 * obj[dsp.fRec162 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec161 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec161 + 1]))));
	obj[dsp.fRec166 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec166 + 1]) - (obj[dsp.fRec124 + 1] + obj[dsp.fRec124 + 2]))));
	obj[dsp.fRec165 + 0] = (obj[dsp.fRec166 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec165 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec165 + 1]))));
	obj[dsp.fRec164 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec165 + 2] + (obj[dsp.fRec165 + 0] + (2.0000000000000000 * obj[dsp.fRec165 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec164 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec164 + 1]))));
	fTemp89 = (((obj[dsp.fRec164 + 2] + (obj[dsp.fRec164 + 0] + (2.0000000000000000 * obj[dsp.fRec164 + 1]))) * exp(-((0.3151663243770599 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec161 + 2] + (obj[dsp.fRec161 + 0] - (2.0000000000000000 * obj[dsp.fRec161 + 1]))) * exp(-((0.6303326487541199 / fTemp84))))));
	fTemp90 = (fTemp89 + fTemp88);
	fTemp91 = (fTemp90 + fTemp87);
	obj[dsp.fRec169 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec169 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec134 + 1] - obj[dsp.fRec134 + 2])))));
	obj[dsp.fRec168 + 0] = (obj[dsp.fRec169 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec168 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec168 + 1]))));
	obj[dsp.fRec167 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec168 + 2] + (obj[dsp.fRec168 + 0] - (2.0000000000000000 * obj[dsp.fRec168 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec167 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec167 + 1]))));
	obj[dsp.fRec172 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec172 + 1]) - (obj[dsp.fRec134 + 1] + obj[dsp.fRec134 + 2]))));
	obj[dsp.fRec171 + 0] = (obj[dsp.fRec172 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec171 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec171 + 1]))));
	obj[dsp.fRec170 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec171 + 2] + (obj[dsp.fRec171 + 0] + (2.0000000000000000 * obj[dsp.fRec171 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec170 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec170 + 1]))));
	fTemp92 = (((obj[dsp.fRec170 + 2] + (obj[dsp.fRec170 + 0] + (2.0000000000000000 * obj[dsp.fRec170 + 1]))) * exp(-((0.5016757249832153 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec167 + 2] + (obj[dsp.fRec167 + 0] - (2.0000000000000000 * obj[dsp.fRec167 + 1]))) * exp(-((1.0033514499664307 / fTemp84))))));
	obj[dsp.fRec175 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec175 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec126 + 1] - obj[dsp.fRec126 + 2])))));
	obj[dsp.fRec174 + 0] = (obj[dsp.fRec175 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec174 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec174 + 1]))));
	obj[dsp.fRec173 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec174 + 2] + (obj[dsp.fRec174 + 0] - (2.0000000000000000 * obj[dsp.fRec174 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec173 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec173 + 1]))));
	obj[dsp.fRec178 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec178 + 1]) - (obj[dsp.fRec126 + 1] + obj[dsp.fRec126 + 2]))));
	obj[dsp.fRec177 + 0] = (obj[dsp.fRec178 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec177 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec177 + 1]))));
	obj[dsp.fRec176 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec177 + 2] + (obj[dsp.fRec177 + 0] + (2.0000000000000000 * obj[dsp.fRec177 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec176 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec176 + 1]))));
	fTemp93 = (((obj[dsp.fRec176 + 2] + (obj[dsp.fRec176 + 0] + (2.0000000000000000 * obj[dsp.fRec176 + 1]))) * exp(-((0.3561811447143555 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec173 + 2] + (obj[dsp.fRec173 + 0] - (2.0000000000000000 * obj[dsp.fRec173 + 1]))) * exp(-((0.7123622894287109 / fTemp84))))));
	fTemp94 = (fTemp93 + fTemp92);
	obj[dsp.fRec181 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec181 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec130 + 1] - obj[dsp.fRec130 + 2])))));
	obj[dsp.fRec180 + 0] = (obj[dsp.fRec181 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec180 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec180 + 1]))));
	obj[dsp.fRec179 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec180 + 2] + (obj[dsp.fRec180 + 0] - (2.0000000000000000 * obj[dsp.fRec180 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec179 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec179 + 1]))));
	obj[dsp.fRec184 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec184 + 1]) - (obj[dsp.fRec130 + 1] + obj[dsp.fRec130 + 2]))));
	obj[dsp.fRec183 + 0] = (obj[dsp.fRec184 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec183 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec183 + 1]))));
	obj[dsp.fRec182 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec183 + 2] + (obj[dsp.fRec183 + 0] + (2.0000000000000000 * obj[dsp.fRec183 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec182 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec182 + 1]))));
	fTemp95 = (((obj[dsp.fRec182 + 2] + (obj[dsp.fRec182 + 0] + (2.0000000000000000 * obj[dsp.fRec182 + 1]))) * exp(-((0.4213730692863464 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec179 + 2] + (obj[dsp.fRec179 + 0] - (2.0000000000000000 * obj[dsp.fRec179 + 1]))) * exp(-((0.8427461385726929 / fTemp84))))));
	obj[dsp.fRec187 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec187 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec122 + 1] - obj[dsp.fRec122 + 2])))));
	obj[dsp.fRec186 + 0] = (obj[dsp.fRec187 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec186 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec186 + 1]))));
	obj[dsp.fRec185 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec186 + 2] + (obj[dsp.fRec186 + 0] - (2.0000000000000000 * obj[dsp.fRec186 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec185 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec185 + 1]))));
	obj[dsp.fRec190 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec190 + 1]) - (obj[dsp.fRec122 + 1] + obj[dsp.fRec122 + 2]))));
	obj[dsp.fRec189 + 0] = (obj[dsp.fRec190 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec189 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec189 + 1]))));
	obj[dsp.fRec188 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec189 + 2] + (obj[dsp.fRec189 + 0] + (2.0000000000000000 * obj[dsp.fRec189 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec188 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec188 + 1]))));
	fTemp96 = (((obj[dsp.fRec188 + 2] + (obj[dsp.fRec188 + 0] + (2.0000000000000000 * obj[dsp.fRec188 + 1]))) * exp(-((0.2737198173999786 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec185 + 2] + (obj[dsp.fRec185 + 0] - (2.0000000000000000 * obj[dsp.fRec185 + 1]))) * exp(-((0.5474396347999573 / fTemp84))))));
	fTemp97 = (fTemp96 + fTemp95);
	fTemp98 = (fTemp97 + fTemp94);
	fTemp99 = (fTemp98 + fTemp91);
	obj[dsp.fRec193 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec193 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec135 + 1] - obj[dsp.fRec135 + 2])))));
	obj[dsp.fRec192 + 0] = (obj[dsp.fRec193 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec192 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec192 + 1]))));
	obj[dsp.fRec191 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec192 + 2] + (obj[dsp.fRec192 + 0] - (2.0000000000000000 * obj[dsp.fRec192 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec191 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec191 + 1]))));
	obj[dsp.fRec196 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec196 + 1]) - (obj[dsp.fRec135 + 1] + obj[dsp.fRec135 + 2]))));
	obj[dsp.fRec195 + 0] = (obj[dsp.fRec196 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec195 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec195 + 1]))));
	obj[dsp.fRec194 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec195 + 2] + (obj[dsp.fRec195 + 0] + (2.0000000000000000 * obj[dsp.fRec195 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec194 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec194 + 1]))));
	fTemp100 = (((obj[dsp.fRec194 + 2] + (obj[dsp.fRec194 + 0] + (2.0000000000000000 * obj[dsp.fRec194 + 1]))) * exp(-((0.5021074414253235 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec191 + 2] + (obj[dsp.fRec191 + 0] - (2.0000000000000000 * obj[dsp.fRec191 + 1]))) * exp(-((1.0042148828506470 / fTemp84))))));
	obj[dsp.fRec199 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec199 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec127 + 1] - obj[dsp.fRec127 + 2])))));
	obj[dsp.fRec198 + 0] = (obj[dsp.fRec199 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec198 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec198 + 1]))));
	obj[dsp.fRec197 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec198 + 2] + (obj[dsp.fRec198 + 0] - (2.0000000000000000 * obj[dsp.fRec198 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec197 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec197 + 1]))));
	obj[dsp.fRec202 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec202 + 1]) - (obj[dsp.fRec127 + 1] + obj[dsp.fRec127 + 2]))));
	obj[dsp.fRec201 + 0] = (obj[dsp.fRec202 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec201 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec201 + 1]))));
	obj[dsp.fRec200 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec201 + 2] + (obj[dsp.fRec201 + 0] + (2.0000000000000000 * obj[dsp.fRec201 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec200 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec200 + 1]))));
	fTemp101 = (((obj[dsp.fRec200 + 2] + (obj[dsp.fRec200 + 0] + (2.0000000000000000 * obj[dsp.fRec200 + 1]))) * exp(-((0.3876977562904358 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec197 + 2] + (obj[dsp.fRec197 + 0] - (2.0000000000000000 * obj[dsp.fRec197 + 1]))) * exp(-((0.7753955125808716 / fTemp84))))));
	fTemp102 = (fTemp101 + fTemp100);
	obj[dsp.fRec205 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec205 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec131 + 1] - obj[dsp.fRec131 + 2])))));
	obj[dsp.fRec204 + 0] = (obj[dsp.fRec205 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec204 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec204 + 1]))));
	obj[dsp.fRec203 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec204 + 2] + (obj[dsp.fRec204 + 0] - (2.0000000000000000 * obj[dsp.fRec204 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec203 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec203 + 1]))));
	obj[dsp.fRec208 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec208 + 1]) - (obj[dsp.fRec131 + 1] + obj[dsp.fRec131 + 2]))));
	obj[dsp.fRec207 + 0] = (obj[dsp.fRec208 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec207 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec207 + 1]))));
	obj[dsp.fRec206 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec207 + 2] + (obj[dsp.fRec207 + 0] + (2.0000000000000000 * obj[dsp.fRec207 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec206 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec206 + 1]))));
	fTemp103 = (((obj[dsp.fRec206 + 2] + (obj[dsp.fRec206 + 0] + (2.0000000000000000 * obj[dsp.fRec206 + 1]))) * exp(-((0.4218048155307770 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec203 + 2] + (obj[dsp.fRec203 + 0] - (2.0000000000000000 * obj[dsp.fRec203 + 1]))) * exp(-((0.8436096310615540 / fTemp84))))));
	obj[dsp.fRec211 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec211 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec123 + 1] - obj[dsp.fRec123 + 2])))));
	obj[dsp.fRec210 + 0] = (obj[dsp.fRec211 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec210 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec210 + 1]))));
	obj[dsp.fRec209 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec210 + 2] + (obj[dsp.fRec210 + 0] - (2.0000000000000000 * obj[dsp.fRec210 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec209 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec209 + 1]))));
	obj[dsp.fRec214 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec214 + 1]) - (obj[dsp.fRec123 + 1] + obj[dsp.fRec123 + 2]))));
	obj[dsp.fRec213 + 0] = (obj[dsp.fRec214 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec213 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec213 + 1]))));
	obj[dsp.fRec212 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec213 + 2] + (obj[dsp.fRec213 + 0] + (2.0000000000000000 * obj[dsp.fRec213 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec212 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec212 + 1]))));
	fTemp104 = (((obj[dsp.fRec212 + 2] + (obj[dsp.fRec212 + 0] + (2.0000000000000000 * obj[dsp.fRec212 + 1]))) * exp(-((0.2741515338420868 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec209 + 2] + (obj[dsp.fRec209 + 0] - (2.0000000000000000 * obj[dsp.fRec209 + 1]))) * exp(-((0.5483030676841736 / fTemp84))))));
	fTemp105 = (fTemp104 + fTemp103);
	fTemp106 = (fTemp105 + fTemp102);
	obj[dsp.fRec217 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec217 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec133 + 1] - obj[dsp.fRec133 + 2])))));
	obj[dsp.fRec216 + 0] = (obj[dsp.fRec217 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec216 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec216 + 1]))));
	obj[dsp.fRec215 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec216 + 2] + (obj[dsp.fRec216 + 0] - (2.0000000000000000 * obj[dsp.fRec216 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec215 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec215 + 1]))));
	obj[dsp.fRec220 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec220 + 1]) - (obj[dsp.fRec133 + 1] + obj[dsp.fRec133 + 2]))));
	obj[dsp.fRec219 + 0] = (obj[dsp.fRec220 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec219 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec219 + 1]))));
	obj[dsp.fRec218 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec219 + 2] + (obj[dsp.fRec219 + 0] + (2.0000000000000000 * obj[dsp.fRec219 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec218 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec218 + 1]))));
	fTemp107 = (((obj[dsp.fRec218 + 2] + (obj[dsp.fRec218 + 0] + (2.0000000000000000 * obj[dsp.fRec218 + 1]))) * exp(-((0.4779303073883057 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec215 + 2] + (obj[dsp.fRec215 + 0] - (2.0000000000000000 * obj[dsp.fRec215 + 1]))) * exp(-((0.9558606147766113 / fTemp84))))));
	obj[dsp.fRec223 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec223 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec125 + 1] - obj[dsp.fRec125 + 2])))));
	obj[dsp.fRec222 + 0] = (obj[dsp.fRec223 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec222 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec222 + 1]))));
	obj[dsp.fRec221 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec222 + 2] + (obj[dsp.fRec222 + 0] - (2.0000000000000000 * obj[dsp.fRec222 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec221 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec221 + 1]))));
	obj[dsp.fRec226 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec226 + 1]) - (obj[dsp.fRec125 + 1] + obj[dsp.fRec125 + 2]))));
	obj[dsp.fRec225 + 0] = (obj[dsp.fRec226 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec225 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec225 + 1]))));
	obj[dsp.fRec224 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec225 + 2] + (obj[dsp.fRec225 + 0] + (2.0000000000000000 * obj[dsp.fRec225 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec224 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec224 + 1]))));
	fTemp108 = (((obj[dsp.fRec224 + 2] + (obj[dsp.fRec224 + 0] + (2.0000000000000000 * obj[dsp.fRec224 + 1]))) * exp(-((0.3557493984699249 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec221 + 2] + (obj[dsp.fRec221 + 0] - (2.0000000000000000 * obj[dsp.fRec221 + 1]))) * exp(-((0.7114987969398499 / fTemp84))))));
	fTemp109 = (fTemp108 + fTemp107);
	obj[dsp.fRec229 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec229 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec129 + 1] - obj[dsp.fRec129 + 2])))));
	obj[dsp.fRec228 + 0] = (obj[dsp.fRec229 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec228 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec228 + 1]))));
	obj[dsp.fRec227 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec228 + 2] + (obj[dsp.fRec228 + 0] - (2.0000000000000000 * obj[dsp.fRec228 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec227 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec227 + 1]))));
	obj[dsp.fRec232 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec232 + 1]) - (obj[dsp.fRec129 + 1] + obj[dsp.fRec129 + 2]))));
	obj[dsp.fRec231 + 0] = (obj[dsp.fRec232 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec231 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec231 + 1]))));
	obj[dsp.fRec230 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec231 + 2] + (obj[dsp.fRec231 + 0] + (2.0000000000000000 * obj[dsp.fRec231 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec230 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec230 + 1]))));
	fTemp110 = (((obj[dsp.fRec230 + 2] + (obj[dsp.fRec230 + 0] + (2.0000000000000000 * obj[dsp.fRec230 + 1]))) * exp(-((0.3967641890048981 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec227 + 2] + (obj[dsp.fRec227 + 0] - (2.0000000000000000 * obj[dsp.fRec227 + 1]))) * exp(-((0.7935283780097961 / fTemp84))))));
	obj[dsp.fRec235 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec235 + 1]) - (obj[dsp.fConst11] * (obj[dsp.fRec121 + 1] - obj[dsp.fRec121 + 2])))));
	obj[dsp.fRec234 + 0] = (obj[dsp.fRec235 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec234 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec234 + 1]))));
	obj[dsp.fRec233 + 0] = ((obj[dsp.fConst20] * (obj[dsp.fRec234 + 2] + (obj[dsp.fRec234 + 0] - (2.0000000000000000 * obj[dsp.fRec234 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec233 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec233 + 1]))));
	obj[dsp.fRec238 + 0] = -((obj[dsp.fConst19] * ((obj[dsp.fConst18] * obj[dsp.fRec238 + 1]) - (obj[dsp.fRec121 + 1] + obj[dsp.fRec121 + 2]))));
	obj[dsp.fRec237 + 0] = (obj[dsp.fRec238 + 0] - (obj[dsp.fConst17] * ((obj[dsp.fConst15] * obj[dsp.fRec237 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec237 + 1]))));
	obj[dsp.fRec236 + 0] = ((obj[dsp.fConst17] * (obj[dsp.fRec237 + 2] + (obj[dsp.fRec237 + 0] + (2.0000000000000000 * obj[dsp.fRec237 + 1])))) - (obj[dsp.fConst14] * ((obj[dsp.fConst12] * obj[dsp.fRec236 + 2]) + (obj[dsp.fConst10] * obj[dsp.fRec236 + 1]))));
	fTemp111 = (((obj[dsp.fRec236 + 2] + (obj[dsp.fRec236 + 0] + (2.0000000000000000 * obj[dsp.fRec236 + 1]))) * exp(-((0.2171625494956970 / fTemp84)))) + (obj[dsp.fConst9] * ((obj[dsp.fRec233 + 2] + (obj[dsp.fRec233 + 0] - (2.0000000000000000 * obj[dsp.fRec233 + 1]))) * exp(-((0.4343250989913940 / fTemp84))))));
	fTemp112 = (fTemp111 + fTemp110);
	fTemp113 = (fTemp112 + fTemp109);
	fTemp114 = (fTemp113 + fTemp106);
	obj[dsp.fVec20 + (obj[dsp.IOTA0] & 8191)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp114 + fTemp99)));
	obj[dsp.fRec121 + 0] = obj[dsp.fVec20 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst38])) & 8191)];
	obj[dsp.fVec21 + (obj[dsp.IOTA0] & 8191)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp114 - fTemp99)));
	obj[dsp.fRec122 + 0] = obj[dsp.fVec21 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst39])) & 8191)];
	fTemp115 = (fTemp98 - fTemp91);
	fTemp116 = (fTemp113 - fTemp106);
	obj[dsp.fVec22 + (obj[dsp.IOTA0] & 8191)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp116 + fTemp115)));
	obj[dsp.fRec123 + 0] = obj[dsp.fVec22 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst40])) & 8191)];
	obj[dsp.fVec23 + (obj[dsp.IOTA0] & 16383)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp116 - fTemp115)));
	obj[dsp.fRec124 + 0] = obj[dsp.fVec23 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst41])) & 16383)];
	fTemp117 = (fTemp90 - fTemp87);
	fTemp118 = (fTemp97 - fTemp94);
	fTemp119 = (fTemp118 + fTemp117);
	fTemp120 = (fTemp105 - fTemp102);
	fTemp121 = (fTemp112 - fTemp109);
	fTemp122 = (fTemp121 + fTemp120);
	obj[dsp.fVec24 + (obj[dsp.IOTA0] & 16383)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp122 + fTemp119)));
	obj[dsp.fRec125 + 0] = obj[dsp.fVec24 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst42])) & 16383)];
	obj[dsp.fVec25 + (obj[dsp.IOTA0] & 16383)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp122 - fTemp119)));
	obj[dsp.fRec126 + 0] = obj[dsp.fVec25 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst43])) & 16383)];
	fTemp123 = (fTemp118 - fTemp117);
	fTemp124 = (fTemp121 - fTemp120);
	obj[dsp.fVec26 + (obj[dsp.IOTA0] & 16383)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp124 + fTemp123)));
	obj[dsp.fRec127 + 0] = obj[dsp.fVec26 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst44])) & 16383)];
	obj[dsp.fVec27 + (obj[dsp.IOTA0] & 16383)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp124 - fTemp123)));
	obj[dsp.fRec128 + 0] = obj[dsp.fVec27 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst45])) & 16383)];
	fTemp125 = (fTemp86 - fTemp85);
	fTemp126 = (fTemp89 - fTemp88);
	fTemp127 = (fTemp126 + fTemp125);
	fTemp128 = (fTemp93 - fTemp92);
	fTemp129 = (fTemp96 - fTemp95);
	fTemp130 = (fTemp129 + fTemp128);
	fTemp131 = (fTemp130 + fTemp127);
	fTemp132 = (fTemp101 - fTemp100);
	fTemp133 = (fTemp104 - fTemp103);
	fTemp134 = (fTemp133 + fTemp132);
	fTemp135 = (fTemp108 - fTemp107);
	fTemp136 = (fTemp111 - fTemp110);
	fTemp137 = (fTemp136 + fTemp135);
	fTemp138 = (fTemp137 + fTemp134);
	obj[dsp.fVec28 + (obj[dsp.IOTA0] & 16383)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp138 + fTemp131)));
	obj[dsp.fRec129 + 0] = obj[dsp.fVec28 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst46])) & 16383)];
	obj[dsp.fVec29 + (obj[dsp.IOTA0] & 16383)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp138 - fTemp131)));
	obj[dsp.fRec130 + 0] = obj[dsp.fVec29 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst47])) & 16383)];
	fTemp139 = (fTemp130 - fTemp127);
	fTemp140 = (fTemp137 - fTemp134);
	obj[dsp.fVec30 + (obj[dsp.IOTA0] & 16383)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp140 + fTemp139)));
	obj[dsp.fRec131 + 0] = obj[dsp.fVec30 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst48])) & 16383)];
	obj[dsp.fVec31 + (obj[dsp.IOTA0] & 16383)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp140 - fTemp139)));
	obj[dsp.fRec132 + 0] = obj[dsp.fVec31 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst49])) & 16383)];
	fTemp141 = (fTemp126 - fTemp125);
	fTemp142 = (fTemp129 - fTemp128);
	fTemp143 = (fTemp142 + fTemp141);
	fTemp144 = (fTemp133 - fTemp132);
	fTemp145 = (fTemp136 - fTemp135);
	fTemp146 = (fTemp145 + fTemp144);
	obj[dsp.fVec32 + (obj[dsp.IOTA0] & 16383)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp146 + fTemp143)));
	obj[dsp.fRec133 + 0] = obj[dsp.fVec32 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst50])) & 16383)];
	obj[dsp.fVec33 + (obj[dsp.IOTA0] & 16383)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp146 - fTemp143)));
	obj[dsp.fRec134 + 0] = obj[dsp.fVec33 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst51])) & 16383)];
	fTemp147 = (fTemp142 - fTemp141);
	fTemp148 = (fTemp145 - fTemp144);
	obj[dsp.fVec34 + (obj[dsp.IOTA0] & 16383)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp148 + fTemp147)));
	obj[dsp.fRec135 + 0] = obj[dsp.fVec34 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst52])) & 16383)];
	obj[dsp.fVec35 + (obj[dsp.IOTA0] & 16383)] = (fTemp78 + (obj[dsp.fConst21] * (fTemp148 - fTemp147)));
	obj[dsp.fRec136 + 0] = obj[dsp.fVec35 + (int32(sub32(obj[dsp.IOTA0], obj[dsp.iConst53])) & 16383)];
	obj[dsp.output1] = (fTemp2 * ((obj[dsp.fSlow2] * (((((((((((((((obj[dsp.fRec121 + 0] + obj[dsp.fRec122 + 0]) + obj[dsp.fRec123 + 0]) + obj[dsp.fRec124 + 0]) + obj[dsp.fRec125 + 0]) + obj[dsp.fRec126 + 0]) + obj[dsp.fRec127 + 0]) + obj[dsp.fRec128 + 0]) + obj[dsp.fRec129 + 0]) + obj[dsp.fRec130 + 0]) + obj[dsp.fRec131 + 0]) + obj[dsp.fRec132 + 0]) + obj[dsp.fRec133 + 0]) + obj[dsp.fRec134 + 0]) + obj[dsp.fRec135 + 0]) + obj[dsp.fRec136 + 0])) + (obj[dsp.fSlow3] * fTemp78)));
	obj[dsp.fRec0 + 1] = obj[dsp.fRec0 + 0];
	obj[dsp.fRec1 + 1] = obj[dsp.fRec1 + 0];
	obj[dsp.iRec21 + 1] = obj[dsp.iRec21 + 0];
	obj[dsp.fVec0 + 1] = obj[dsp.fVec0 + 0];
	obj[dsp.fRec23 + 1] = obj[dsp.fRec23 + 0];
	obj[dsp.fRec24 + 1] = obj[dsp.fRec24 + 0];
	obj[dsp.fRec22 + 1] = obj[dsp.fRec22 + 0];
	obj[dsp.fRec20 + 1] = obj[dsp.fRec20 + 0];
	obj[dsp.fVec1 + 1] = obj[dsp.fVec1 + 0];
	obj[dsp.fRec18 + 1] = obj[dsp.fRec18 + 0];
	obj[dsp.fRec19 + 1] = obj[dsp.fRec19 + 0];
	obj[dsp.fRec27 + 1] = obj[dsp.fRec27 + 0];
	obj[dsp.fRec26 + 2] = obj[dsp.fRec26 + 1];
	obj[dsp.fRec26 + 1] = obj[dsp.fRec26 + 0];
	obj[dsp.fRec25 + 2] = obj[dsp.fRec25 + 1];
	obj[dsp.fRec25 + 1] = obj[dsp.fRec25 + 0];
	obj[dsp.fRec30 + 1] = obj[dsp.fRec30 + 0];
	obj[dsp.fRec29 + 2] = obj[dsp.fRec29 + 1];
	obj[dsp.fRec29 + 1] = obj[dsp.fRec29 + 0];
	obj[dsp.fRec28 + 2] = obj[dsp.fRec28 + 1];
	obj[dsp.fRec28 + 1] = obj[dsp.fRec28 + 0];
	obj[dsp.fRec33 + 1] = obj[dsp.fRec33 + 0];
	obj[dsp.fRec32 + 2] = obj[dsp.fRec32 + 1];
	obj[dsp.fRec32 + 1] = obj[dsp.fRec32 + 0];
	obj[dsp.fRec31 + 2] = obj[dsp.fRec31 + 1];
	obj[dsp.fRec31 + 1] = obj[dsp.fRec31 + 0];
	obj[dsp.fRec36 + 1] = obj[dsp.fRec36 + 0];
	obj[dsp.fRec35 + 2] = obj[dsp.fRec35 + 1];
	obj[dsp.fRec35 + 1] = obj[dsp.fRec35 + 0];
	obj[dsp.fRec34 + 2] = obj[dsp.fRec34 + 1];
	obj[dsp.fRec34 + 1] = obj[dsp.fRec34 + 0];
	obj[dsp.fRec39 + 1] = obj[dsp.fRec39 + 0];
	obj[dsp.fRec38 + 2] = obj[dsp.fRec38 + 1];
	obj[dsp.fRec38 + 1] = obj[dsp.fRec38 + 0];
	obj[dsp.fRec37 + 2] = obj[dsp.fRec37 + 1];
	obj[dsp.fRec37 + 1] = obj[dsp.fRec37 + 0];
	obj[dsp.fRec42 + 1] = obj[dsp.fRec42 + 0];
	obj[dsp.fRec41 + 2] = obj[dsp.fRec41 + 1];
	obj[dsp.fRec41 + 1] = obj[dsp.fRec41 + 0];
	obj[dsp.fRec40 + 2] = obj[dsp.fRec40 + 1];
	obj[dsp.fRec40 + 1] = obj[dsp.fRec40 + 0];
	obj[dsp.fRec45 + 1] = obj[dsp.fRec45 + 0];
	obj[dsp.fRec44 + 2] = obj[dsp.fRec44 + 1];
	obj[dsp.fRec44 + 1] = obj[dsp.fRec44 + 0];
	obj[dsp.fRec43 + 2] = obj[dsp.fRec43 + 1];
	obj[dsp.fRec43 + 1] = obj[dsp.fRec43 + 0];
	obj[dsp.fRec48 + 1] = obj[dsp.fRec48 + 0];
	obj[dsp.fRec47 + 2] = obj[dsp.fRec47 + 1];
	obj[dsp.fRec47 + 1] = obj[dsp.fRec47 + 0];
	obj[dsp.fRec46 + 2] = obj[dsp.fRec46 + 1];
	obj[dsp.fRec46 + 1] = obj[dsp.fRec46 + 0];
	obj[dsp.fRec51 + 1] = obj[dsp.fRec51 + 0];
	obj[dsp.fRec50 + 2] = obj[dsp.fRec50 + 1];
	obj[dsp.fRec50 + 1] = obj[dsp.fRec50 + 0];
	obj[dsp.fRec49 + 2] = obj[dsp.fRec49 + 1];
	obj[dsp.fRec49 + 1] = obj[dsp.fRec49 + 0];
	obj[dsp.fRec54 + 1] = obj[dsp.fRec54 + 0];
	obj[dsp.fRec53 + 2] = obj[dsp.fRec53 + 1];
	obj[dsp.fRec53 + 1] = obj[dsp.fRec53 + 0];
	obj[dsp.fRec52 + 2] = obj[dsp.fRec52 + 1];
	obj[dsp.fRec52 + 1] = obj[dsp.fRec52 + 0];
	obj[dsp.fRec57 + 1] = obj[dsp.fRec57 + 0];
	obj[dsp.fRec56 + 2] = obj[dsp.fRec56 + 1];
	obj[dsp.fRec56 + 1] = obj[dsp.fRec56 + 0];
	obj[dsp.fRec55 + 2] = obj[dsp.fRec55 + 1];
	obj[dsp.fRec55 + 1] = obj[dsp.fRec55 + 0];
	obj[dsp.fRec60 + 1] = obj[dsp.fRec60 + 0];
	obj[dsp.fRec59 + 2] = obj[dsp.fRec59 + 1];
	obj[dsp.fRec59 + 1] = obj[dsp.fRec59 + 0];
	obj[dsp.fRec58 + 2] = obj[dsp.fRec58 + 1];
	obj[dsp.fRec58 + 1] = obj[dsp.fRec58 + 0];
	obj[dsp.fRec63 + 1] = obj[dsp.fRec63 + 0];
	obj[dsp.fRec62 + 2] = obj[dsp.fRec62 + 1];
	obj[dsp.fRec62 + 1] = obj[dsp.fRec62 + 0];
	obj[dsp.fRec61 + 2] = obj[dsp.fRec61 + 1];
	obj[dsp.fRec61 + 1] = obj[dsp.fRec61 + 0];
	obj[dsp.fRec66 + 1] = obj[dsp.fRec66 + 0];
	obj[dsp.fRec65 + 2] = obj[dsp.fRec65 + 1];
	obj[dsp.fRec65 + 1] = obj[dsp.fRec65 + 0];
	obj[dsp.fRec64 + 2] = obj[dsp.fRec64 + 1];
	obj[dsp.fRec64 + 1] = obj[dsp.fRec64 + 0];
	obj[dsp.fRec69 + 1] = obj[dsp.fRec69 + 0];
	obj[dsp.fRec68 + 2] = obj[dsp.fRec68 + 1];
	obj[dsp.fRec68 + 1] = obj[dsp.fRec68 + 0];
	obj[dsp.fRec67 + 2] = obj[dsp.fRec67 + 1];
	obj[dsp.fRec67 + 1] = obj[dsp.fRec67 + 0];
	obj[dsp.fRec72 + 1] = obj[dsp.fRec72 + 0];
	obj[dsp.fRec71 + 2] = obj[dsp.fRec71 + 1];
	obj[dsp.fRec71 + 1] = obj[dsp.fRec71 + 0];
	obj[dsp.fRec70 + 2] = obj[dsp.fRec70 + 1];
	obj[dsp.fRec70 + 1] = obj[dsp.fRec70 + 0];
	obj[dsp.fRec75 + 1] = obj[dsp.fRec75 + 0];
	obj[dsp.fRec74 + 2] = obj[dsp.fRec74 + 1];
	obj[dsp.fRec74 + 1] = obj[dsp.fRec74 + 0];
	obj[dsp.fRec73 + 2] = obj[dsp.fRec73 + 1];
	obj[dsp.fRec73 + 1] = obj[dsp.fRec73 + 0];
	obj[dsp.fRec78 + 1] = obj[dsp.fRec78 + 0];
	obj[dsp.fRec77 + 2] = obj[dsp.fRec77 + 1];
	obj[dsp.fRec77 + 1] = obj[dsp.fRec77 + 0];
	obj[dsp.fRec76 + 2] = obj[dsp.fRec76 + 1];
	obj[dsp.fRec76 + 1] = obj[dsp.fRec76 + 0];
	obj[dsp.fRec81 + 1] = obj[dsp.fRec81 + 0];
	obj[dsp.fRec80 + 2] = obj[dsp.fRec80 + 1];
	obj[dsp.fRec80 + 1] = obj[dsp.fRec80 + 0];
	obj[dsp.fRec79 + 2] = obj[dsp.fRec79 + 1];
	obj[dsp.fRec79 + 1] = obj[dsp.fRec79 + 0];
	obj[dsp.fRec84 + 1] = obj[dsp.fRec84 + 0];
	obj[dsp.fRec83 + 2] = obj[dsp.fRec83 + 1];
	obj[dsp.fRec83 + 1] = obj[dsp.fRec83 + 0];
	obj[dsp.fRec82 + 2] = obj[dsp.fRec82 + 1];
	obj[dsp.fRec82 + 1] = obj[dsp.fRec82 + 0];
	obj[dsp.fRec87 + 1] = obj[dsp.fRec87 + 0];
	obj[dsp.fRec86 + 2] = obj[dsp.fRec86 + 1];
	obj[dsp.fRec86 + 1] = obj[dsp.fRec86 + 0];
	obj[dsp.fRec85 + 2] = obj[dsp.fRec85 + 1];
	obj[dsp.fRec85 + 1] = obj[dsp.fRec85 + 0];
	obj[dsp.fRec90 + 1] = obj[dsp.fRec90 + 0];
	obj[dsp.fRec89 + 2] = obj[dsp.fRec89 + 1];
	obj[dsp.fRec89 + 1] = obj[dsp.fRec89 + 0];
	obj[dsp.fRec88 + 2] = obj[dsp.fRec88 + 1];
	obj[dsp.fRec88 + 1] = obj[dsp.fRec88 + 0];
	obj[dsp.fRec93 + 1] = obj[dsp.fRec93 + 0];
	obj[dsp.fRec92 + 2] = obj[dsp.fRec92 + 1];
	obj[dsp.fRec92 + 1] = obj[dsp.fRec92 + 0];
	obj[dsp.fRec91 + 2] = obj[dsp.fRec91 + 1];
	obj[dsp.fRec91 + 1] = obj[dsp.fRec91 + 0];
	obj[dsp.fRec96 + 1] = obj[dsp.fRec96 + 0];
	obj[dsp.fRec95 + 2] = obj[dsp.fRec95 + 1];
	obj[dsp.fRec95 + 1] = obj[dsp.fRec95 + 0];
	obj[dsp.fRec94 + 2] = obj[dsp.fRec94 + 1];
	obj[dsp.fRec94 + 1] = obj[dsp.fRec94 + 0];
	obj[dsp.fRec99 + 1] = obj[dsp.fRec99 + 0];
	obj[dsp.fRec98 + 2] = obj[dsp.fRec98 + 1];
	obj[dsp.fRec98 + 1] = obj[dsp.fRec98 + 0];
	obj[dsp.fRec97 + 2] = obj[dsp.fRec97 + 1];
	obj[dsp.fRec97 + 1] = obj[dsp.fRec97 + 0];
	obj[dsp.fRec102 + 1] = obj[dsp.fRec102 + 0];
	obj[dsp.fRec101 + 2] = obj[dsp.fRec101 + 1];
	obj[dsp.fRec101 + 1] = obj[dsp.fRec101 + 0];
	obj[dsp.fRec100 + 2] = obj[dsp.fRec100 + 1];
	obj[dsp.fRec100 + 1] = obj[dsp.fRec100 + 0];
	obj[dsp.fRec105 + 1] = obj[dsp.fRec105 + 0];
	obj[dsp.fRec104 + 2] = obj[dsp.fRec104 + 1];
	obj[dsp.fRec104 + 1] = obj[dsp.fRec104 + 0];
	obj[dsp.fRec103 + 2] = obj[dsp.fRec103 + 1];
	obj[dsp.fRec103 + 1] = obj[dsp.fRec103 + 0];
	obj[dsp.fRec108 + 1] = obj[dsp.fRec108 + 0];
	obj[dsp.fRec107 + 2] = obj[dsp.fRec107 + 1];
	obj[dsp.fRec107 + 1] = obj[dsp.fRec107 + 0];
	obj[dsp.fRec106 + 2] = obj[dsp.fRec106 + 1];
	obj[dsp.fRec106 + 1] = obj[dsp.fRec106 + 0];
	obj[dsp.fRec111 + 1] = obj[dsp.fRec111 + 0];
	obj[dsp.fRec110 + 2] = obj[dsp.fRec110 + 1];
	obj[dsp.fRec110 + 1] = obj[dsp.fRec110 + 0];
	obj[dsp.fRec109 + 2] = obj[dsp.fRec109 + 1];
	obj[dsp.fRec109 + 1] = obj[dsp.fRec109 + 0];
	obj[dsp.fRec114 + 1] = obj[dsp.fRec114 + 0];
	obj[dsp.fRec113 + 2] = obj[dsp.fRec113 + 1];
	obj[dsp.fRec113 + 1] = obj[dsp.fRec113 + 0];
	obj[dsp.fRec112 + 2] = obj[dsp.fRec112 + 1];
	obj[dsp.fRec112 + 1] = obj[dsp.fRec112 + 0];
	obj[dsp.fRec117 + 1] = obj[dsp.fRec117 + 0];
	obj[dsp.fRec116 + 2] = obj[dsp.fRec116 + 1];
	obj[dsp.fRec116 + 1] = obj[dsp.fRec116 + 0];
	obj[dsp.fRec115 + 2] = obj[dsp.fRec115 + 1];
	obj[dsp.fRec115 + 1] = obj[dsp.fRec115 + 0];
	obj[dsp.fRec120 + 1] = obj[dsp.fRec120 + 0];
	obj[dsp.fRec119 + 2] = obj[dsp.fRec119 + 1];
	obj[dsp.fRec119 + 1] = obj[dsp.fRec119 + 0];
	obj[dsp.fRec118 + 2] = obj[dsp.fRec118 + 1];
	obj[dsp.fRec118 + 1] = obj[dsp.fRec118 + 0];
	obj[dsp.IOTA0] = int32(add32(obj[dsp.IOTA0], 1));
	obj[dsp.fRec2 + 2] = obj[dsp.fRec2 + 1];
	obj[dsp.fRec2 + 1] = obj[dsp.fRec2 + 0];
	obj[dsp.fRec3 + 2] = obj[dsp.fRec3 + 1];
	obj[dsp.fRec3 + 1] = obj[dsp.fRec3 + 0];
	obj[dsp.fRec4 + 2] = obj[dsp.fRec4 + 1];
	obj[dsp.fRec4 + 1] = obj[dsp.fRec4 + 0];
	obj[dsp.fRec5 + 2] = obj[dsp.fRec5 + 1];
	obj[dsp.fRec5 + 1] = obj[dsp.fRec5 + 0];
	obj[dsp.fRec6 + 2] = obj[dsp.fRec6 + 1];
	obj[dsp.fRec6 + 1] = obj[dsp.fRec6 + 0];
	obj[dsp.fRec7 + 2] = obj[dsp.fRec7 + 1];
	obj[dsp.fRec7 + 1] = obj[dsp.fRec7 + 0];
	obj[dsp.fRec8 + 2] = obj[dsp.fRec8 + 1];
	obj[dsp.fRec8 + 1] = obj[dsp.fRec8 + 0];
	obj[dsp.fRec9 + 2] = obj[dsp.fRec9 + 1];
	obj[dsp.fRec9 + 1] = obj[dsp.fRec9 + 0];
	obj[dsp.fRec10 + 2] = obj[dsp.fRec10 + 1];
	obj[dsp.fRec10 + 1] = obj[dsp.fRec10 + 0];
	obj[dsp.fRec11 + 2] = obj[dsp.fRec11 + 1];
	obj[dsp.fRec11 + 1] = obj[dsp.fRec11 + 0];
	obj[dsp.fRec12 + 2] = obj[dsp.fRec12 + 1];
	obj[dsp.fRec12 + 1] = obj[dsp.fRec12 + 0];
	obj[dsp.fRec13 + 2] = obj[dsp.fRec13 + 1];
	obj[dsp.fRec13 + 1] = obj[dsp.fRec13 + 0];
	obj[dsp.fRec14 + 2] = obj[dsp.fRec14 + 1];
	obj[dsp.fRec14 + 1] = obj[dsp.fRec14 + 0];
	obj[dsp.fRec15 + 2] = obj[dsp.fRec15 + 1];
	obj[dsp.fRec15 + 1] = obj[dsp.fRec15 + 0];
	obj[dsp.fRec16 + 2] = obj[dsp.fRec16 + 1];
	obj[dsp.fRec16 + 1] = obj[dsp.fRec16 + 0];
	obj[dsp.fRec17 + 2] = obj[dsp.fRec17 + 1];
	obj[dsp.fRec17 + 1] = obj[dsp.fRec17 + 0];
	obj[dsp.fVec18 + 1] = obj[dsp.fVec18 + 0];
	obj[dsp.fRec141 + 1] = obj[dsp.fRec141 + 0];
	obj[dsp.fRec142 + 1] = obj[dsp.fRec142 + 0];
	obj[dsp.fRec140 + 1] = obj[dsp.fRec140 + 0];
	obj[dsp.fRec139 + 1] = obj[dsp.fRec139 + 0];
	obj[dsp.fVec19 + 1] = obj[dsp.fVec19 + 0];
	obj[dsp.fRec137 + 1] = obj[dsp.fRec137 + 0];
	obj[dsp.fRec138 + 1] = obj[dsp.fRec138 + 0];
	obj[dsp.fRec145 + 1] = obj[dsp.fRec145 + 0];
	obj[dsp.fRec144 + 2] = obj[dsp.fRec144 + 1];
	obj[dsp.fRec144 + 1] = obj[dsp.fRec144 + 0];
	obj[dsp.fRec143 + 2] = obj[dsp.fRec143 + 1];
	obj[dsp.fRec143 + 1] = obj[dsp.fRec143 + 0];
	obj[dsp.fRec148 + 1] = obj[dsp.fRec148 + 0];
	obj[dsp.fRec147 + 2] = obj[dsp.fRec147 + 1];
	obj[dsp.fRec147 + 1] = obj[dsp.fRec147 + 0];
	obj[dsp.fRec146 + 2] = obj[dsp.fRec146 + 1];
	obj[dsp.fRec146 + 1] = obj[dsp.fRec146 + 0];
	obj[dsp.fRec151 + 1] = obj[dsp.fRec151 + 0];
	obj[dsp.fRec150 + 2] = obj[dsp.fRec150 + 1];
	obj[dsp.fRec150 + 1] = obj[dsp.fRec150 + 0];
	obj[dsp.fRec149 + 2] = obj[dsp.fRec149 + 1];
	obj[dsp.fRec149 + 1] = obj[dsp.fRec149 + 0];
	obj[dsp.fRec154 + 1] = obj[dsp.fRec154 + 0];
	obj[dsp.fRec153 + 2] = obj[dsp.fRec153 + 1];
	obj[dsp.fRec153 + 1] = obj[dsp.fRec153 + 0];
	obj[dsp.fRec152 + 2] = obj[dsp.fRec152 + 1];
	obj[dsp.fRec152 + 1] = obj[dsp.fRec152 + 0];
	obj[dsp.fRec157 + 1] = obj[dsp.fRec157 + 0];
	obj[dsp.fRec156 + 2] = obj[dsp.fRec156 + 1];
	obj[dsp.fRec156 + 1] = obj[dsp.fRec156 + 0];
	obj[dsp.fRec155 + 2] = obj[dsp.fRec155 + 1];
	obj[dsp.fRec155 + 1] = obj[dsp.fRec155 + 0];
	obj[dsp.fRec160 + 1] = obj[dsp.fRec160 + 0];
	obj[dsp.fRec159 + 2] = obj[dsp.fRec159 + 1];
	obj[dsp.fRec159 + 1] = obj[dsp.fRec159 + 0];
	obj[dsp.fRec158 + 2] = obj[dsp.fRec158 + 1];
	obj[dsp.fRec158 + 1] = obj[dsp.fRec158 + 0];
	obj[dsp.fRec163 + 1] = obj[dsp.fRec163 + 0];
	obj[dsp.fRec162 + 2] = obj[dsp.fRec162 + 1];
	obj[dsp.fRec162 + 1] = obj[dsp.fRec162 + 0];
	obj[dsp.fRec161 + 2] = obj[dsp.fRec161 + 1];
	obj[dsp.fRec161 + 1] = obj[dsp.fRec161 + 0];
	obj[dsp.fRec166 + 1] = obj[dsp.fRec166 + 0];
	obj[dsp.fRec165 + 2] = obj[dsp.fRec165 + 1];
	obj[dsp.fRec165 + 1] = obj[dsp.fRec165 + 0];
	obj[dsp.fRec164 + 2] = obj[dsp.fRec164 + 1];
	obj[dsp.fRec164 + 1] = obj[dsp.fRec164 + 0];
	obj[dsp.fRec169 + 1] = obj[dsp.fRec169 + 0];
	obj[dsp.fRec168 + 2] = obj[dsp.fRec168 + 1];
	obj[dsp.fRec168 + 1] = obj[dsp.fRec168 + 0];
	obj[dsp.fRec167 + 2] = obj[dsp.fRec167 + 1];
	obj[dsp.fRec167 + 1] = obj[dsp.fRec167 + 0];
	obj[dsp.fRec172 + 1] = obj[dsp.fRec172 + 0];
	obj[dsp.fRec171 + 2] = obj[dsp.fRec171 + 1];
	obj[dsp.fRec171 + 1] = obj[dsp.fRec171 + 0];
	obj[dsp.fRec170 + 2] = obj[dsp.fRec170 + 1];
	obj[dsp.fRec170 + 1] = obj[dsp.fRec170 + 0];
	obj[dsp.fRec175 + 1] = obj[dsp.fRec175 + 0];
	obj[dsp.fRec174 + 2] = obj[dsp.fRec174 + 1];
	obj[dsp.fRec174 + 1] = obj[dsp.fRec174 + 0];
	obj[dsp.fRec173 + 2] = obj[dsp.fRec173 + 1];
	obj[dsp.fRec173 + 1] = obj[dsp.fRec173 + 0];
	obj[dsp.fRec178 + 1] = obj[dsp.fRec178 + 0];
	obj[dsp.fRec177 + 2] = obj[dsp.fRec177 + 1];
	obj[dsp.fRec177 + 1] = obj[dsp.fRec177 + 0];
	obj[dsp.fRec176 + 2] = obj[dsp.fRec176 + 1];
	obj[dsp.fRec176 + 1] = obj[dsp.fRec176 + 0];
	obj[dsp.fRec181 + 1] = obj[dsp.fRec181 + 0];
	obj[dsp.fRec180 + 2] = obj[dsp.fRec180 + 1];
	obj[dsp.fRec180 + 1] = obj[dsp.fRec180 + 0];
	obj[dsp.fRec179 + 2] = obj[dsp.fRec179 + 1];
	obj[dsp.fRec179 + 1] = obj[dsp.fRec179 + 0];
	obj[dsp.fRec184 + 1] = obj[dsp.fRec184 + 0];
	obj[dsp.fRec183 + 2] = obj[dsp.fRec183 + 1];
	obj[dsp.fRec183 + 1] = obj[dsp.fRec183 + 0];
	obj[dsp.fRec182 + 2] = obj[dsp.fRec182 + 1];
	obj[dsp.fRec182 + 1] = obj[dsp.fRec182 + 0];
	obj[dsp.fRec187 + 1] = obj[dsp.fRec187 + 0];
	obj[dsp.fRec186 + 2] = obj[dsp.fRec186 + 1];
	obj[dsp.fRec186 + 1] = obj[dsp.fRec186 + 0];
	obj[dsp.fRec185 + 2] = obj[dsp.fRec185 + 1];
	obj[dsp.fRec185 + 1] = obj[dsp.fRec185 + 0];
	obj[dsp.fRec190 + 1] = obj[dsp.fRec190 + 0];
	obj[dsp.fRec189 + 2] = obj[dsp.fRec189 + 1];
	obj[dsp.fRec189 + 1] = obj[dsp.fRec189 + 0];
	obj[dsp.fRec188 + 2] = obj[dsp.fRec188 + 1];
	obj[dsp.fRec188 + 1] = obj[dsp.fRec188 + 0];
	obj[dsp.fRec193 + 1] = obj[dsp.fRec193 + 0];
	obj[dsp.fRec192 + 2] = obj[dsp.fRec192 + 1];
	obj[dsp.fRec192 + 1] = obj[dsp.fRec192 + 0];
	obj[dsp.fRec191 + 2] = obj[dsp.fRec191 + 1];
	obj[dsp.fRec191 + 1] = obj[dsp.fRec191 + 0];
	obj[dsp.fRec196 + 1] = obj[dsp.fRec196 + 0];
	obj[dsp.fRec195 + 2] = obj[dsp.fRec195 + 1];
	obj[dsp.fRec195 + 1] = obj[dsp.fRec195 + 0];
	obj[dsp.fRec194 + 2] = obj[dsp.fRec194 + 1];
	obj[dsp.fRec194 + 1] = obj[dsp.fRec194 + 0];
	obj[dsp.fRec199 + 1] = obj[dsp.fRec199 + 0];
	obj[dsp.fRec198 + 2] = obj[dsp.fRec198 + 1];
	obj[dsp.fRec198 + 1] = obj[dsp.fRec198 + 0];
	obj[dsp.fRec197 + 2] = obj[dsp.fRec197 + 1];
	obj[dsp.fRec197 + 1] = obj[dsp.fRec197 + 0];
	obj[dsp.fRec202 + 1] = obj[dsp.fRec202 + 0];
	obj[dsp.fRec201 + 2] = obj[dsp.fRec201 + 1];
	obj[dsp.fRec201 + 1] = obj[dsp.fRec201 + 0];
	obj[dsp.fRec200 + 2] = obj[dsp.fRec200 + 1];
	obj[dsp.fRec200 + 1] = obj[dsp.fRec200 + 0];
	obj[dsp.fRec205 + 1] = obj[dsp.fRec205 + 0];
	obj[dsp.fRec204 + 2] = obj[dsp.fRec204 + 1];
	obj[dsp.fRec204 + 1] = obj[dsp.fRec204 + 0];
	obj[dsp.fRec203 + 2] = obj[dsp.fRec203 + 1];
	obj[dsp.fRec203 + 1] = obj[dsp.fRec203 + 0];
	obj[dsp.fRec208 + 1] = obj[dsp.fRec208 + 0];
	obj[dsp.fRec207 + 2] = obj[dsp.fRec207 + 1];
	obj[dsp.fRec207 + 1] = obj[dsp.fRec207 + 0];
	obj[dsp.fRec206 + 2] = obj[dsp.fRec206 + 1];
	obj[dsp.fRec206 + 1] = obj[dsp.fRec206 + 0];
	obj[dsp.fRec211 + 1] = obj[dsp.fRec211 + 0];
	obj[dsp.fRec210 + 2] = obj[dsp.fRec210 + 1];
	obj[dsp.fRec210 + 1] = obj[dsp.fRec210 + 0];
	obj[dsp.fRec209 + 2] = obj[dsp.fRec209 + 1];
	obj[dsp.fRec209 + 1] = obj[dsp.fRec209 + 0];
	obj[dsp.fRec214 + 1] = obj[dsp.fRec214 + 0];
	obj[dsp.fRec213 + 2] = obj[dsp.fRec213 + 1];
	obj[dsp.fRec213 + 1] = obj[dsp.fRec213 + 0];
	obj[dsp.fRec212 + 2] = obj[dsp.fRec212 + 1];
	obj[dsp.fRec212 + 1] = obj[dsp.fRec212 + 0];
	obj[dsp.fRec217 + 1] = obj[dsp.fRec217 + 0];
	obj[dsp.fRec216 + 2] = obj[dsp.fRec216 + 1];
	obj[dsp.fRec216 + 1] = obj[dsp.fRec216 + 0];
	obj[dsp.fRec215 + 2] = obj[dsp.fRec215 + 1];
	obj[dsp.fRec215 + 1] = obj[dsp.fRec215 + 0];
	obj[dsp.fRec220 + 1] = obj[dsp.fRec220 + 0];
	obj[dsp.fRec219 + 2] = obj[dsp.fRec219 + 1];
	obj[dsp.fRec219 + 1] = obj[dsp.fRec219 + 0];
	obj[dsp.fRec218 + 2] = obj[dsp.fRec218 + 1];
	obj[dsp.fRec218 + 1] = obj[dsp.fRec218 + 0];
	obj[dsp.fRec223 + 1] = obj[dsp.fRec223 + 0];
	obj[dsp.fRec222 + 2] = obj[dsp.fRec222 + 1];
	obj[dsp.fRec222 + 1] = obj[dsp.fRec222 + 0];
	obj[dsp.fRec221 + 2] = obj[dsp.fRec221 + 1];
	obj[dsp.fRec221 + 1] = obj[dsp.fRec221 + 0];
	obj[dsp.fRec226 + 1] = obj[dsp.fRec226 + 0];
	obj[dsp.fRec225 + 2] = obj[dsp.fRec225 + 1];
	obj[dsp.fRec225 + 1] = obj[dsp.fRec225 + 0];
	obj[dsp.fRec224 + 2] = obj[dsp.fRec224 + 1];
	obj[dsp.fRec224 + 1] = obj[dsp.fRec224 + 0];
	obj[dsp.fRec229 + 1] = obj[dsp.fRec229 + 0];
	obj[dsp.fRec228 + 2] = obj[dsp.fRec228 + 1];
	obj[dsp.fRec228 + 1] = obj[dsp.fRec228 + 0];
	obj[dsp.fRec227 + 2] = obj[dsp.fRec227 + 1];
	obj[dsp.fRec227 + 1] = obj[dsp.fRec227 + 0];
	obj[dsp.fRec232 + 1] = obj[dsp.fRec232 + 0];
	obj[dsp.fRec231 + 2] = obj[dsp.fRec231 + 1];
	obj[dsp.fRec231 + 1] = obj[dsp.fRec231 + 0];
	obj[dsp.fRec230 + 2] = obj[dsp.fRec230 + 1];
	obj[dsp.fRec230 + 1] = obj[dsp.fRec230 + 0];
	obj[dsp.fRec235 + 1] = obj[dsp.fRec235 + 0];
	obj[dsp.fRec234 + 2] = obj[dsp.fRec234 + 1];
	obj[dsp.fRec234 + 1] = obj[dsp.fRec234 + 0];
	obj[dsp.fRec233 + 2] = obj[dsp.fRec233 + 1];
	obj[dsp.fRec233 + 1] = obj[dsp.fRec233 + 0];
	obj[dsp.fRec238 + 1] = obj[dsp.fRec238 + 0];
	obj[dsp.fRec237 + 2] = obj[dsp.fRec237 + 1];
	obj[dsp.fRec237 + 1] = obj[dsp.fRec237 + 0];
	obj[dsp.fRec236 + 2] = obj[dsp.fRec236 + 1];
	obj[dsp.fRec236 + 1] = obj[dsp.fRec236 + 0];
	obj[dsp.fRec121 + 2] = obj[dsp.fRec121 + 1];
	obj[dsp.fRec121 + 1] = obj[dsp.fRec121 + 0];
	obj[dsp.fRec122 + 2] = obj[dsp.fRec122 + 1];
	obj[dsp.fRec122 + 1] = obj[dsp.fRec122 + 0];
	obj[dsp.fRec123 + 2] = obj[dsp.fRec123 + 1];
	obj[dsp.fRec123 + 1] = obj[dsp.fRec123 + 0];
	obj[dsp.fRec124 + 2] = obj[dsp.fRec124 + 1];
	obj[dsp.fRec124 + 1] = obj[dsp.fRec124 + 0];
	obj[dsp.fRec125 + 2] = obj[dsp.fRec125 + 1];
	obj[dsp.fRec125 + 1] = obj[dsp.fRec125 + 0];
	obj[dsp.fRec126 + 2] = obj[dsp.fRec126 + 1];
	obj[dsp.fRec126 + 1] = obj[dsp.fRec126 + 0];
	obj[dsp.fRec127 + 2] = obj[dsp.fRec127 + 1];
	obj[dsp.fRec127 + 1] = obj[dsp.fRec127 + 0];
	obj[dsp.fRec128 + 2] = obj[dsp.fRec128 + 1];
	obj[dsp.fRec128 + 1] = obj[dsp.fRec128 + 0];
	obj[dsp.fRec129 + 2] = obj[dsp.fRec129 + 1];
	obj[dsp.fRec129 + 1] = obj[dsp.fRec129 + 0];
	obj[dsp.fRec130 + 2] = obj[dsp.fRec130 + 1];
	obj[dsp.fRec130 + 1] = obj[dsp.fRec130 + 0];
	obj[dsp.fRec131 + 2] = obj[dsp.fRec131 + 1];
	obj[dsp.fRec131 + 1] = obj[dsp.fRec131 + 0];
	obj[dsp.fRec132 + 2] = obj[dsp.fRec132 + 1];
	obj[dsp.fRec132 + 1] = obj[dsp.fRec132 + 0];
	obj[dsp.fRec133 + 2] = obj[dsp.fRec133 + 1];
	obj[dsp.fRec133 + 1] = obj[dsp.fRec133 + 0];
	obj[dsp.fRec134 + 2] = obj[dsp.fRec134 + 1];
	obj[dsp.fRec134 + 1] = obj[dsp.fRec134 + 0];
	obj[dsp.fRec135 + 2] = obj[dsp.fRec135 + 1];
	obj[dsp.fRec135 + 1] = obj[dsp.fRec135 + 0];
	obj[dsp.fRec136 + 2] = obj[dsp.fRec136 + 1];
	obj[dsp.fRec136 + 1] = obj[dsp.fRec136 + 0];
	voice_idx += 1;
);
spl0 = get_dsp(0)[dsp.output0];
spl1 = get_dsp(0)[dsp.output1];

